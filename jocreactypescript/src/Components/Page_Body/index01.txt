import './index.css';
import React, { FC, ReactNode } from 'react';
import { Context_Main } from '../Context_Main';
import { useState,useEffect,useContext } from 'react';

import { SSFile_NameFolder } from '../TS_SS_File/SSFile_NameFolder';
import UI_SearchOption from '../UI_SearchOption';
import UI_DisplayFlex from '../UI_DisplayFlex';
import UI_Button from '../UI_Button';
import UI_ResettingInput from '../UI_ResettingInput';
import UI_Title from '../UI_Title';
import { const_color } from '../TS_SS_EditImg/const_color';
import { uPSM } from '../utility/uPSM';
import { uLANGUAGE } from '../utility/uLANGUAGE';
import { const_ShowColor } from '../TS_SS_ShowImg/const_showcolor';
import { TS_SS_OCR } from '../TS_SS_OCR/An_Index';
import { TS_SS_ReadOCR } from '../TS_SS_ReadOCR/An_Index';
import { TS_SS_EditImg } from '../TS_SS_EditImg/An_Index';
import { TS_SS_ShowImg } from '../TS_SS_ShowImg/An_Index';
import UI_Activate from '../UI_Activate';
import Page_OverWrite from '../Page_OverWrite';
import { Default_SS_EditImg } from '../TS_SS_EditImg/default';
import { Default_SS_OCR } from '../TS_SS_OCR/default';
import { Default_SS_ReadOCR } from '../TS_SS_ReadOCR/default';
const Page_Header = (
{
}
:{
})=>{
//***************************************************************************************************************************************
// HOOK
//***************************************************************************************************************************************
const{SS_File}=useContext(Context_Main)
const{setSS_File}=useContext(Context_Main)
const SelectKey=SS_File.SelectThisFile.index
// const ThisFile=SS_File.AllFiles[SelectKey]
const[eSS_FolderName,seteSS_FolderName]=useState<{
    Img:string,
    Text:string
}>({
    Img:SS_File.FolderName.Img,
    Text:SS_File.FolderName.Text
})

const[eSS_Img,seteSS_Img]=useState<{
    Name:string,
    EditFile:File|null,
    OriginFile:File|null
}>({
    Name:SS_File.AllFiles?
        SS_File.AllFiles[SelectKey].Img.Name?
            (SS_File.AllFiles[SelectKey].Img.Name)!
            :('Untitled No.'+SelectKey.toString())
        :'SS_File['+SelectKey.toString()+'].Img.Name does not exists.',
    EditFile:null,
    OriginFile:null
})

const[eSS_Text,seteSS_Text]=useState<{
    Name:string,
    File:string
}>({
    Name:SS_File.AllFiles?
        SS_File.AllFiles[SelectKey].Text.Name!
        :'SS_File['+SelectKey.toString()+'].Text.Name does not exists.',
    File:SS_File.AllFiles?
        SS_File.AllFiles[SelectKey].Text.File!
        :'SS_File['+SelectKey.toString()+'].Text.File does not exists.'
})

const[eSS_OpenSS,seteSS_OpenSS]=useState<boolean>(SS_File.AllFiles?
    SS_File.AllFiles[SelectKey].OpenSS
    :false
)

const[eSS_OCR,seteSS_OCR]=useState<TS_SS_OCR|null>(SS_File.AllFiles?
    SS_File.AllFiles[SelectKey].SS_OCR
    :null
)

const[eSS_ReadOCR,seteSS_ReadOCR]=useState<TS_SS_ReadOCR|null>(SS_File.AllFiles?
    SS_File.AllFiles[SelectKey].SS_ReadOCR
    :null 
)

const[eSS_ImgShape ,seteSS_ImgShape]=useState<[number,number]>([0,0])
const[eSS_EditImg,seteSS_EditImg]=useState<TS_SS_EditImg|null>(SS_File.AllFiles?
    SS_File.AllFiles[SelectKey].SS_EditImg
    :null
)

useEffect(()=>{
    if(eSS_OpenSS===true){
        seteSS_EditImg(Default_SS_EditImg)
        seteSS_OCR(Default_SS_OCR)
        seteSS_ReadOCR(Default_SS_ReadOCR)
    }
    else{
        seteSS_EditImg(null)
        seteSS_OCR(null)
        seteSS_ReadOCR(null)
    }
},[eSS_OpenSS])

useEffect(()=>{
    if(SS_File.AllFiles){
    let let_Update=[...SS_File.AllFiles]
    let_Update.splice(SelectKey,1,{
        Key:SelectKey,
        Img:{
            Name:eSS_Img.Name,
            EditedFile:eSS_Img.EditFile,
            OriginFile:eSS_Img.OriginFile,
            Shape:eSS_ImgShape
        },
        Text:{
            Name:eSS_Text.Name,
            File:eSS_Text.File
        },
        OpenSS:eSS_OpenSS,
        SS_OCR:eSS_OCR,
        SS_ReadOCR:eSS_ReadOCR,
        SS_EditImg:eSS_EditImg
    })
    setSS_File({
        AllFiles:SS_File.AllFiles,
        SelectThisFile:SS_File.SelectThisFile,
        FolderName:{
            Img:eSS_FolderName.Img,
            Text:eSS_FolderName.Text
        }
    })}
},[
    eSS_EditImg,
    eSS_FolderName,
    eSS_Img,
    eSS_ImgShape,
    eSS_OCR,
    eSS_OpenSS,
    eSS_ReadOCR,
    eSS_Text
])


//***************************************************************************************************************************************
// EDIT THE FILE
//***************************************************************************************************************************************
let JSX_OpenOverWrite=<UI_Activate
Name='Open OCR Setting'
IsActivate={eSS_OpenSS}
setIsActivate={seteSS_OpenSS}
/>
let JSX_OverWrite=<></>
if(eSS_OpenSS===true
&&  eSS_EditImg
&&  eSS_OCR
&&  eSS_ReadOCR
){
JSX_OverWrite=<Page_OverWrite
/>

}
    return (
<>
{JSX_OpenOverWrite}
{JSX_OverWrite}
</>
    )}

export default Page_Header
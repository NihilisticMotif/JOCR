import './index.css';
import React, { FC, ReactNode } from 'react';
import { Context_Main } from '../Context_Main';
import { useState,useEffect,useContext } from 'react';

import { SSFile_NameFolder } from '../TS_SS_File/SSFile_NameFolder';
import UI_SearchOption from '../UI_SearchOption';
import UI_DisplayFlex from '../UI_DisplayFlex';
import UI_Button from '../UI_Button';
import UI_ResettingInput from '../UI_ResettingInput';
import UI_Title from '../UI_Title';
import { const_color } from '../TS_SS_EditImg/const_color';
import { uPSM } from '../utility/uPSM';
import { uLANGUAGE } from '../utility/uLANGUAGE';
import { const_ShowColor } from '../TS_SS_ShowImg/const_showcolor';
const Page_Header = (
{
}
:{
})=>{
//***************************************************************************************************************************************
// HOOK
//***************************************************************************************************************************************
const{SS_File}=useContext(Context_Main)
const{setSS_File}=useContext(Context_Main)
const{SS_EditImg}=useContext(Context_Main)
const{setSS_EditImg}=useContext(Context_Main)
const{SS_ShowImg}=useContext(Context_Main)
const{setSS_ShowImg}=useContext(Context_Main)
const{SS_OCR}=useContext(Context_Main)
const{setSS_OCR}=useContext(Context_Main)

// SS_File
const[SS_ImgFolderName,setSS_ImgFolderName]=useState<string>(SS_File.FolderName.Img)
const[SS_TextFolderName,setSS_TextFolderName]=useState<string>(SS_File.FolderName.Text)

// SS_EditImg
const[SS_EditImgActivate,setSS_EditImgActivate]=useState<boolean>(SS_EditImg.Operate)
const[SS_ColorMode,setSS_ColorMode]=useState<typeof const_color[number]>(SS_EditImg.Color)
const[SS_Rotate,setSS_Rotate]=useState<number>(SS_EditImg.Rotate)

// SS_ShowImg
// const[SS_Zoom,setSS_Zoom]=useState<number>(SS_ShowImg.Zoom)
// const[SS_OriginImg,setSS_OriginImg]=useState<typeof const_ShowColor[number]>('EditedImage')

// SS_OCR
const[SS_OCRActivate,setSS_OCRActivate]=useState<boolean>(SS_OCR.Operate)
const[SS_PSM,setSS_PSM]=useState<typeof uPSM[number]>(SS_OCR.PSM)
const[SS_Languages,setSS_Languages]=useState<typeof uLANGUAGE[number][]|null>(SS_OCR.Languages)
const[SS_SelectLanguage,setSS_SelectLanguage]=useState<typeof uLANGUAGE[number]|''>(uLANGUAGE[0])
useEffect(()=>{
    setSS_File({
    AllFiles:SS_File.AllFiles,
    SelectThisFile:{
        index:SS_File.SelectThisFile.index,
        mode:SS_File.SelectThisFile.mode
    },
    FolderName:{
        Img:SS_ImgFolderName,
        Text:SS_TextFolderName,
    }
    })
    setSS_EditImg({
        Operate:SS_EditImgActivate,
        Color:SS_ColorMode,
        Rotate:SS_Rotate
    })
    // setSS_ShowImg({
    //     OriginalImage:SS_OriginImg,
    //     Zoom:SS_Zoom
    // })
    setSS_OCR({
        Operate:SS_OCRActivate,
        PSM:SS_PSM,
        Languages:SS_Languages
    })
},[
    // File
    SS_ImgFolderName,
    SS_TextFolderName,
    // EditImg
    SS_EditImgActivate,
    SS_ColorMode,
    SS_Rotate,
    // ShowImg
    // SS_OriginImg,
    // SS_Zoom,
    // OCR
    SS_OCRActivate,
    SS_PSM,
    SS_Languages,
])

//***************************************************************************************************************************************
// FUNCTION
//***************************************************************************************************************************************
function f_Fake(){
    alert('This is Fake Function')
}

//***************************************************************************************************************************************
// JSX
//***************************************************************************************************************************************

let JSX_File=<UI_DisplayFlex
JSX={[
<UI_Button
Name="Import Folder"
Function={()=>{f_Fake()}}
/>,
<UI_ResettingInput<string>
Name={'Image Folder:'+SS_ImgFolderName}
setSS_Value={setSS_ImgFolderName}
SS_Value={SS_ImgFolderName}
SS_DefaultValue={null}
/>,
<UI_Button
Name="Export Img Folder"
Function={()=>{f_Fake()}}
/>,
<UI_ResettingInput<string>
Name={'Text Folder:'+SS_TextFolderName}
setSS_Value={setSS_TextFolderName}
SS_Value={SS_TextFolderName}
SS_DefaultValue={null}
/>,
<UI_Button
Name="Export Text Folder"
Function={()=>{f_Fake()}}
/>,
<UI_Title
Name={'Number of all page: '+(SS_File.AllFiles?SS_File.AllFiles.length.toString():'0')}
/>
]}
Color='#FFFFFF'
/>

let JSX_EditImg=<UI_DisplayFlex
JSX={[
<UI_Button
Name="Edit Image"
Function={()=>{setSS_EditImgActivate(true)}}
/>,
<UI_SearchOption
Name='Color Mode'
List={const_color}
SS_Option={SS_ColorMode}
setSS_Option={setSS_ColorMode}
IsSearch={false}
/>,
<UI_ResettingInput
Name={'Rotation: '+SS_Rotate.toString()}
setSS_Value={setSS_Rotate}
SS_Value={SS_Rotate}
SS_DefaultValue={0}
/>,
<UI_Button
Name="Apply All Image Setting"
Function={()=>{setSS_EditImgActivate(true)}}
/>
]}
Color='#FFFFFF'
/>

let JSX_OCR =<UI_DisplayFlex
JSX={[
<UI_Button
Name="Operate OCR"
Function={()=>{setSS_OCRActivate(true)}}
/>,
<UI_SearchOption
Name="Detect Image as "
List={uPSM}
SS_Option={SS_PSM}
setSS_Option={setSS_PSM}
IsSearch={false}
/>,
<div>
<UI_SearchOption
Name={'Language '}
List={uLANGUAGE}
SS_Option={SS_SelectLanguage}
setSS_Option={setSS_SelectLanguage}
IsSearch={true}
/>
<UI_Button
Name="Operate OCR"
Function={()=>{
    if(SS_Languages){
    let cSS_Language=[...SS_Languages]
    let let_Update=[SS_SelectLanguage,...cSS_Language]
    setSS_Languages(let_Update)
    }
    else{
    console.log(SS_SelectLanguage)
    setSS_Languages([SS_SelectLanguage])
    }
}}
/>
{SS_OCR.Languages?.map((i,index)=>
<div>
<h1>{i}</h1>
<UI_Button
Name="x"
Function={()=>{
    if(SS_Languages){
    let cSS_Language=[...SS_Languages]
    cSS_Language.splice(index,1)
    setSS_Languages(cSS_Language)
    }
}}
/>
</div>
)}
</div>,
<UI_Button
Name="Apply All OCR Setting"
Function={()=>{setSS_OCRActivate(true)}}
/>
]}
Color='#FFFFFF'

/>
// Operate
// Language
// Option: PSM

//***************************************************************************************************************************************
// OUTPUT
//***************************************************************************************************************************************

    return (
<>
{JSX_File}
{JSX_EditImg}
{JSX_OCR}
</>
    )}

export default Page_Header
Default Mode
 
Orientation
 
n') as HTMLInputElement).value.toString();
 
            let let_Input:string=(document.getElementById('C07id_JoinButto
 
litButton') as HTMLInputElement).value.toString();
 
            let let_Input:string=(document.getElementById('C07id_Sp
 
   

        
/*
No error, but the image is not show, again.
*/
        //setSS_Image(imageURL);
        //img.src = image;
 
          // this line make SS_ImageDimensions becomes [,]
          // There is no error, but the image is not show.
 
                'Status' : 'Success', 
 
      alert(JSON.stringify(data))
 
.image
 
    message: string; // Adjust the type accordingly
 
      /* ';' expected. */
 
        img.onerror = (error) => {
            console.error('Error loading image:', error);
        };
        } catch (error) {
            console.error('Error decoding image:', error);
        }
 
//img.src = URL.createObjectURL(data.ImageBytes);
 
//img.src = URL.createObjectURL(data.ImageBytes);
 
   reader.onload = function () {
     //me.modelvalue = reader.result;
     console.log(reader.result);
   };
   reader.onerror = function (error) {
     console.log('Error: ', error);
   };
 
   const img = new Image();
  img.onload = () => {
  setSS_ImageDimensions([img.width, img.height]);
  };
  img.src = imageURL;
 
function getBase64(event) {
   let me = this;
 
    const img = new Image();
//img.src = URL.createObjectURL(data.ImageBytes);
// https://stackoverflow.com/questions/43965034/reactjs-how-to-render-images-from-a-json-blob
let binaryData = []; 
binaryData.push(data.ImageBytes); 
const blob=new Blob(binaryData, {type: 'image/png'})
img.src = URL.createObjectURL(blob)
        img.onload = () => {
          setSS_Image(img.src)
            setSS_ImageDimensions([img.width, img.height]);
        };
 
    const img = new Image();
//img.src = URL.createObjectURL(data.ImageBytes);
// https://stackoverflow.com/questions/43965034/reactjs-how-to-render-images-from-a-json-blob
let binaryData = []; 
binaryData.push(data.ImageBytes); 
const blob=new Blob(binaryData, {type: 'image/png'})
img.src = URL.createObjectURL(blob)
        img.onload = () => {
          setSS_Image(img.src)
            setSS_ImageDimensions([img.width, img.height]);
        };
 

        // Event handler for image onerror
    //img.onerror = (error) => {
    //    console.error('Error loading image:', error);
    //};
    } catch (error) {
        console.error('Error decoding image:', error);
    }
 
    try {
 
as string
 
        img.onload = () => {
          setSS_Image(img.src)
            setSS_ImageDimensions([img.width, img.height]);
        };
 
/*
Failed to execute 'createObjectURL' on 'URL': Overload resolution failed.
TypeError: Failed to execute 'createObjectURL' on 'URL': Overload resolution failed.
    at http://localhost:3000/main.88f5b741a2d8f695aa41.hot-update.js:139:38
*/
 
const img = new Image();
 

  // let let_undo='<='
  // let let_cando='=>'
 
  function f_ExportImage(){}
 
URL
 
URL
 
/*
Failed to execute 'createObjectURL' on 'URL': Overload resolution failed.
TypeError: Failed to execute 'createObjectURL' on 'URL': Overload resolution failed.
    at http://localhost:3000/main.88f5b741a2d8f695aa41.hot-update.js:139:38
*/
 
        const mediaStream = new MediaStream();
 
        data.ImageBytes= mediaStream;
 
      let  binaryData = [];
binaryData.push(data);
 
              // By ChatGPT
 
return response 
 
            //return response.json();
 
            //alert(JSON.stringify(response))
 
            let_Bytes = cv2.imencode('.png', let_Img)[1].tobytes()
 
          .then((response) => response.json() as Promise<ServerResponse>
          ).then((data) => {
            const imageURL = URL.createObjectURL(new Blob([data.imageBlob]));
            // Property 'imageBlob' does not exist on type 'Blob'.
            setSS_Image(imageURL);
            const img = new Image();
            img.onload = () => {
                setSS_ImageDimensions([img.width, img.height]);
            };
            img.src = imageURL;
            if(OCR_IsOCR===true){
              setTheMainCharacter(data.tesseractOutput);
            }
            // Property 'tesseractOutput' does not exist on type 'Blob'.
          });
 

interface ServerResponse {
    imageBlob: Blob;
    tesseractOutput: string|string[]; // Adjust the type accordingly
}
 
.then((data) => {
        const imageArrayBuffer = Uint8Array.from(atob(data.imageBlob), c => c.charCodeAt(0));
        /* 
        No overload matches this call.
  Overload 1 of 2, '(data: string): string', gave the following error.
    Argument of type 'Blob' is not assignable to parameter of type 'string'.
  Overload 2 of 2, '(data: string): string', gave the following error.
    Argument of type 'Blob' is not assignable to parameter of type 'string'.
        */
        const imageBlob = new Blob([imageArrayBuffer], { type: 'image/png' });

        const imageURL = URL.createObjectURL(imageBlob);
        setSS_Image(imageURL);
        const img = new Image();
        img.onload = () => {
            setSS_ImageDimensions([img.width, img.height]);
        };
        img.src = imageURL;

        if (OCR_IsOCR === true) {
            setTheMainCharacter(data.tesseractOutput);
        }
    });
 
            '''
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type bytes is not JSON serializable


            '''
 
          // frontend.tsx
          //...
 
/*
          .then((data) => {
              const imageURL = URL.createObjectURL(data);
              setSS_Image(imageURL);
              const img = new Image();
              img.onload = () => {
              setSS_ImageDimensions([img.width, img.height]);
              };
              img.src = imageURL;
              setTheMainCharacter('Tesseract Output')
              // How can I get TEsseract output from
              // Flask/app.py ?
              // Show me the frontend.tsx
              // and app.py
              //...
          })*/
 
        ''
 
'OCR_IsOCR'
 
OCR_BoxColor:string 
setOCR_BoxColor:(S:string)=>void
 
OCR_BoxLineWidth:number 
setOCR_BoxLineWidth:(S:number)=>void
 
OCR_BoxColor,
setOCR_BoxColor,
 
OCR_BoxLineWidth,
setOCR_BoxLineWidth
 
    const [SS_OnChange,setSS_OnChange]=useState<string>(OCR_BoxLineWidth.toString())

    function f_UpdateOCR_BoxColor(){
    let let_Input:string=(document.getElementById('C06id_UpdateOCR_BoxColor') as HTMLInputElement).value.toString();
    setOCR_BoxColor(let_Input)
    }

    function f_UpdateBoxLineWidth(){
    let let_Input:string=(document.getElementById('C06id_OCRBoxLineWidth') as HTMLInputElement).value.toString();
    if(isNaN(parseInt(let_Input))===false){
        setOCR_BoxLineWidth(parseInt(let_Input))
        setSS_OnChange(let_Input)
    }
    else{
        setOCR_BoxLineWidth(2)
        setSS_OnChange('2')
    }
    }

    function f_OnChange(){
    let let_Input:string=(document.getElementById('C06id_OCRBoxLineWidth') as HTMLInputElement).value.toString();
    setSS_OnChange(let_Input)
    }
 
<div style={{display:'flex',marginLeft:'10px',marginTop:'5px',height:'25px'}}>
<input 
placeholder="Line Width"
value={SS_OnChange}
onChange={f_OnChange}
style={{marginLeft:'0px',width:'50%',fontSize:'16px'}} id='C06id_OCRBoxLineWidth'></input>
<button onClick={f_UpdateBoxLineWidth}>Ok</button>
<input 
type='color'
value={OCR_BoxColor}
onChange={f_UpdateOCR_BoxColor}
id='C06id_UpdateOCR_BoxColor'
style={{width:'20%'}}
></input>
</div>
 
 # Convert BytesIO to bytes
 
            # app.py
 

            # Create a JSON response
 
            # app.py
            tesseract_output = pytesseract.image_to_string(OCR_Img,OCR_Langs)
 
            response_data = {
        'imageBlob': let_Bytes.read(),
        'tesseractOutput': tesseract_output,
    }
 
            '''
    image_file = request.files.get('file')
    image = Image.open(io.BytesIO(image_file.read()))

    # Apply Tesseract OCR
    tesseract_output = process_image(image, ocr_langs)

    # Return response as JSON
    response_data = {
        'imageBlob': image_file.read(),
        'tesseractOutput': tesseract_output,
    }
            '''
 
            '''
    image_file = request.files.get('file')
    image = Image.open(io.BytesIO(image_file.read()))

    # Apply Tesseract OCR
    tesseract_output = process_image(image, ocr_langs)

    # Return response as JSON
    response_data = {
        'imageBlob': image_file.read(),
        'tesseractOutput': tesseract_output,
    }
            '''
 
from flask import Flask, request, jsonify
 
                if not SS_IsRGB:
 
                if SS_IsRGB:
                    let_Img=DrawBoxAroundTextGray(let_Img,OCR_BoxColor,OCR_BoxLineWidth)
 
                if SS_IsRGB:
 
                if not SS_IsRGB:
 
            if SS_IsShow==True:
                let_Img=AffineScale(let_Img,SS_Aff_ScaleX,SS_Aff_ScaleY)
                let_Img=AffineMoveOrigin(let_Img,SS_Aff_PositionX,SS_Aff_PositionY)
                let_Img=AffineRotation(let_Img,SS_Aff_Rotation)
                let_Img=DrawingBoxes(let_Img,SS_Boxes_XYWH,SS_Boxes_Type,SS_Boxes_Color,SS_Boxes_IsShow)
            let_Img=DrawPointOrigin(
                let_Img,
                SS_AffOrigin_Mode,
                hex_to_rgb_3Dvector(SS_AffOrigin_Color),
                SS_Aff_PositionX,
                SS_Aff_PositionY
                )
            let_Img = DrawPoints(let_Img,SS_Affine[0],SS_AffineRGB[0],SS_AffineBOOL[0])
            if Is_Affine==True:
                let_Img=AffineTransformations(let_Img,SS_Affine)
            let_Img = DrawPoints(let_Img,SS_Affine[1],SS_AffineRGB[1],SS_AffineBOOL[1])
 
ge}>Download 
 
t imClick={f_Save
 
age (SS_Image)
              // when they click this button?
              // <button on
 
              Main
 
setTheMainCha
 
            print('SS_IsRGB',SS_IsRGB)
 
not 
 
Gray
 
            if SS_IsShow==True:
                let_Img=AffineScale(let_Img,SS_Aff_ScaleX,SS_Aff_ScaleY)
                let_Img=AffineMoveOrigin(let_Img,SS_Aff_PositionX,SS_Aff_PositionY)
                let_Img=AffineRotation(let_Img,SS_Aff_Rotation)
                let_Img=DrawingBoxes(let_Img,SS_Boxes_XYWH,SS_Boxes_Type,SS_Boxes_Color,SS_Boxes_IsShow)
            let_Img=DrawPointOrigin(
                let_Img,
                SS_AffOrigin_Mode,
                hex_to_rgb_3Dvector(SS_AffOrigin_Color),
                SS_Aff_PositionX,
                SS_Aff_PositionY
                )
            let_Img = DrawPoints(let_Img,SS_Affine[0],SS_AffineRGB[0],SS_AffineBOOL[0])
            if Is_Affine==True:
                let_Img=AffineTransformations(let_Img,SS_Affine)
            let_Img = DrawPoints(let_Img,SS_Affine[1],SS_AffineRGB[1],SS_AffineBOOL[1])
 
,height:'30px'
 
<div style={{display:'flex'}}>
<input 
type='color'
value={OCR_BoxColor}
onChange={f_UpdateOCR_BoxColor}
id='C06id_UpdateOCR_BoxColor'
style={{width:'20%',height:'30px'}}
></input>
</div>
 
<select id="C06id_Update_image_to_box" 
style={{marginTop:'0px', width: '70%' ,height:'30px',marginLeft:'10px',
fontSize:'16px'
}}
      value={OCR_image_to_box}
      onChange={f_UpdateOCR_image_to_box}
      >
          <option value='image_to_data'>image_to_data</option>
          <option value='image_to_boxes'>image_to_boxes</option>
</select>
 
    function f_UpdateOCR_image_to_box(){
    let let_Input:string=(document.getElementById("C06id_Update_image_to_box") as HTMLInputElement).value.toString();
    setOCR_image_to_box(let_Input)
    }
 
OCR_image_to_box,
setOCR_image_to_box,
 
OCR_image_to_box:string 
setOCR_image_to_box:(S:string)=>void
 
    OCR_image_to_box,
    setOCR_image_to_box,
 
    OCR_image_to_box:string 
    setOCR_image_to_box:(S:string)=>void
 
OCR_image_to_box={OCR_image_to_box}
setOCR_image_to_box={setOCR_image_to_box}
 
  OCR_image_to_box,
  setOCR_image_to_box,
 
  OCR_image_to_box:string;
  setOCR_image_to_box:(S:string)=>void
 
    OCR_image_to_box={OCR_image_to_box}
    setOCR_image_to_box={setOCR_image_to_box}
 
          formData.append('OCR_image_to_box',OCR_image_to_box)
 
OCR_image_to_box,
setOCR_image_to_box,
 
setOCR_image_to_box:(S:string)=>void
 
  OCR_image_to_box:string;
 
OCR_image_to_box={OCR_image_to_box}
setOCR_image_to_box={setOCR_image_to_box}
 
    OCR_image_to_box
 
OCR_image_to_box={OCR_image_to_box}
setOCR_image_to_box={setOCR_image_to_box}
 
const [OCR_image_to_box,setOCR_image_to_box]=useState<string>('image_to_box')
 
 ={ }
 
'lightgreen'
 
OCR_IsViewBox?setOCR_IsViewBox(false)
 
<button style={{fontSize:'14px',width:'45%',marginLeft:'5px'}}>Add Box</button>
 
            if SS_IsShow==True:
                let_Img=AffineScale(let_Img,SS_Aff_ScaleX,SS_Aff_ScaleY)
                let_Img=AffineMoveOrigin(let_Img,SS_Aff_PositionX,SS_Aff_PositionY)
                let_Img=AffineRotation(let_Img,SS_Aff_Rotation)
                let_Img=DrawingBoxes(let_Img,SS_Boxes_XYWH,SS_Boxes_Type,SS_Boxes_Color,SS_Boxes_IsShow)
            let_Img=DrawPointOrigin(
                let_Img,
                SS_AffOrigin_Mode,
                hex_to_rgb_3Dvector(SS_AffOrigin_Color),
                SS_Aff_PositionX,
                SS_Aff_PositionY
                )
            let_Img = DrawPoints(let_Img,SS_Affine[0],SS_AffineRGB[0],SS_AffineBOOL[0])
            if Is_Affine==True:
                let_Img=AffineTransformations(let_Img,SS_Affine)
            let_Img = DrawPoints(let_Img,SS_Affine[1],SS_AffineRGB[1],SS_AffineBOOL[1])
 
            if SS_IsShow==True:
                let_Img=AffineScale(let_Img,SS_Aff_ScaleX,SS_Aff_ScaleY)
                let_Img=AffineMoveOrigin(let_Img,SS_Aff_PositionX,SS_Aff_PositionY)
                let_Img=AffineRotation(let_Img,SS_Aff_Rotation)
                let_Img=DrawingBoxes(let_Img,SS_Boxes_XYWH,SS_Boxes_Type,SS_Boxes_Color,SS_Boxes_IsShow)
            let_Img=DrawPointOrigin(
                let_Img,
                SS_AffOrigin_Mode,
                hex_to_rgb_3Dvector(SS_AffOrigin_Color),
                SS_Aff_PositionX,
                SS_Aff_PositionY
                )
            let_Img = DrawPoints(let_Img,SS_Affine[0],SS_AffineRGB[0],SS_AffineBOOL[0])
            if Is_Affine==True:
                let_Img=AffineTransformations(let_Img,SS_Affine)
            let_Img = DrawPoints(let_Img,SS_Affine[1],SS_AffineRGB[1],SS_AffineBOOL[1])
 
    # https://stackoverflow.com/questions/63752141/drawing-a-colored-rectangle-in-a-grayscale-video-using-opencv-python
    img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
 
    # I want the Tesseract and Open CV draw the box around the text
    # with color, after I use cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
 
            #(0,0,0), 
 
BoxColor
 
    #plt.figure(figsize=(16,12))
    #plt.imshow(rgb_img)
    #plt.title('SAMPLE INVOICE WITH CHARACTER LEVEL BOXES')
    #plt.show()
 
            print(type(i[-1]))
 
#****************************************************************************
# Get Image Processing Input from POST Request
#****************************************************************************
 

@app.route('/HelloWorld')#,methods = ['POST', 'GET'])
def HelloWorld():
    # https://www.geeksforgeeks.org/how-to-connect-reactjs-with-flask-api/
    return {'messenger':33}

@app.route('/Square',methods = ['POST', 'GET'])
def HelloSomeone():
    if request.method == 'POST':
        Let_JSON  = request.get_json()
        let_IsRGB = Let_JSON.get('IsRGB')
        if let_IsRGB=='false':
            return {'messenger':'Bordom'}
        else:
            return {'messenger':'Addiction'}
 
id='C06id_OCR_BoxLineWidth'
 
OCR_BoxLineWidth
 
        File Name: 
 
<h1 style={{fontSize:'14px'}}>Line: {4}</h1>
 
Line 
 
Line 
 
    image = cv2.imread(img)
 
canny,get_grayscale,erode,dilate,opening,
 
{OCR_IsViewBox? 'Deactivate':'Activate'}
 
<button>Add Box</button>
 
<button
style={{width:'30%',height:'30px'}}
>Activate</button>
<button
style={{width:'30%',height:'30px'}}
>Deactivate</button>
<button
style={{width:'30%',height:'30px'}}
>Add Box</button>
 
,marginLeft:'5px'
 
,marginLeft:'5px'
 
,marginLeft:'5px'
 
</div>
 
<input 
type='color'
value={OCR_BoxColor}
onChange={f_UpdateOCR_BoxColor}
id='C06id_UpdateOCR_BoxColor'
style={{width:'45%'}}
></input>
 
{
/****************************************************************************
// Scale = SS_Aff[0] = SS_Aff[1]
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />


{
//****************************************************************************
// Scale Y = SS_Aff[1]
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
<tr>
    <td style={{width:let_WidthTr}} >Scale Y</td>
    <td>Aff[1]</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}} id='C04id_Aff1'></input></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateAff(1,1)')}>Ok</button></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetAff(1,1) ')}>Reset</button></td>
</tr>
{
//****************************************************************************
// Rotation = SS_Aff[4]
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
<tr>
    <td style={{width:let_WidthTr}} >Rotation</td>
    <td>Aff[4]</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}} id='C04id_Aff4'></input></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateAff(4,0)')}>Ok</button></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetAff(4,0) ')}>Reset</button></td>
</tr>
{
//****************************************************************************
// Show Origin
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
<tr>
    <td style={{width:let_WidthTr}} >Show Origin</td>
    <td><input type='color' id='C04id_AffShowColorr'></input></td>
</tr>
<tr>
<select id="C04id_AffShoww">
  <option value="NoOrigin">No Origin</option>
  <option value="CenterOrigin">Center Origin</option>
  <option value="TopLeftOrigin">Top Left Origin</option>
</select>
<td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateOrigin')}>Ok</button></td>
</tr>
{
//****************************************************************************
// Pos X = SS_Aff[2]
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
<tr>
    <td style={{width:let_WidthTr}} >Pos X</td>
    <td>Aff[2]</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}} id='C04id_Aff2'></input></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateAff(2,0)')}>Ok</button></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetAff(2,0) ')}>Reset</button></td>
</tr>
{
//****************************************************************************
// Pos Y = SS_Aff[3]
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
<tr>
    <td style={{width:let_WidthTr}} >Pos Y</td>
    <td>Aff[3]</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}} id='C04id_Aff3'></input></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateAff(3,0)')}>Ok</button></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetAff(3,0) ')}>Reset</button></td>
</tr>
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
*/}
 
<select id="C06id_Update_image_to_box" 
style={{marginTop:'0px', width: '100px' ,height:'30px'}}
      value={OCR_image_to_box}
      onChange={f_UpdateOCR_image_to_box}
      >
          <option value='image_to_data'>image_to_data</option>
          <option value='image_to_boxes'>image_to_boxes</option>
</select>
 
</>
 
const [OCR_IsBoxColorActivate,setOCR_IsBoxColorActivate]=useState<boolean>(false)
 
<button style={{backgroundColor:OCR_IsBoxColorActivate?'lightgreen':'white'}}>Activate</button>
<button style={{backgroundColor:OCR_IsBoxColorActivate?'white':'lightgreen'}}>Deactivate</button>
 
OCR_IsBoxColorActivate:boolean
setOCR_IsBoxColorActivate:(S:boolean)=>void
 
OCR_IsBoxColorActivate,
setOCR_IsBoxColorActivate,
 
OCR_IsBoxColorActivate,
setOCR_IsBoxColorActivate,
 
'''
value="Rectangle">
value="Frame">Fram
value="Line">Line<
value="LineX">Hori
value="LineY">Vert
'''  
 
        #try:
        #    img[img>=Maxx[-1]]=255
        #    return img
        #except:
        #    return img
 
            if SS_IsShow==True:
                let_Img=AffineScale(let_Img,SS_Aff_ScaleX,SS_Aff_ScaleY)
                let_Img=AffineMoveOrigin(let_Img,SS_Aff_PositionX,SS_Aff_PositionY)
                let_Img=AffineRotation(let_Img,SS_Aff_Rotation)
                let_Img=DrawingBoxes(let_Img,SS_Boxes_XYWH,SS_Boxes_Type,SS_Boxes_Color,SS_Boxes_IsShow)
 
        <td>
<input 
    onChange={()=>f_OnChange(j[0],j[1])}
    value={(SS_nDTable[j[0]][j[1]]).toString()} 
    id={'C04id_Kernal'+ss_ThisKernal.Key+'_'+(j[0]*10+j[1]).toString()}></input>
        </td>
 
 && typeof JSX_Con[0][0]==='number'
 
  TS_K
 
<></>
 
100, 200
 
'ddede'
 
'box.Type[0]'
 
Crop</option>
 

  <option value="Crop" style={{display:'none'}}>
 
  <option value="LineY">Vertical Line</option>
 
'C05id_AddBox'+'Type'+box.Key.toString()
 
            // Add New Column in List of All THRESHOLDS
 
COLUMN
 
COLUMN
 
lassName='C04id_Button'>RGB</button>
 

    <button onClick={f_Gray} style={{backgroundColor:let_Color[0]}} className='C04id_Button'>Gray</button>
    <button onClick={f_RGB}  style={{backgroundColor:let_Color[1]}} c
 
    let ocr_OutputFile=[...OCR_OutputFile]
    ocr_OutputFile[1]=let_Input
 
          {/*<option value='pdf'>.pdf</option>
          <option value='alto'>.alto</option>
          <option value='hocr'>.hocr</option>
    <option value='json'>.json</option>*/}
 
    </div>
 
        <div style={{display:'inline-block',marginLeft:'10px',margin:'auto'}}>
 
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>{let_State}</h1>
 
    function f_Gray(){
      setSS_UseEffect(true)
      setSS_IsRGB(false)
    }

    function f_RGB(){
      setSS_UseEffect(true)
      setSS_IsRGB(true)
    }
    let let_State='Color'
    if(SS_IsRGB===true){
      let_State='Color'
      let_Color[0]='white'
      let_Color[1]='lightgreen'
    }
    else{
      let_State='Gray'
      let_Color[0]='lightgreen'
      let_Color[1]='white'
    }
 
7. First Row as Column 
 
import { useState } from "react"
 
//****************************************************************************
// INPUT
//****************************************************************************
 
//****************************************************************************
// OUTPUT
//****************************************************************************
 
; // You can specify the filename here
 
05id_AddBox'+'Type'+box.Key.toString()
 
  <option value="LineX">Horizontal Line</option>
  <option value="LineY">Vertical Line</option>
  <option value="Crop" style={{display:'none'}}>Crop</option>
 
downloaded_image
 
.split(',');
 
onClick={()=>setOpenSaveImage(true)}
 

//****************************************************************************
// JSX_01: Download Image
//****************************************************************************

 
File Name: 
 
    let JSX_ImageDownloadingButton=<></>
    if(OpenSaveImage===false){
      JSX_ImageDownloadingButton= 
        
 
<td><button className='I02id_Header' onClick={()=>setOpenSaveImage(true)} style={{whiteSpace:'nowrap'}}>Export Image</button></td>
 
    }else{
      JSX_ImageDownloadingButton= 
        <td>
          File Name: <input></input>
          <button>Download</button>
          <button>
        </td>
    }
 
t Image</button></td>
 
<td><button className='I02id_Header' onClick={f_ExportImage} style={{whiteSpace:'nowrap'}}>Expor
 
f_ExportImage
 
        <td>Image File Name <input></input></td>
 
<button></button>
 
              // By ChatGPT
 
          //alert(JSON.stringify(SS_Boxes))
 
          //let let_ImageJson = JSON.stringify(Object.fromEntries(formData));
 
              //body:formData,
 


 
// JSON.stringify({IsRGB:SS_IsRGB.toString(),file:let_ImageJson}),
              //headers: { "content-type": "application/json" }
 
            //return response.json();
 
            //alert(JSON.stringify(response))
 
,marginRight:'auto'
 
width==='50%'? '100%':
 
        const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
 
- scrollbarWidth
 
+30
 
+30
 
width:width==='50%'? '200%':'100%',
 
    overflow-x: scroll;
 
    border-collapse: collapse;
 
overflow-y: scroll;
 
windowWidth = window.innerWidth;
 
        if(width!=='50%'){
 
        }
        
        else{
        const windowWidth = window.innerWidth;
        const leftThWidth = document.querySelector('.C01id_Left')?.clientWidth || 0;
        const rightRowThWidth = document.querySelector('.C01id_RightRow')?.clientWidth || 0;
 
        setinputWidth(dynamicWidth)
        dynamicWidthDivRef.current.style.width = dynamicWidth + 'px';
      }
 
overflow-y: scroll;
 
        style={{wiud}}
 
else{
        
      }
 
const dynamicWidthDivRef = useRef<HTMLDivElement>(null);
 
const dynamicWidthDivRef = Ref_C04.current;
 
        const leftThWidth = document.querySelector('.C01id_Left')?.clientWidth || 0;
        const rightRowThWidth = document.querySelector('.C01id_RightRow')?.clientWidth || 0;
 
const let_CurrentWidthC04 = Ref_C04.current;
let let_WidthC04=(document.getElementById('I02id_Canvas')as HTMLElement)
if (let_CurrentWidthC04) {
const let_ObsImageWidth = new ResizeObserver(() => { 
  setSS_WidthImage(let_WidthC04!.offsetWidth-1)
})
let_ObsImageWidth.observe(let_CurrentWidthC04);
return () => {
    let_ObsImageWidth.disconnect();
};
}
 

  useEffect(()=>{
    
  }
  ,[SS_OpenPanel])
 
        {//<td><button className='I02id_Header' >Export Image</button></td>
        }
 
        {/*<td><button className='I02id_Header'>{let_undo}</button></td>
        <td><button className='I02id_Header'>{let_cando}</button></td>
        */}
 
width={width}
 
width:string
 
width
 
'C01id_Edit'+INDEX.toString()
 
useEffect(()=>{

}
,[TheMainCharacter])
 
){
        
    }
 
    /*
// marginLeft of the text = 0px

I'm that first-person they talk about in all the books
I'm that perspective you cannot doubt, see how I look
Control the narrative reliably, baby, it's all about me
And I wrote the book about throwing the book
At those who don't do it by it
So now I'm holding myself hostage
Stockholm lust just looks like justice
And enough lefts don't make the right but two wrongs do
Oh man, Sun Tzu would love this
...

// I want to set marginLeft of the text = 10px

  I'm that first-person they talk about in all the books
  I'm that perspective you cannot doubt, see how I look
  Control the narrative reliably, baby, it's all about me
  And I wrote the book about throwing the book
  At those who don't do it by it
  So now I'm holding myself hostage
  Stockholm lust just looks like justice
  And enough lefts don't make the right but two wrongs do
  Oh man, Sun Tzu would love this
...
    */
 
// marginLeft of the text = 0px
 
,
 
    height:'auto'
 
height:
 
-30-15+25
 
overflowY:'auto'
 
    overflow-x: auto;
    overflow-y:auto;
 
I'm that first-person they talk about in all the books
I'm that perspective you cannot doubt, see how I look
Control the narrative reliably, baby, it's all about me
And I wrote the book about throwing the book
At those who don't do it by it
...
 
I'm the gap between a tragedy and comedy
 
// The Text is very long.
// I want the height of textarea fit with the amount of any input text.
 
    height:'100%',
 
    overflowY:SS_IsEdit?'hidden':'auto'
 
height:`calc(100vh - ${0}px - ${105+let_HeaderHeight-30-15}px)`
 
height:
 
    /*useEffect(()=>{
    if(typeof TheMainCharacter!=='string'&&SS_Index){
    const let_Rows:string[] = [...TheMainCharacter]
    // update JSX_Rows every time when
    JSX_Rows = let_Rows.map((value: string, index: number, array: string[]) =>{
        return (
            <>
            <Row_2D
            INDEX={index}
            TheMainCharacter={TheMainCharacter}
            setTheMainCharacter={setTheMainCharacter}
            SS_EditRow={SS_EditRow}
            setSS_EditRow={setSS_EditRow}
            inputwidth={inputWidth}
            />
            </>)
    })}
    else{
        JSX_Rows=<h1>There is error with TheMainCharacter</h1>
    }
    },[TheMainCharacter,SS_EditRow])*/
 
height
 
height:string
 
width={width}
 
</>
 
{TheMainCharacter}
 
<div style={{marginLeft:'10px'}}>
{TheMainCharacter}
</div>
 
</div>
 
<th >{OCR_OutputFile}</th>
 
<hr/>
 
    height:'100%',
 
style={{marginBottom:'10px'}}
 
    marginBottom:'10px',
 
<th style={{marginBottom:'10px'}}>{OCR_OutputFile}</th>
 

/* width */
::-webkit-scrollbar {
    width: 20px;
}

/* Track */
::-webkit-scrollbar-track {
    box-shadow: inset 0 0 5px grey;
    border-radius: 5px;
}

/* Handle */
::-webkit-scrollbar-thumb {
    background: red;
    border-radius: 10px;
}
 
,margin: 'auto'
 
marginBottom:'10px'
 
,marginTop:'50px'
 
<button className='C07id_SmallH1' onClick={f_S
 
</div>
 
className='C07id_SmallH1'
 

.C07id_SmallH1 button,
.C07id_SmallH1 input{
    width:40px;
    height:20px
}
 
</div>
 
setSS_IsCharacterArray
 
setSS_IsCharacterArray:(S:boolean)=>void
 
{//<R_UtilityTable/>
}
 
SS_IsCharacterArray={SS_IsCharacterArray}
setSS_IsCharacterArray={setSS_IsCharacterArray} 
 
SS_IsCharacterArray:boolean
setSS_IsCharacterArray:(S:boolean)=>void
 
SS_IsCharacterArray,
setSS_IsCharacterArray,
 
SS_IsCharacterArray:boolean
setSS_IsCharacterArray:(S:boolean)=>void
 
SS_IsCharacterArray,
setSS_IsCharacterArray,
 
[...
 
'C01id_Edit'+INDEX.toString()
 
<h1 style={{fontSize:'14px',marginTop:'0px',marginBottom:'0px'}}>Output Type</h1>
<button //onClick={()=>setSS_IsCharacterArray(false)} 
style={{backgroundColor: SS_IsCharacterArray?'white':'lightgreen'}}>String</button>
<button //onClick={()=>setSS_IsCharacterArray(true)}  
style={{backgroundColor: SS_IsCharacterArray?'lightgreen':'white'}}>String Array</button>
 
New Line
 
+INDEX.toString()
 
+INDEX.toString()
 
let THISROW=TheMainCharacter[INDEX]
 
    INDEX:number,
 
    INDEX,
 
<tr style={{width:'100%'}}>
    <td className='C01id_Left'>{INDEX}</td>
    <td><div style={{width:'100%'}}>{THISROW}</div></td>
    <td className='C01id_RightRow'>
        <div className='C01id_EditRowButton'>
            <button style={{width:'45px'}} onClick={()=>setSS_EditRow([INDEX,'Edit'])}>Edit</button>
            <button style={{width:'calc( 100% -45px - 45px)'}} onClick={()=>setSS_EditRow([INDEX,'Insert'])}>Insert</button>
            <button style={{width:'45px'}} onClick={()=>setSS_EditRow([INDEX,'Delete'])}>X</button>
        </div>  
    </td>
</tr>
 
        }}
 
    if(SS_EditRow[0]===INDEX){
        if(SS_EditRow[1]==='Insert'){
 
        setSS_EditRow([INDEX,'None'])
 
    SS_EditRow,
    setSS_EditRow,
 
    SS_EditRow:[number,'None'|'Edit'|'Delete'|'Insert']
    setSS_EditRow:(S:[number,'None'|'Edit'|'Delete'|'Insert'])=>void
 
/button> 
 
            <button style={{width:'50%'}} onClick={()=>setSS_EditRow([INDEX,'None'])}>Cancel<
 
        ss_Rows.splice(INDEX,0,let_Input)
 
    // Actually Update Data
    function f_Update():void{
        let let_Input:string=(document.getElementById('C01id_Edit'+INDEX.toString()) as HTMLInputElement).value.toString();
        let ss_Rows=[...TheMainCharacter]
        ss_Rows[INDEX]=let_Input
        setTheMainCharacter(ss_Rows)
        setSS_EditRow([INDEX,'None'])
    }
 
if(SS_EditRow[1]==='Edit'){
            JSX_Row=<>
<tr className='C01id_HeightLightRow C01id_Left'>
    <td>Original</td>
    <td><div style={{width:'100%'}}>{THISROW}</div></td>
    <div className='C01id_EditRowButton'><button onClick={f_Update}>Ok</button></div>
</tr>
<tr className='C01id_HeightLightRow C01id_Left'>
    <td>Edited</td>
    <td><div style={{display:'flex'}}>
            <input id={'C01id_Edit'+INDEX.toString()} style={{fontSize:'16px',width:`${inputwidth}px`}}></input>
        </div>
    </td>
    <td><div className='C01id_EditRowButton'>
            <button onClick={()=>setSS_EditRow([INDEX,'None'])}>Cancel</button>
        </div>
    </td>
</tr>
</>
        }
 
    JSX_Row=JSX_DefaultRow
 
        if(SS_EditRow[1]==='None'){
            JSX_Row=JSX_DefaultRow
        }
 
    let JSX_DefaultRow=<tr style={{width:'100%'}}>
    <td className='C01id_Left'>{INDEX}</td>
    <td><div style={{width:'100%'}}>{THISROW}</div></td>
    <td className='C01id_RightRow'>
        <div className='C01id_EditRowButton'>
            <button style={{width:'45px'}} onClick={()=>setSS_EditRow([INDEX,'Edit'])}>Edit</button>
            <button style={{width:'calc( 100% -45px - 45px)'}} onClick={()=>setSS_EditRow([INDEX,'Insert'])}>Insert</button>
            <button style={{width:'45px'}} onClick={
                ()=>setSS_EditRow([INDEX,'Delete'])
                }>X</button>
            </div>  
    </td></tr>
 
if(SS_EditRow[1]==='Delete'){
        JSX_Row=<>
<tr className='C01id_HeightLightRow C01id_Left'>
    <td>{INDEX}</td>
    <td>{THISROW}</td>
    <td>
        <div className='C01id_EditRowButton' style={{marginLeft:'auto'}}>
        <button onClick={f_Delete}>Ok</button>
        </div>
    </td>
</tr>
<tr className='C01id_HeightLightRow C01id_Left'>
    <td></td>
    <td >Do you sure you want to delete this row?</td>
    <td>
        <div className='C01id_EditRowButton'>
        <button onClick={()=>{setSS_EditRow([INDEX,'None'])}}>Cancel</button>
        </div>
    </td>
</tr>
</>
        }
 
const [SS_OnClick,setSS_OnClick]=useState<string>(THISROW)
 
const [SS_OnClick,setSS_OnClick]=useState<string>(THISROW)
 

    function f_Delete():void{
        let ss_TheMainCharacter=[...TheMainCharacter]
        ss_TheMainCharacter.splice(INDEX,1)
        setTheMainCharacter(ss_TheMainCharacter)
        setSS_EditRow([INDEX,'None'])
    }
 
alert(
 
SS_EditRow[0])//
 
alert(INDEX)//
 
},[])
 
&&SS_Index
 
 = 
 
},[TheMainCharacter])
 
=<></>
 

    // Calculate dynamic width on initial render
 

    // Recalculate dynamic width on window resize
 

    // Cleanup event listener on component unmount
 
        </div> 
 
        <div className='C01id_EditRowButton'>
 
utton>
 
            <button style={{width:'calc( 100% -45px - 45px)'}} onClick={()=>setSS_EditRow([INDEX,'Insert'])}>Insert</b
 
style={{marginTop:'10px'}}
 
Control the narrative reliably, baby, it's all about me
And I wrote the book about throwing the book
At those who don't do it by it
So now I'm holding myself hostage
Stockholm lust just looks like justice
 
            </div>
        <div className='C01id_EditRowButton'>
 
        </div>  
 
        <div style={{display:'flex'}}>
 
            </div>
        <div className='C01id_EditRowButton'>
 
        </div>  
 
        <div >
 
style={{display:'flex'}}
 
inline-
 
style={{display:'inline-flex'}}
 
style={{display:'inline-flex'}}
 
            
 
</div>
 
</div>
 
 className='C01id_Right'
 
<div className='C01id_EditRowButton' style={{marginLeft:'auto'}}>
        <button onClick={f_Delete}>Ok</button>
        </div>
 
    <td><div style={{width:'100%'}}>{SS_OnClick}</div></td>
    <td>
        <div className='C01id_EditRowButton'><button onClick={f_Update}>Ok</button></div>
    </td>
</tr>
<tr className='C01id_HeightLightRow C01id_Left'>
    <td></td>
 
            <button onClick={f_OnChange} style={{width:'40px'}}>Ok</button>
            <button onClick={f_ResetUpdate} style={{width:'55px'}}>Reset</button>
 
-40-55
 
marginLeft:'0px'
 
            
 
<div style={{marginLeft:'70px'}} className='C06id_VerticalLine'></div>
<div style={{marginLeft:'70px'}} className='C06id_VerticalLine'></div>
<div style={{marginLeft:'70px'}} className='C06id_VerticalLine'></div>
<div style={{marginLeft:'70px'}} className='C06id_VerticalLine'></div>
<div style={{marginLeft:'70px'}} className='C06id_VerticalLine'></div>
<div style={{marginLeft:'70px'}} className='C06id_VerticalLine'></div>
<div style={{marginLeft:'70px'}} className='C06id_VerticalLine'></div>
<div style={{marginLeft:'70px'}} className='C06id_VerticalLine'></div>
 
    width:50%;
 
const let_HeaerWidth='100%'
 
width={width}
 
</div>
 
<div>
 
style={{width:'100%'}}
 
style={{width:'100px'}}
 
</div>
 
<div id='C01id_InnerTable' style={{overflowX:'hidden',width:'100%'}}>
 
 * SS_TextDimension = 0
 
 * SS_TextDimension = 1
 
 * Text.split() => Table 

 
:string='100%'
 
I'm that perspective you cannot doubt, see how I look
Control the narrative reliably, baby, it's all about me
And I wrote the book about throwing the book
At those who don't do it by it
So now I'm holding myself hostage
Stockholm lust just looks like justice
 
    TheMainCharacter:string|string[]
    setTheMainCharacter:string|string[]
 
    TheMainCharacter,
    setTheMainCharacter,
 
import TS_Row from '../T01_Row/An_Index';
import TS_Column from '../T02_Column/An_Index';
 
'white'
 
    let let_Color=[
        'white',
        'white',
        'white',
        'white'
    ]
    let_Color[SS_TextDimension]='lightgreen'
 
[3]}}>Full Table</button>
 
<button onClick={()=>setSS_TextDimension(2)} style={{backgroundColor:let_Color[2]}}>Table</button>
<button onClick={()=>setSS_TextDimension(3)} style={{backgroundColor:let_Color
 
import TS_Row from '../T01_Row/An_Index';
import TS_Column from '../T02_Column/An_Index';
 
setSS_OpenPanel:(S:number)=>void
 
setSS_OpenPanel,
 
  function f_Cancel():void{
        setSS_EditRow([INDEX,'None'])
    }
 
//****************************************************************************
// FUNCTION_03: Update
//****************************************************************************
 
//****************************************************************************
// JSX_00: JSX_Row_td
//****************************************************************************

 
    const JSX_EditRow=<td><div style={{width:'100%'}}>{SS_OnClick}</div></td>
    const JSX_EditRowInput=<td>
            <div style={{display:'flex'}}>
                <input id={'C01id_Edit'+INDEX.toString()} style={{width:'860px'}}></input>
                <button onClick={f_SmallUpdate} style={{marginLeft:'20px',width:'40px'}}>Ok</button>
                <button onClick={f_ResetUpdate} style={{width:'55px'}}>Reset</button>
            </div></td>
 
        SS_OnClick
        let SS_OnClick=SS_OnClick
 
                
               
 
f_Cancel
 
//****************************************************************************
// FUNCTION_01: Edit Row
//****************************************************************************
    function f_EditRow():void{
        setSS_EditRow([INDEX,'None'])
    }
//****************************************************************************
// FUNCTION_01: Delete Column
//****************************************************************************
    function f_OpenDelete():void{
        setSS_EditRow([INDEX,'Delete'])
    }
 
 //ref={Ref_C01}
 
 Filter SS_Column.Name by IsVisible=true
 
        /*
        Argument of type '(index: number, row: string) => JSX.Element' is not assignable to parameter of type '(value: string, index: number, array: string[]) => Element'.
  Types of parameters 'index' and 'value' are incompatible.
    Type 'string' is not assignable to type 'number'.
        */
 
,row:string
 
    // TYPE
    // PROPERTY
 
    // PARAMETER
    // PROPERTY
 
    // HOOK: setState()
 
    // HOOK: setState()
 
Row,
 
const 
 
            {// https://stackoverflow.com/questions/38302507/react-colspan-not-working
            }
 
.toString()
 
    let let_SelectRowIndex=SS_EditRow.split(',')[0]
    let let_SelectRowMode=SS_EditRow.split(',')[1]
 
1 | Row 1                            | Edit, Insert, Delete
 
[0]+'.'+OCR_OutputFile[1]
 
f_Cancel
 
function f_ClickRow(state:'None'|'Edit'|'Delete'){
    
}  
 
}
 
'0,None'
 
string
 
        //width:`${let_HeaderWidth}px`
 
let let_HeaderWidth=1000
 
    useEffect(()=>{
        let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
        let_HeaderWidth=let_C01Width
    },[])
 
            THISROW={Row}
 
    THISROW,
 
    THISROW:string,
 
|string
 
|string
 
setSS_OpenPanel:(S:0|1|2)=>void
 
setSS_OpenPanel,
 
01_Text
 

//-------------------------+--------------+----------+
// CSS                     | File Name    | General  |
//-------------------------+--------------+----------+
//import './index00.css'; // | index.jsx    | General  |
//import './index01.css'; // | index.jsx    | Specific |
//-------------------------+--------------+----------+

 
// Components
 
import C_ColumnButton from './Coms02_Table/C_ColumnButton';
 
// Type
import TS_Row from '../T01_Row/An_Index';
import TS_Column from '../T02_Column/An_Index';
 
// React
import { useState , useEffect, useRef, useInsertionEffect } from 'react';

const Row_2D = (
//****************************************************************************
// INPUT
//****************************************************************************
{
// PARAMETER
// PERPERTY
// HOOK
SS_Row,
setSS_Row,
setSS_OpenPanel,
Header
}:{
// TYPE
// PERPERTY
// HOOK
SS_Row:string
setSS_Row:(S:string)=>void
setSS_OpenPanel:(S:0|1|2)=>void
Header:string
}
) => {
//****************************************************************************
// Function 00: Automately close C02 when the width is too narrow.
//****************************************************************************
const let_HeaderHeight=100
let let_HeaderWidth=0
//****************************************************************************
// HOOK
//****************************************************************************
    const [SS_UpdateRow,setSS_UpdateRow]=useState<string>(SS_Row)
    const [SS_SelectRow,setSS_SelectRow]=useState<string>('None')

//****************************************************************************
// FUNCTION_01: Back
//****************************************************************************
    function f_Cancel():void{
        setSS_SelectRow('None')
    }
//****************************************************************************
// FUNCTION_01: Rename Column
//****************************************************************************
    function f_OpenRename():void{
        setSS_SelectRow('Edit')
    }

//****************************************************************************
// FUNCTION_03: Update
//****************************************************************************
    // Help user to compare user's edited and the original data
    function f_SmallUpdate():void{
        let let_Input:string=(document.getElementById('C01id_Edit'+'INDEX.toString()') as HTMLInputElement).value.toString();
        setSS_UpdateRow(let_Input)
    }
    // Turn back the original data
    function f_ResetUpdate():void{
        setSS_UpdateRow(SS_Row)
    }
    // Actually Update Data
    function f_Update():void{
        setSS_Row(SS_UpdateRow)
        setSS_SelectRow('None')
    }
//****************************************************************************
// JSX_00: JSX_Row_td
//****************************************************************************

    const JSX_EditRow=<td><div style={{width:'100%'}}>{SS_UpdateRow}</div></td>
    const JSX_EditRowInput=
    <td>
            <div style={{display:'flex',height:'300px'}}>
                <input id={'C01id_Edit'+'INDEX.toString()'} value={SS_UpdateRow} onChange={f_SmallUpdate} style={{fontSize:'14px',width:'860px'}}></input>
            </div></td>
//****************************************************************************
// JSX_01: JSX_Row
//****************************************************************************
    // JSX = representing in JSX
    // Default Column JSX
    let JSX_Row:JSX.Element=<h1></h1>
    // Default Column JSX
    JSX_Row=<></>

        if(SS_SelectRow==='Edit'){
    JSX_Row=<>
<tr className='C01id_HeightLightRow C01id_Left'>
    <td>Original</td>
    <td><div style={{width:'1000px'}}>{SS_Row}</div></td>
    <td></td>
</tr>
<tr className='C01id_HeightLightRow C01id_Left'>
    <td></td>
    {JSX_EditRowInput}
    <td><div className='C01id_EditRowButton'>
                <button onClick={f_SmallUpdate} style={{marginLeft:'0px',width:'35px'}}>Ok</button>
                <button onClick={f_ResetUpdate} style={{width:'55px'}}>Reset</button>
                <button onClick={f_Cancel} style={{width:'65px'}}>Cancel</button>
        </div></td>
</tr>
    </>
        }
        else{
        JSX_Row=<tr style={{width:'100%'}}>
    <td className='C01id_Left'></td>
    <td><div style={{width:'1000px'}}>{SS_Row}</div></td>
    <td className='C01id_RightRow'>
        <div className='C01id_EditRowButton'><button onClick={f_OpenRename}>Edit</button></div></td>
</tr>
        }
//****************************************************************************
// OUTPUT
//****************************************************************************
    return (

<div id='C01id_H' //ref={Ref_C01}
>

<div id='C01id_InnerTable' style={{overflowX:'hidden'}}>
<table id='C01id_Table' style={{width:'100%'}}>
<tbody id='C02id_Height' style={{
    height:`calc(100vh - ${0}px - ${105+let_HeaderHeight-30-15}px)`,
    }}>
<tr>
    <th className='C01id_Left'>Index</th>
    <th><div style={{width:'1000px'}}>{Header}</div></th>
    <th className='C01id_RightRow'><div className='C01id_EditRowButton'>
        Edit</div></th>
</tr>
{JSX_Row}
</tbody>
</table>


</div>

</div>
    )
}

export default Row_2D
 
setSS_OpenPanel,
 
setSS_OpenPanel:(S:0|1|2)=>void
 
strin
 
let let_HeaderWidth=0
 
//import M00_Row from './M00_Row';
 
 , useEffect, useRef, useInsertionEffect
 
//&& OCR_IsOpen==='Image'
 
{
  OCR_OutputFile:string[]
  OCR_Languages:string[][]
  SS_Aff:number[]
  SS_Boxes:TS_Box[]
  SS_AffOrigin:string[]
SS_IsActivate:boolean[]
SS_IsShow:boolean
SS_Kernals:TS_Kernal[]
SS_Affine       :number[][][]
SS_AffineSTR    :string[][][]
SS_AffineRGB    :string[][]
SS_AffineBOOL:boolean[][]
SS_Image:string | null
SS_Zoom      :number
SS_WidthImage:number
SS_IsRGB     :boolean
SS_ImageFile :File|null
SS_UseEffect :boolean
SS_OpenPanel:0|1|2;
SS_Thresholds:TS_Threshold[];
setOCR_OutputFile:(S:string[])=>void
setOCR_Languages:(S:string[][])=>void
setSS_Aff:(S:number[])=>void
setSS_Boxes:(S:TS_Box[])=>void
setSS_AffOrigin:(S:string[])=>void
setSS_Image:(S:string | null)=>void
setSS_IsShow:(S:boolean)=>void
setSS_AffineBOOL:(S:boolean[][])=>void
setSS_AffineRGB :(S:string[][])=>void
setSS_AffineSTR :(S:string[][][])=>void
setSS_Affine    :(S:number[][][])=>void
setSS_Kernals:(S:TS_Kernal[])=>void
setSS_IsActivate:(S:boolean[])=>void
setSS_Zoom      :(S:number)=>void
setSS_WidthImage:(S:number)=>void
setSS_IsRGB     :(S:boolean)=>void
setSS_ImageFile :(S:File|null)=>void
setSS_UseEffect :(S:boolean)=>void
setSS_OpenPanel:(S:0|1|2)=>void;
setSS_Thresholds:(S:TS_Threshold[])=>void
}
 
setOCR_IsOpen:(S:boolean)=>void
 
setOCR_IsOpen:(S:boolean)=>void
 
import TS_Row from './T01_Row/An_Index';
 
   ,
   ,
 
 :(S:string)=>void
 
   :string
 
 ={ }
 ={ }
 
   :string
 
//****************************************************************************
// VARIABLE: Data Cleaning
//****************************************************************************


//****************************************************************************
// FUNCTION_00: Open / Close C02_Input
//****************************************************************************


 
    function f_Open(){
        //setSS_C02(true)
        //if(SS_IsNarrow===false){
        //    setSS_C02(true)
        //}
    }
    function f_Close(){
        //setSS_C02(false)
    }
 
    let let_RowData=SS_Row.map((Row)=>{
        return Row.Array
    })

    let let_ColumnData=SS_Columns.map((Column)=>{
        return Column.Name
    })

    let let_Data=[let_ColumnData,...let_RowData]
 
    // PARAMETER
    // HOOK: setState()
    SS_Row,
    SS_Columns,
    SS_C02,
    //setSS_C02,
 
    // TYPE
    // HOOK: setState() 
    SS_Row:TS_Row[],
    SS_Columns:TS_Column[],
    SS_C02:boolean,
    //setSS_C02:(S:boolean)=>void,
 
// PARAMETER
// PERPERTY
// HOOK
 
// TYPE
// PERPERTY
// HOOK
 
SS_TextDimension,
SS_Text,
setSS_Text,
SS_LongString,
setSS_LongString,
 
SS_Row,
setSS_Row,
SS_Columns,
setSS_Columns,
SS_EditColumn,
setSS_EditColumn,
SS_C02,
setSS_C02,
 
let let_C01MinWidth='300px'
 
SS_IsNarrow===true ? {width:let_C01MinWidth} : 
 
SS_IsNarrow===true ? {width:let_C01MinWidth} : 
 
        SS_Row={SS_Row}
        SS_Columns={SS_Columns}
         ={ }
        // ={ }
 
        set ={ }
 
        SS_EditColumn={SS_EditColumn}
        setSS_EditColumn={setSS_EditColumn}
 
    if((SS_OpenPanel===0 || SS_OpenPanel===2)){
        let_Width='calc('+let_C01Width+' - '+let_C02Width.toString()+'px)'
    }
    else{
        let_Width=let_C01Width
    }

 
let let_C02Width=275
 
//****************************************************************************
// USESTATE HOOK SYSTEM SETTING
//****************************************************************************
    const [SS_IsNarrow,setSS_IsNarrow]=useState<boolean>(false)

    const [SS_OpenPanel,setSS_OpenPanel]=useState<0|1|2>(2)
    // 0 = Open only C01_Table
    // 1 = Open only C04_Canvas
    // 2 = Open C01_Table and C04_Canvas

    let let_C02Width=275

//****************************************************************************
// USESTATE HOOK IMAGE PROCESSING
//****************************************************************************

//****************************************************************************
// CONSTANT VARIABLE
//****************************************************************************


//****************************************************************************
// DEFAULT INPUT
//****************************************************************************

    // The Text output of JOCR Output
    // Stand Name: Will Wood
    // Stand User: JOCR JoeStar
    const [TheMainCharacter,setTheMainCharacter]=useState<string|string[]>(
        `
I'm that first-person they talk about in all the books
I'm that perspective you cannot doubt, see how I look
Control the narrative reliably, baby, it's all about me
And I wrote the book about throwing the book
At those who don't do it by it
So now I'm holding myself hostage
Stockholm lust just looks like justice
...
        `
    )
    
    // C04
    const [SS_Image     , setSS_Image] = useState<string | null>(null);  

    const [SS_Thresholds,setSS_Thresholds]=useState<TS_Threshold[]>([
        {Key:112,PositionY:10 ,ScalePosition:0,IsDefault:false,Gray:'#000000'},
        {Key:121,PositionY:121,ScalePosition:121,IsDefault:false,Gray:'#000000'},
        {Key:211,PositionY:211,ScalePosition:211,IsDefault:false,Gray:'#000000'},
    ])
    const [SS_Zoom      ,setSS_Zoom] = useState<number>(1)
    const [SS_WidthImage, setSS_WidthImage] = useState<number>(0);
    const [SS_IsRGB     ,setSS_IsRGB]=useState<boolean>(true)
    const [SS_ImageFile,setSS_ImageFile]=useState<null|File>(null)

    const [SS_UseEffect,setSS_UseEffect]=useState<boolean>(true)

    // shape = (2,3,2)
    const [SS_Affine,setSS_Affine]=useState<number[][][]>([
        // Selected Point
        [
            [0,0],
            [0,100],
            [100,0],
        ],
        // Transformed Point
        [
            [0,0],
            [0,100],
            [100,0],
        ]
    ])
    
    const [SS_AffineSTR,setSS_AffineSTR]=useState<string[][][]>([
        // Selected Point
        [
            ['0','0'],
            ['0','100'],
            ['100','0'],
        ],
        // Transformed Point
        [
            ['0','0'],
            ['0','100'],
            ['100','0'],
        ]
    ])
    const [SS_AffineRGB,setSS_AffineRGB]=useState<string[][]>([
        ['#000000',
        '#000000',
        '#000000',],
        ['#000000',
        '#000000',
        '#000000',]
    ])

    const [SS_AffineBOOL,setSS_AffineBOOL]=useState<boolean[][]>(
        [
            [false,false,false],
            [false,false,false]
        ]
    )

    const [SS_Aff,setSS_Aff]=useState<number[]>([
        1,  // Scale X
        1,  // Scale Y
        0,  // Pos X
        0,  // Pos Y
        0   // Rotation
    ])
    const [SS_AffOrigin,setSS_AffOrigin]=useState<string[]>([
        'NoOrigin',
        '#000000'
    ])

    // C05_Convolution/U_Convolution.tsx
    const [SS_Kernals,setSS_Kernals]=useState<TS_Kernal[]>([
        {Key:0,Name:'Convolution',
        Kernal:[
            [0,0,0,0,0],
            [0,0,0,0,0],
            [0,0,1,0,0],
            [0,0,0,0,0],
            [0,0,0,0,0],
        ],
        Kernal_str:[
            ['0','0','0','0','0'],
            ['0','0','0','0','0'],
            ['0','0','1','0','0'],
            ['0','0','0','0','0'],
            ['0','0','0','0','0'],
        ],
        Iterations:1,
        IsActivate:false},
        {Key:1,Name:'Erosion',
        Kernal:[
            [1,1,1,1,1],
            [1,1,1,1,1],
            [1,1,1,1,1],
            [1,1,1,1,1],
            [1,1,1,1,1],
        ],
        Kernal_str:[
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
        ],
        Iterations:1,
        IsActivate:false},
        {Key:2,Name:'Dilation',
        Kernal:[
            [1,1,1,1,1],
            [1,1,1,1,1],
            [1,1,1,1,1],
            [1,1,1,1,1],
            [1,1,1,1,1],
        ],
        Kernal_str:[
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
        ],
        Iterations:1,
        IsActivate:false},
        {Key:3,Name:'Convolution',
        Kernal:[
            [0,0,0,0,0],
            [0,0,0,0,0],
            [0,0,1,0,0],
            [0,0,0,0,0],
            [0,0,0,0,0],
        ],
        Kernal_str:[
            ['0','0','0','0','0'],
            ['0','0','0','0','0'],
            ['0','0','1','0','0'],
            ['0','0','0','0','0'],
            ['0','0','0','0','0'],
        ],
        Iterations:1,
        IsActivate:false},
        {Key:4,Name:'Open',
        Kernal:[
            [1,1,1,1,1],
            [1,1,1,1,1],
            [1,1,1,1,1],
            [1,1,1,1,1],
            [1,1,1,1,1],
        ],
        Kernal_str:[
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
        ],
        Iterations:1,
        IsActivate:false},
    ])

    const [SS_IsActivate,setSS_IsActivate]=useState<boolean[]>([
        false,  // C05_Convolution/SS_nDMatrix
        false,  // C05_Convolution/SS_Thresholds
        false,  // C05_Convolution/SS_Affine
        false,  // C05_Convolution/Erosion
        false,  // C05_Convolution/Dilation
    ])
    const [SS_IsShow,setSS_IsShow]=useState<boolean>(false)

    const [SS_OpenOCR,setSS_OpenOCR]=useState<string>('Image')
    // 'Image','OCR'

    const [OCR_Languages,setOCR_Languages]=useState<string[][]>([
        ['tha','Thai'],
        ['eng','English'],
        ['afr', 'Afrikaans'],
        ['amh', 'Amharic'],
        ['ara', 'Arabic'],
        ['asm', 'Assamese'],
        ['aze', 'Azerbaijani'],
        ['aze_cyrl', 'Azerbaijani (Cyrillic)'],
        ['bel', 'Belarusian'],
        ['ben', 'Bengali'],
        ['bod', 'Tibetan'],
        ['bos', 'Bosnian'],
        ['bre', 'Breton'],
        ['bul', 'Bulgarian'],
        ['cat', 'Catalan']
          ])
    const [OCR_Mode,setOCR_Mode]=useState<number>(0)
    const [OCR_OutputFile,setOCR_OutputFile]=useState<string[]>(['OutputFile','txt'])
    const [OCR_DPI,setOCR_DPI]=useState<number>(2400)
    const [OCR_IsFirstRowAsColumn,setOCR_IsFirstRowAsColumn]=useState<boolean>(false)
    const let_HeaderHeight=100
/*

+--------------+--------+-----------+--------+--------+--------+--------+--------+
| type (string)| id     | LineWidth | Color  | X      | Y      | W      | H      |
+--------------+--------+-----------+--------+--------+--------+--------+--------+
| Rectangle    | number | number    | string | number | number | number | number |
| Frame        | number | number    | string | number | number | number | number |
| Line         | number | number    | string | number | number | number | number |
| XLine        | number | number    | string | number | 0      | number | 0      |
| YLine        | number | number    | string | 0      | number | 0      | number |
+--------------+--------+-----------+--------+--------+--------+--------+--------+
*/
    const [SS_Boxes,setSS_Boxes]=useState<TS_Box[]>([
            {Key:0,XYWH:[0,0,500,500,4],Type:['Rectangle','#000000'],IsShow:false},
            {Key:1,XYWH:[0,0,500,500,4],Type:['Rectangle','#000000'],IsShow:true},
            {Key:2,XYWH:[0,0,500,500,4],Type:['Rectangle','#000000'],IsShow:false},
            {Key:3,XYWH:[0,0,500,500,4],Type:['Rectangle','#000000'],IsShow:false},
            {Key:4,XYWH:[0,0,500,500,4],Type:['Rectangle','#000000'],IsShow:false},
        ])

 
    let let_Width:string='50%'
    let let_C01Width:string='100%'
    let let_C01MinWidth='300px'
 
const [SS_OpenOCR,setSS_OpenOCR]=useState<string>('Image')
 
const [SS_IsShow,setSS_IsShow]=useState<boolean>(false)
 
05_Convolution/U_Threshold.tsx
 
    false,  // C05_Convolution/Erosion
    false,  // C05_Convolution/Dilation
 
    false,  // ???
    false,  // ???
 
C05_Convolution/U_Convolution.tsx
 
// C04_ImageEditor/Coms...
 
const [SS_ImageFile,setSS_ImageFile]=useState<null|File>(null)
 
-------------------------------------------------------------------
 
//**************************************
 
 Hook
 

    // C04_ImageEditor/U_Aff.tsx
    // Aff = Simple Affine
 
    // How can I check if the file is the image and 
    // if so, how can I get the width and height of this file
 
const [SS_EditColumn,setSS_EditColumn]=useState<0|1>(0)

 
    const [SS_EditColumn,setSS_EditColumn]=useState<0|1>(0)
 
const [SS_OpenPanel,setSS_OpenPanel]=useState<0|1|2>(2)
 
//const  =true
 
import C02_Input from "./C02_Input";
 
import TS_Row from './T01_Row/An_Index';
import TS_Column from './T02_Column/An_Index'
 
    const [ , ]=useState<boolean>(true)
 
        SS_TextDimension={SS_TextDimension}
        SS_Text={SS_Text}
        setSS_Text={setSS_Text}
        SS_LongString={SS_LongString}
        setSS_LongString={setSS_LongString}
 
         ={ }
 
{JSX_C02}
 
        JSX_C02=<></>
 
    let JSX_C02=<></>
 
    useEffect(()=>{
        if(SS_TextDimension!==3){
            setSS_C02(false)
        }
        if(SS_TextDimension===3){
            setSS_C02(true)
        }
    },[SS_TextDimension])
 
SS_C02&&
 
        JSX_C02=<C02_Input
            SS_Row={SS_Row}
            setSS_Row={setSS_Row}
            SS_Columns={SS_Columns}
            setSS_Columns={setSS_Columns}
            SS_EditColumn={SS_EditColumn}
            setSS_EditColumn={setSS_EditColumn}
            />
 
    

    

    // 0 = 1 Row
    // 1 = Multiple Rows
    // 2 = Table
    // 3 = Full Table
 
    // C01, C02 and C03
    const [SS_Columns, setSS_Columns]=useState<TS_Column[]>([
        {Key:0,Name:'Artist'},
        {Key:1,Name:'Album'},
        {Key:2,Name:'Music'},
        {Key:3,Name:'Genre'},
        {Key:4,Name:'Key'},
        ])
 
    const [SS_Row,setSS_Row]=useState<TS_Row[]>([
        {Key:0 ,Next:1  , Array:['y','y','y','y'],Display:4},
        {Key:1 ,Next:2  , Array:['Tally Hall',"Marvin's Marvelous Mechanical Museum",'The Ruler of Everything','Indie Rock','01']},
        {Key:2 ,Next:3  , Array:['RadioHead','In Rainbows','Weird Fishes/Arpeggi','Alternative Rock','02']},
        {Key:3 ,Next:4  , Array:['Weezer','Blue Album',"Buddy Holly",'Pop Punk','03']},
        {Key:4 ,Next:5  , Array:['Gorillaz','Demon Days',"Feel Good Inc.",'Hip Hop','04']},
        {Key:5 ,Next:6  , Array:['Mother Mother','O My Heart',"Hayloft",'Indie Rock','05']},
        ])
    const [SS_LongString,setSS_LongString]=useState<string>(`
****************************************************************************************************************

Song: That's Enough, Let's Get You Home.
Artist: Will Wood
Lyrics:
My dream girl, those eyes, that nose
My private inside joke, sign the cast on my funny bone
Floral sheets on long-given-up ghosts
Haunt my bedroom at night and say "Let's get you home"
They say "Grow up, be a man, 'cause until then
You're nothing but a short-haired girl"
But come and Braille-palm-read and hold my hand
See my reason and "Goodbye cruel world"
And oh my God, what's wrong with me?
And the wife of Walter Keane, whose name right now's escaping me
That's right, Margaret
Dream girl, come, and sweep me off my knees
I'd rather stay asleep than never see you wake up next to me
Neon lights like heat lamps in the cold
To incubate the shadows you can't stitch back to your soles
And you seemed fine just a few days ago
But CO2 and fish tanks do enough to get you home
Well now you swear in your prayers telling time
"Promise I'll never have fun again
If you'd stop flying, " but then you start crying "Never mind, you win"
And far too late came far too soon
And the love you never made became the things you'd never do
Oh, sweet Mary
Dream girl, come, but keep your hands off me
Go on back to bed my love, I mean,
That's where dreams are supposed to be
So come on, William, grow up, be a man
'Cause until then they're gonna treat you
Like you're just a little girl
But come and Braille-palm-read, hold my hands and you'll see that
It's me who cries mercy while your fingers curl
And, oh, are you at all like me?
Do you know what I mean?
Or am I too close to see?
Someone, anyone?
Of the two things we do on our knees
Watch me fold my hands just to crack my knuckles
Well, here is the church, here is the steeple
Open the doors, see all the people
Alright, that's enough, let's get you home

****************************************************************************************************************

Song: That's Enough, Let's Get You Home.
Artist: Will Wood
Lyrics:
One time, I tried to sing
About... I don't know, but it was nothing fucking new
Yet another platitude
"Blah, blah, blah, blah, blah, blah, bla-blah blah"
Is all they heard
Oh, you thought they were listening?
Now, don't be absurd
All the rain comes down the same
But not a drop can stake its claim
Down they pour, with millions more, to the floor with no name
I'm sure you really sang your Heart out
Or I'm sure that's how it seemed
But you and I both know so well, now
That looks can be deceiving
'Cos "blah, blah, blah, blah, blah, blah, bla-blah blah"
Is so overdone
For a man cloaked in daylight, you sure hate the sun
When the tears stream down one day
Obfuscated by the rain
Can you truly say, with a straight face
That you tried your best?
Mr Mind?
Yeah?
What do you see from behind those dead, leaden eyes?
A Soul so deep, and dark, and eternally cold
And an oath, formed from us both
That it would stay whole
But I think, if I left it to you
You'd fall under its weight and kill it too
But I won't let you ruin what we could still be
We have so much left to sing
Such a plain and simple thing
Yet your silence lines this pit in which we have lain
All the rage, despair and shame
That's been caged, ensnared and flamed
Form this atom bomb of songs refused to be played
So if you insist on crying
While our host is slowly dying
Then I'll cut you loose and spare this noose the dead weight
Silent, explosive's this vile scent's corrosives
The wiles and the woes that these sibilants and plosives
Defer to inside from the earrings he hides
He's so confident his throes won't be found once he's died
But these silent explosives caused violent narcosis
This trident he forged is both weapon and motive
This world will forget you
Neglect, then regret to
Enweave the same story the backdrop is set to
The vastness of time, the unrhymable rhymes
I have heard this before but I'll never again
One time, you tried to sing
About storm and a spring
But they know how it

****************************************************************************************************************

    `)
    const [SS_Text,setSS_Text]=useState<string[]>([
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad",
        "minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit",
        "in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia",
        "deserunt mollit anim id est laborum"])
    const [SS_TextDimension,setSS_TextDimension]=useState<number>(0)
 
import C_ColumnButton from './Coms02_Table/C_ColumnButton';
 
// Type
import TS_Row from '../T01_Row/An_Index';
import TS_Column from '../T02_Column/An_Index';
 
import C_ColumnButton from './Coms02_Table/C_ColumnButton';
import C_Row from './Coms02_Table/C_Row'
 
import TS_Row from '../T01_Row/An_Index';
import TS_Column from '../T02_Column/An_Index';
import M02_Table from './M02_Table';
 
//-------------------------+--------------+----------+
// CSS                     | File Name    | General  |
//-------------------------+--------------+----------+
//import './index00.css'; // | index.jsx    | General  |
//import './index01.css'; // | index.jsx    | Specific |
//-------------------------+--------------+----------+
 
// Components
import C_ColumnButton from './Coms02_Table/C_ColumnButton';
import C_Row from './Coms00_Row/C_Row'
// Type
import TS_Row from '../T01_Row/An_Index';
import TS_Column from '../T02_Column/An_Index';

 
    width:100%
 
    display: block;
 
    border-collapse: collapse;
 
    table-layout: fixed;
 
,tableLayout: 'fixed'
 
    // C01id_Table does not fill all the empty space.
 
'1000px'
 
    // width:'100%' does not fill all the empty space 
    // I want to make this DOM element fill all the empty space
 
// Data
 
    backgroundColor:'#FF333FF'
 
,backgroundColor:'#FF333FF'
 
`)

(`
 
={SS_Text}
 
        <div style={{display:'inline-block',marginLeft:'10px',margin:'auto'}}>
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>{let_State}</h1>
    <button onClick={f_Gray} style={{backgroundColor:let_Color[0]}} className='C04id_Button'>Gray</button>
    <button onClick={f_RGB}  style={{backgroundColor:let_Color[1]}} className='C04id_Button'>RGB</button>
    </div>
 
  let let_Color=['white','white']
 

    let let_State='Color'
    if(SS_IsRGB===true){
      let_State='Color'
      let_Color[0]='white'
      let_Color[1]='lightgreen'
    }
    else{
      let_State='Gray'
      let_Color[0]='lightgreen'
      let_Color[1]='white'
    }
 
    function f_Gray(){
      setSS_UseEffect(true)
      setSS_IsRGB(false)
    }

    function f_RGB(){
      setSS_UseEffect(true)
      setSS_IsRGB(true)
    }
 
SS_IsRGB:boolean
setSS_UseEffect:(S:boolean)=>void
setSS_IsRGB:(S:boolean)=>void
 
SS_IsRGB,
setSS_UseEffect,
setSS_IsRGB
 
<tr className='C01id_HeightLightRow C01id_Left'>
    <td>Edited</td>
    {JSX_EditRow}
    <td><div className='C01id_EditRowButton'><button onClick={f_Update}>Ok</button></div></td>
</tr>
 
                <button onClick={f_SmallUpdate} style={{marginLeft:'20px',width:'40px'}}>Ok</button>
                <button onClick={f_ResetUpdate} style={{width:'55px'}}>Reset</button>
                <button onClick={f_ResetUpdate} style={{width:'55px'}}>Cancel</button>
 
    const [SS_UpdateRow,setSS_UpdateRow]=useState<string>(SS_Row)
 
    //useEffect(()=>{setSS_SelectRow('Edit')},[])

    //const [SS_Display,setSS_Display]=useState<0|1|2|3>((typeof THISROW.Display ==='undefined') ? 0 : THISROW.Display)
    // Set Mode of this component for Rename and/or Delete itself
    //      0|  // Default JSX Column | f_Cancel       => let_DefaultDisplay(0) => Open Default JSX Column
    //      1|  // Rename JSX Column  | f_OpenRename   => let_DefaultDisplay(1) => Open Rename JSX Column 
    //      2|  // Delete JSX Column  | f_OpenDelete   => let_DefaultDisplay(2) => Open Delete JSX Column 
    //useEffect(()=>{
    //    setSS_UpdateRow(THISROW)
    //},[SS_Row])
 
//****************************************************************************
// FUNCTION_01: Delete Column
//****************************************************************************

 
    function f_OpenDelete():void{
        setSS_SelectRow('Delete')
    }
    function f_Delete():void{
        setSS_Row('')
        setSS_SelectRow('None')
    }
 
<button onClick={f_OpenDelete}>X</button>
 
    <button onClick={f_OpenDelete}>X</button></div><
 
        <button onClick={f_OpenDelete}>X</button></div></td>
 
        else if(SS_SelectRow==='Delete'){
    JSX_Row=
<>
<tr className='C01id_HeightLightRow C01id_Left'>
    <td></td>
    <td><div style={{width:'1000px'}}>{JSX_EditRow}</div></td>
    <td className='C01id_Right'></td>
</tr>
<tr className='C01id_HeightLightRow C01id_Left'>
    {// https://stackoverflow.com/questions/38302507/react-colspan-not-working
    }
    <td></td>
    <td >Do you sure you want to delete this data?</td>
    <td><div className='C01id_EditRowButton' style={{marginLeft:'auto'}}><button onClick={f_Delete}>Ok</button></div><div className='C01id_EditRowButton'><button onClick={f_Cancel}>Cancel</button></div></td>
</tr>
</>
        }
 
<tr style={{width:'100%'}}>
    <td className='C01id_Left'>{INDEX}</td>
    <td><div style={{width:'1000px'}}>{THISROW}</div></td>
    <td className='C01id_RightRow'>
        <div className='C01id_EditRowButton'><button onClick={f_EditRow}>Edit</button>
        <button onClick={f_OpenDelete}>X</button></div></td>
</tr>
 
<tr style={{width:'100%'}}>
    <td className='C01id_Left'>{INDEX}</td>
    <td><div style={{width:'1000px'}}>{THISROW}</div></td>
    <td className='C01id_RightRow'>
        <div className='C01id_EditRowButton'><button onClick={f_EditRow}>Edit</button>
        <button onClick={f_OpenDelete}>X</button></div></td>
</tr>
 
    //const [SS_Display,setSS_Display]=useState<0|1|2|3>((typeof THISROW.Display ==='undefined') ? 0 : THISROW.Display)
    // Set Mode of this component for Rename and/or Delete itself
    //      0|  // Default JSX Column | f_Cancel       => let_DefaultDisplay(0) => Open Default JSX Column
    //      1|  // Rename JSX Column  | f_OpenRename   => let_DefaultDisplay(1) => Open Rename JSX Column 
    //      2|  // Delete JSX Column  | f_OpenDelete   => let_DefaultDisplay(2) => Open Delete JSX Column 
    //useEffect(()=>{
    //    setSS_UpdateRow(THISROW)
    //},[SS_Row])
 
    // JSX = representing in JSX
    // Default Column JSX
 
//****************************************************************************
// Function 00: Automately close C02 when the width is too narrow.
//****************************************************************************
const let_HeaderHeight=100
let let_HeaderWidth=0
const [SS_SelectRow,setSS_SelectRow]=useState<string>('None')
//****************************************************************************
// JSX_00: Filter SS_Column.Name by IsVisible=true
//****************************************************************************

    const JSX_TH_Rows=<>
<C_Row
SS_Row={SS_Text}
setSS_Row={setSS_Text}
SS_SelectRow={SS_SelectRow}
setSS_SelectRow={setSS_SelectRow}
/>
</>
 
        alert('Editt')
 
.toUpperCase()
 
.toUpperCase()
 
alert(SS_Row)
 
        alert('RainSound')
 
    let let_SelectRowMode=SS_SelectRow
 
    useEffect(()=>{alert(SS_Row)},[])
 
    useEffect(()=>{
        let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
        let_HeaderWidth=let_C01Width
    },[])
 
    useEffect(()=>{
        let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
        let_HeaderWidth=let_C01Width
    },[])
 
        alert(SS_UpdateRow)
 
        let ss_UpdateRow=SS_UpdateRow
 
        let ss_Rows=SS_Row
        ss_Rows=ss_UpdateRow
 
const let_Rows:string[] = SS_Text
 
            INDEX={index}
            THISROW={Row}
 
{THISROW}
 
{INDEX}
 
<tr style={{width:'100%'}}>
    <td className='C01id_Left'></td>
    <td><div style={{width:'1000px'}}>{SS_Row}</div></td>
    <td className='C01id_RightRow'>
        <div className='C01id_EditRowButton'><button onClick={f_OpenRename}>Edit</button>
        <button onClick={f_OpenDelete}>X</button></div></td>
</tr>
 
    let let_SelectRowIndex=SS_SelectRow.split(',')[0]
 
.split(',')[1]
 
    if(let_SelectRowIndex===INDEX.toString()){
        if(let_SelectRowMode==='None'){
    JSX_Row=
<tr style={{width:'100%'}}>
    <td className='C01id_Left'>{INDEX}</td>
    <td><div style={{width:'1000px'}}>{THISROW}</div></td>
    <td className='C01id_RightRow'>
        <div className='C01id_EditRowButton'><button onClick={f_OpenRename}>Edit</button>
        <button onClick={f_OpenDelete}>X</button></div></td>
</tr>
        }
 
{INDEX}
 
INDEX.toString()+
 
[INDEX]
 
[...
 
ss_Row
 
        let ss_Row=SS_Row]
        ss_Row.splice(INDEX,1)
 
[...
 
+INDEX.toString()
 
INDEX.toString()+',
 
INDEX.toString()+',
 
INDEX.toString()+',
 
INDEX.toString()+',
 
    INDEX,
    THISROW,
 
    INDEX:number,
    THISROW:string,
 
    // Rename Row JSX
    /*else if (THISROW.Display===1){
        JSX_Row=
<>
<tr className='C01id_HeightLightRow C01id_Left'>
    <td>Original</td>
    {JSX_Row_TD}
    <td></td>
</tr>
<tr className='C01id_HeightLightRow C01id_Left'>
    <td>Edited</td>
    {JSX_EditRow}
    <td><div className='C01id_EditRowButton'><button onClick={f_Update}>Ok</button></div></td>
</tr>
<tr className='C01id_HeightLightRow C01id_Left'>
    <td></td>
    {JSX_EditRowInput}
    <td><div className='C01id_EditRowButton'><button onClick={f_Cancel}>Cancel</button></div></td>
</tr>
</>
    // Delete Column JSX
    }else if (THISROW.Display===2){
        JSX_Row=
<>
<tr className='C01id_HeightLightRow C01id_Left'>
    <td>{INDEX}</td>
    {JSX_Row_TD}
    <td className='C01id_Right'></td>
</tr>
<tr className='C01id_HeightLightRow C01id_Left'>
    {// https://stackoverflow.com/questions/38302507/react-colspan-not-working
    }
    <td colSpan={THISROW.Array.length}>Do you sure you want to delete this row?</td>
    <td><div className='C01id_EditRowButton' style={{marginLeft:'auto'}}><button onClick={f_Delete}>Ok</button></div></td>
    <td><div className='C01id_EditRowButton'><button onClick={f_Cancel}>Cancel</button></div></td>
</tr>
</>
    // Starting Linked List
    }else if (THISROW.Display===4){
        JSX_Row=<></>
    }*/
 
let let_UpdateRows=
 
//D01_Delete(THISROW,ss_Row)
 
        //let let_UpdateRow = U01_EditRow(THISROW,ss_Rows,ss_UpdateRow)
        //alert(JSON.stringify(let_UpdateRow))
        //setSS_Row(let_UpdateRow)
 
ss_Rows[]
 
INDEX:number
 
        let ss_UpdateRow=SS_UpdateRow
 
NAME:string,INDEX:number
 
    <td></td>
 
<div className='C01id_EditRowButton' style={{marginLeft:'auto'}}><button onClick={f_Delete}>Ok</button></div>
 
colSpan={THISROW.Array.length}
 
()=>
 
alert('
 
')
 
marginLeft:'700px',
 
className=''
 
C01id_EditRowButton
 
{JSX_EditRow}
 
<tr style={{width:'100%'}}>
    <td className='C01id_Left'>{INDEX}</td>
    <td><div style={{width:'1000px'}}>{THISROW}</div></td>
    <td className='C01id_RightRow'>
        <div className='C01id_EditRowButton'><button onClick={f_OpenRename}>Edit</button>
        <button onClick={()=>alert('f_OpenDelete')}>X</button></div></td>
</tr>
 
parseInt
 
</button>
 
<button onClick={()=>alert('f_Insert')}>Insert
 
<button onClick={f_Insert}>Insert</button>
 
            if(i<ROWS.length-1){
                let_NextKey=ROWS[i+1].Key
            
            ROWS.splice(i, 1,{
                Key: ROWS[i].Key,
                Next: let_NewKey,
                Array: ROWS[i].Array, 
                Display:0
            });
            let_NewRow={
                Key:let_NewKey,
                Next:let_NextKey,
                Array:let_Array,
                Display:0
            }
        }else{
            let_NextKey = Math.random()
            while(ROWS.map(ROW=>ROW.Key).includes(let_NextKey)===true&&let_NextKey!==let_NewKey){
                let_NextKey = Math.random()
            }

            let_NewRow={
                Key: let_NewKey,     
                Next: let_NextKey,   
                Array: let_Array,       
                }
        }
        }
 
Math.random()
    while(ROWS.map(ROW=>ROW.Key).includes(let_NextKey)===true){
        let_NextKey = Math.random()
    }
 
    alert(JSON.stringify([let_NewRow,...ROWS]))
 
                // Next does not update.
 
        // Renamed Column
 
        // All Columns
 

    //alert(ROWS.length)
 
                //alert(446933)
 
            // ROWS[i-1].Next does not update
 
            ROWS.splice(i+1, 1,{
                Key: ROWS[i+1].Key,
                Next: ROWS[i+1].Next,
                Array: ROWS[i+1].Array, 
                Display:0
            });
 
            ROWS.splice(i+1, 1,{
                Key: ROWS[i+1].Key,
                Next: ROWS[i+1].Next,
                Array: ROWS[i+1].Array, 
                Display:0
            });
 
            ROWS[i-1].Next=let_NewKey
 
[{"Key":0.7083043278585954,"Next":0.4379561337432065,"Array":["-","-","-","-","-"],"Display":0},{"Key":0,"Next":1,"Array":["y","y","y","y"],"Display":4},{"Key":1,"Next":2,"Array":["Tally Hall","Marvin's Marvelous Mechanical Museum","The Ruler of Everything","Indie Rock","01"]},{"Key":2,"Next":3,"Array":["RadioHead","In Rainbows","Weird Fishes/Arpeggi","Alternative Rock","02"]},{"Key":0.7083043278585954,"Next":0.4379561337432065,"Array":["-","-","-","-","-"],"Display":0},{"Key":3,"Next":4,"Array":["Weezer","Blue Album","Buddy Holly","Pop Punk","03"]},{"Key":4,"Next":5,"Array":["Gorillaz","Demon Days","Feel Good Inc.","Hip Hop","04"]},{"Key":5,"Ne
 
Array":["Mother Mother","O My Heart","Hayloft","Indie Rock","05"]}]
 
let 
 
:TS_Row=
 
    /*
    for(let i:number=0;i<ROWS.length;i+=1){
        
            if(ROWS[i].Key===THISROW.Key){
                
                
            if(i!==1){
            ROWS.splice(i-1, 1,{
                Key: ROWS[i-1].Key,
                Next: let_NewKey,
                Array: ROWS[i-1].Array, 
                Display:0
            });
            }else{
            ROWS[0].Next=let_NewKey
            }
            if(i!==ROWS.length-1){
                //alert(JSON.stringify(ROWS[i+1]))
                let_NextKey=ROWS[i+1].Key
            }
            }
                ROWS.splice(i, 0,{
                Key: let_NewKey,
                Next: let_NextKey,
                Array: let_Array, 
                Display:0
            });
            break
        }*/
 
            alert(JSON.stringify(ROWS[i-1]))
            alert(JSON.stringify(ROWS[i]))
 
                alert(JSON.stringify(ROWS[i+1]))
 
let let_NewRow
 
:TS_
 
    
    return ROWS
}
 
alert(i)
 
alert(i)
 
                //alert(JSON.stringify(ROWS[i-1]))
                //alert(JSON.stringify(ROWS[i]))
 
    alert(JSON.stringify(ROWS))
 
    alert(JSON.stringify(ROWS))
 
alert(JSON.stringify(ROWS[i+1]))
 
    let let_DefaultRow:TS_Row={Key:0 ,Next:1  , Array:['y','y','y','y'],Display:4}
 
    let let_DefaultRow:TS_Row={Key:0 ,Next:1  , Array:['y','y','y','y'],Display:4}
 
    //alert(JSON.stringify(ROWS))
 
    alert(JSON.stringify(ROWS))
    //alert(JSON.stringify(ROWS))
 
/*
type TS_Row={
    Key:number,         // DEFAULT: Math.random()
                        // Unique Key
    Next:number,        // Key's of the next TS_Row
                        // If not exist, then Next = this Key
    Array:string[],     // Contains data.
    Display?:0|1|2|3|4, // Display State
}

export default TS_Row
*/
 
            //...
            return ROWS
        }
 
// Properties of Each Column
 
// Type Script Column
 
        // 0 = Default State
        // 1 = Rename
        // 2 = Delete
        // 3 = ?
        // 4 = Start of Linked List
 
[let_DefaultRow,...
 
    let RROW=ROWS.slice(1)
 
    // All row
 
    // Expect all row, except the first row.
    // Get only first row
    // I get the same result
 
        '01_Test',
        '02_Test',
        '03_Test',
        '04_Test',
        '05_Test',
 
            //ROWS.splice.apply(i,0,[...let_NewRow]);
 
            //ROWS.splice(i+1, 1,{
            //    Key: ROWS[i+1].Key,
            //    Next: let_NewKey,
            //    Array: ROWS[i+1].Array, 
            //    Display:0
            //});
 
            if(i!==ROWS.length-1){
            //
            }
 
    let let_NewKeys:number[]=[]
    for(let i=0;i<3;i++){
 
let_NewKeys.push(let_NewKey)
}
 
    let let_NewRow:TS_Row=
 
{
                Key: let_NewKeys[1],
                Next: THISROW.Next,
                Array: let_Array, 
                Display:0
    }
 
            /*
a1 = [1,2,3,4,5];
a2 = [21,22];

a1.splice.apply(a1, [2, 0].concat(a2));

console.log(a1); // [1, 2, 21, 22, 3, 4, 5];
In ES2015+, you could use the spread operator instead to make this a bit nicer

a1.splice(2, 0, ...a2);
            */
 
        // New Column Name
        NEWARRAY:string[]
 
0].
 
.apply
 
            let a1 = [1,2,3,4,5];
let a2 = [21,22];

a1.splice.apply(a1, [2, 0].concat(a2));
 
...
 
                // Insert Row
                ROWS.splice(i, 1,{
                Key: THISROW.Key,
                Next: THISROW.Next,
                Array: NEWARRAY, 
                Display:0
            });
 
                ROWS.splice(i, 1,{
                Key: THISROW.Key,
                Next: THISROW.Next,
                Array: NEWARRAY, 
                Display:0
            });
 


export default {}
 
const [SS_SelectRow,setSS_SelectRow]=useState<number>(0)
 
'1000px'
 
let let_HeaderWidth=0
 
    useEffect(()=>{
        let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
        let_HeaderWidth=let_C01Width
    },[])
 
calc(
 
1000px
 
wordWrap: 'break-word',
 
wordWrap: 'break-word'
 
wordWrap: 'break-word'
 
+20
 
let_HeaderHeight
 
<thead  style={{width:'100%'}}>
<tr>
    <th className='C01id_Left'>Index</th>
    <th><div style={{wordWrap: 'break-word',width:'100vh'}}>{Header}</div></th>
    <th className='C01id_RightRow'><div className='C01id_EditRowButton'>
        Edit</div></th>
</tr>
</thead>
 
C01id_InnerTable
 
</table>
 
<table id='C01id_Table' style={{width:'100%'}}>
 
</div>
 
<div id='C01id_DivTable'  >
 
</tbody>
 

<tbody id='C02id_Height' style={{
    height:`calc(100vh - ${55}px - ${105+20+let_HeaderHeight}px)`,
    }}>
 
</thead>
 
<thead  style={{width:'100%'}}>
 
</div>
 
<div id='C01id_InnerTable'>
 
<div id='C01id_DivTable'  >
<div id='C01id_InnerTable'>
 
</table>
 
<table id='C01id_Table' style={{width:'100%'}}>
 
</div>
 
<div id='C01id_DivTable'  >
 
<div id='C01id_InnerTable'>
 
</div>
 
    width:'100%'
 
id='C01id_TH'
 
style={{overflowY:'hidden'}}
 
overflowY:'auto'
 
overflow:'none'
 
id='C02id_Height'
 
id='C01id_TH'
 
{
// Button under each column.
// 1. rename column
// 2. delete column
// 3. sort data
// 4. change data type
}
 
 onClick={f_OpenDelete}
 
onClick={f_OpenRename}
 
style={{width:'100%'}}
 
            setlet_Width={setlet_Width}
 
SS_Text','222
 
wordWrap: 'break-word'
 
    const JSX_Row_TD=
 
<td><div style={{wordWrap: 'break-word',width:'240px'}}>{THISROW}</div></td>
 
    const JSX_ColumnsName=<th>{Header}</th>
 
//-------------------------+--------------+----------+
// CSS                     | File Name    | General  |
//-------------------------+--------------+----------+
import './index00.css'; // | index.jsx    | General  |
import './index01.css'; // | index.jsx    | Specific |
//-------------------------+--------------+----------+
 
    const ss_Columns=['Index',Header]
 
        )
    })
 
ss_Columns.map((Column)=>{
        return (
            
 
    if (THISROW.Display===0||typeof THISROW.Display==='undefined'){
 
        )
    })
 
let_ThisRow.map((Row,index)=>{
        return(
 
    let ss_UpdateRow=[...SS_UpdateRow]
 
        )
    })
 
ss_UpdateRow.map((Row)=>{
        return(
            
 
    let let_ThisRow=THISROW
 
[...
 
[...
 
// Type
import {U01_EditRow} from '../../T01_Row/U01_EditRow'
import {D01_Delete} from '../../T01_Row/D01_Delete'
import {U01_UpdateDisplay} from '../../T01_Row/U01_UpdateDisplay'
 
.Array
 
.Array
 
<R_Header
/>
 
.Name
 
...SS_Columns
 
    const ss_Columns=[...SS_Columns]
 
import string from '../../T01_Row/An_Index';
 
    // By ChatGPT
 
OCR_OutputFile
 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
 
    const Ref_C01 = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        const let_CurrentC01 = Ref_C01.current;
        if (let_CurrentC01) {
        // Close C02_Input when the width of C01_Table is less than 175
        const let_ObsResize = new ResizeObserver(() => {
            let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
            if(let_C01Width<175){
                setSS_C02(false)
            }
        });
        let_ObsResize.observe(let_CurrentC01);
        return () => {
            let_ObsResize.disconnect();
        };
    }
    }, []);
 
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
 
SS_C02,
setSS_C02,
 
SS_C02:boolean,
setSS_C02:(S:boolean)=>void,
 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
 
        "In mathematics, the logarithm is the inverse function to exponentiation. That means that the logarithm",
        "of a number x to the base b is the exponent to which b must be raised to produce x. For example,",
        "since 1000 = 103, the logarithm base 10 of 1000 is 3, or log_10(1000) = 3. The logarithm of x to",
        "",
 
            <C_Row
            INDEX={index}
            THISROW={Row}
            SS_Row={SS_Row}
            setSS_Row={setSS_Row}
            />
 
<C_ColumnButton
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
 
 * Transpose
 * 
 
,
 
const [SS_Text,setSS_Text]=useState<string[]>(['',''])
 
    // By ChatGPT
    
    const Ref_C01 = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        const let_CurrentC01 = Ref_C01.current;
        if (let_CurrentC01) {
        // Close C02_Input when the width of C01_Table is less than 175
        const let_ObsResize = new ResizeObserver(() => {
            let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
            if(let_C01Width<175){
                setSS_C02(false)
            }
        });
        let_ObsResize.observe(let_CurrentC01);
        return () => {
            let_ObsResize.disconnect();
        };
    }
    }, []);
 
SS_Row,
setSS_Row,
SS_Columns,
setSS_Columns,
 
SS_Row:TS_Row[],
setSS_Row:(S:TS_Row[])=>void,
SS_Columns:TS_Column[],
setSS_Columns:(S:TS_Column[])=>void,
 
useState , 
 
, useRef, useInsertionEffect
 
// Type
import TS_Row from '../T01_Row/An_Index';
 
import TS_Column from '../T02_Column/An_Index';
 
    <th className='C01id_Right'>Edit  </th>
 
SS_Text,
setSS_Text
 
SS_Text:string[]
setSS_Text:(S:string[])=>void
 
SS_Text,
setSS_Text
 
SS_Text:string[]
setSS_Text:(S:string[])=>void
 
SS_TextDimension:number
 
SS_TextDimension
 
<div id='C01id_H' //ref={Ref_C01}
>
<div id='C01id_DivTable'>
<div id='C01id_InnerTable'>
<table id='C01id_Table'>
<thead id='C01id_TH'>
<tr>
    <th className='C01id_Left'>Index </th>
    {JSX_ColumnsName}
    <th className='C01id_Right'>Edit  </th>
</tr>
{
// Button under each column.
// 1. rename column
// 2. delete column
// 3. sort data
// 4. change data type
}
<C_ColumnButton
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
</thead>
<tbody id='C02id_Height' style={{
    height:`calc(100vh - ${55}px - ${105+20+let_HeaderHeight}px)`,
    }}>
{
// Data
JSX_TH_Rows}
</tbody>
</table>
</div>

</div>

</div>
 
//****************************************************************************
// Function 00: Automately close C02 when the width is too narrow.
//****************************************************************************
const let_HeaderHeight=100
    // By ChatGPT
    
    const Ref_C01 = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        const let_CurrentC01 = Ref_C01.current;
        if (let_CurrentC01) {
        // Close C02_Input when the width of C01_Table is less than 175
        const let_ObsResize = new ResizeObserver(() => {
            let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
            if(let_C01Width<175){
                setSS_C02(false)
            }
        });
        let_ObsResize.observe(let_CurrentC01);
        return () => {
            let_ObsResize.disconnect();
        };
    }
    }, []);

//****************************************************************************
// JSX_00: Filter SS_Column.Name by IsVisible=true
//****************************************************************************
    const let_Rows:TS_Row[] = [...SS_Row]
    const JSX_TH_Rows:JSX.Element[] = let_Rows.map((Row,index) => {
        return (
            <>
            <C_Row
            INDEX={index}
            THISROW={Row}
            SS_Row={SS_Row}
            setSS_Row={setSS_Row}
            />
            </>)
    })
    const ss_Columns=[...SS_Columns]
    const JSX_ColumnsName=ss_Columns.map((Column)=>{
        return (
            <th>{Column.Name}</th>
        )
    })
 
    
    const [SS_Text,setSS_Text]=useState<string[]>(['',''])
 
<h5 style={{marginTop:'0px',marginBottom:'0px'}}>Display</h5>
 
Layout
 
}
 
        if(){}
 
}
 
3]}}>JSON</button>
 
<button onClick={()=>setSS_TextDimension(3)} style={{backgroundColor:let_Color[
 
{/*<select 
style={{
    position:'relative',
    fontSize:'15px',height:'25px'}} value={3} id='I01id_TextDimension' >
  <option value={0}>Row</option>
  <option value={1}>Text</option>
  <option value={2}>Table</option>
  <option value="Crop" style={{display:'none'}}>Crop</option>
</select>*/}
{
    //<h5 style={{marginTop:'0px',marginBottom:'0px'}}>Display</h5>
    }
 
<div style={{display:'flex'}}>
Convert First Row as 
</div>
 
<div style={{display:'flex'}}>
Convert First Row as 
</div>
 
<h5 style={{marginTop:'0px',marginBottom:'0px'}}>Display</h5>
<button>Row</button>
<button>Text</button>
<button>Table</button>
 
{/*<select 
style={{
    position:'relative',
    fontSize:'15px',height:'25px'}} value={3} id='I01id_TextDimension' >
  <option value={0}>Row</option>
  <option value={1}>Text</option>
  <option value={2}>Table</option>
  <option value="Crop" style={{display:'none'}}>Crop</option>
</select>*/}
 
    <h5>Outputfile:</h5>
 
<hr/>
<C_ExportFile
OCR_OutputFile={OCR_OutputFile}
setOCR_OutputFile={setOCR_OutputFile}
/>
 
 className='C06id_DisplayBlock'
 
</div>
 

    <div  style={{height:'80px'}}>
<tr>
    <td><h1 style={{marginTop:'5px',marginBottom:'0px',fontSize:'15px'}}>
        {OCR_OutputFile[0]+'.'+OCR_OutputFile[1]}
        </h1></td>
</tr>
<tr>
    <div style={{display:'inline-block'}}>
<div style={{display:'flex'}}>
<input
        type="text"
        id='C06id_UpdateFileName'
        style={{fontSize:'15px',marginLeft:'10px',width:'calc( 70% - 10px )',height:'20px',marginTop:'10px'}}
/>
      <select id="C06id_UpdateFileFormat" style={{marginTop:'10px', width: '30%' ,height:'25px'}}
      value={OCR_OutputFile[1]}
      onChange={f_UpdateFileFormat}
      >
          <option value='txt'>.txt</option>
          <option value='csv'>.csv</option>
          <option value='pdf'>.pdf</option>
          <option value='alto'>.alto</option>
          <option value='hocr'>.hocr</option>
      </select>
      </div>
      <div style={{display:'flex',marginTop:'5px'}}>
      <button style={{width:'80px',marginLeft:'10px'}} onClick={f_UpdateFileName}>Ok</button>
      <button style={{width:'80px',marginLeft:'10px'}}>Download</button>
</div>
</div>
</tr>
</div>


</>
 
<select 
style={{
    position:'relative',
    fontSize:'15px',height:'25px'}} value={3} id='I01id_TextDimension' >
  <option value={0}>Row</option>
  <option value={1}>Text</option>
  <option value={2}>Table</option>
  <option value="Crop" style={{display:'none'}}>Crop</option>
</select>
 

    function f_UpdateFileName(){
    let let_Input:string=(document.getElementById("C06id_UpdateFileName") as HTMLInputElement).value.toString();
    let ocr_OutputFile=[...OCR_OutputFile]
    ocr_OutputFile[0]=let_Input
    setOCR_OutputFile(ocr_OutputFile)
    }
    function f_UpdateFileFormat(){
    let let_Input:string=(document.getElementById("C06id_UpdateFileFormat") as HTMLInputElement).value.toString();
    let ocr_OutputFile=[...OCR_OutputFile]
    ocr_OutputFile[1]=let_Input
    setOCR_OutputFile(ocr_OutputFile)
    }
 
OCR_OutputFile,
setOCR_OutputFile
 
OCR_OutputFile:string[]
setOCR_OutputFile:(S:string[])=>void
 
marginTop:'30px'
 
import './language.css'
 
eList'
 
import {languageList} from './languag
 
    let let_C07Width:string='100%'
 
    margin-right:500px;
 
onChange={()=>alert("f_Update('Type')")}
 
"Rectangle"
 
  <option value="LineX">Horizontal Line</option>
  <option value="LineY">Vertical Line</option>
 
import './index01.css'
 
import './index00.css'
import './index01.css'
 
//****************************************************************************
// HOOK
//****************************************************************************
    const[SS_Open,setSS_Open]=useState<boolean>(false)
    const[SS_FileName,setSS_FileName]=useState<string>('filename')

//****************************************************************************
// VARIABLE: Data Cleaning
//****************************************************************************
    let let_RowData=SS_Row.map((Row)=>{
        return Row.Array
    })

    let let_ColumnData=SS_Columns.map((Column)=>{
        return Column.Name
    })

    let let_Data=[let_ColumnData,...let_RowData]

//****************************************************************************
// FUNCTION_00: Open / Close C02_Input
//****************************************************************************
    function f_Open(){
        setSS_C02(true)
        //if(SS_IsNarrow===false){
        //    setSS_C02(true)
        //}
    }
    function f_Close(){
        setSS_C02(false)
    }

//****************************************************************************
// FUNCTION_01: Edit File Name
//****************************************************************************
    function f_FileName(){
        let let_Word=(document.getElementById('C03id_FileName') as HTMLInputElement).value.toString()
        setSS_FileName(let_Word)
    }

//****************************************************************************
// FUNCTION_02: Open C04_Canvas
//****************************************************************************
    function f_OpenC04(){
        setSS_OpenPanel(2)
    }

//****************************************************************************
// FUNCTION_03: Close C01_Table
//****************************************************************************
    function f_CloseC01(){
        // 1 = have only C04
        setSS_OpenPanel(1)
    }

//****************************************************************************
// JSX_00: Open C02
//****************************************************************************
    let JSX_Button=<></>
    if(SS_C02===false){
        JSX_Button=<td><button className='C03id_Header' onClick={f_Open}>Open Input Tab</button></td>
    }
    else{
        JSX_Button=<td><button className='C03id_Header' onClick={f_Close}>Close Input Tab</button></td>
    }

//****************************************************************************
// JSX_01: Open Export Data
//****************************************************************************
    let JSX_Export=<></>
    if(SS_Open===true){
        JSX_Export=<td>
            <input id='C03id_FileName' style={{height:'23px',fontSize:'14px'}} onChange={f_FileName}></input>
            <button className='C03id_Header'>
            <CSVLink data={let_Data} style={{color:'black'}} filename={SS_FileName}>
                Download CSV
            </CSVLink>
            </button>
            <button className='C03id_Header' onClick={()=>setSS_Open(false)}>Cancel</button>
        </td>
    }
    else{
        JSX_Export=<td><button className='C03id_Header' onClick={()=>setSS_Open(true)}>Export Data</button></td>
    }

//****************************************************************************
// JSX_02: Open C04_Canvas or Close C01_Table
//****************************************************************************
    let JSX_OpenC04=<td><button className='C03id_Header' onClick={f_OpenC04}>+</button></td>
    if(SS_OpenPanel===2){
        JSX_OpenC04=<td><button className='C03id_Header' onClick={f_CloseC01}>X</button></td>
    }
    else if(SS_OpenPanel===0){
        JSX_OpenC04=<td><button className='C03id_Header' onClick={f_OpenC04}>+</button></td>
    }
 
    // TYPE
    // HOOK: setState() 
    SS_Row:TS_Row[],
    SS_Columns:TS_Column[],
    SS_C02:boolean,
    setSS_C02:(S:boolean)=>void,
    SS_OpenPanel:0|1|2,
    setSS_OpenPanel:(S:0|1|2)=>void,
 
    // PARAMETER
    // HOOK: setState()
    SS_Row,
    SS_Columns,
    SS_C02,
    setSS_C02,
    SS_OpenPanel,
    setSS_OpenPanel,
 
<div id='C03id_DivHeader'>
{JSX_OpenC04}
{JSX_Button}
{JSX_Export}
</div>
 
<select onChange={()=>alert("f_Update('Type')")}
style={{fontSize:'15px',height:'25px'}} value={3} id='I01id_TextDimension' >
  <option value="Rectangle">Rectangle</option>
  <option value="Frame">Frame</option>
  <option value="Line">Line</option>
  <option value="LineX">Horizontal Line</option>
  <option value="LineY">Vertical Line</option>
  <option value="Crop" style={{display:'none'}}>Crop</option>
</select>
 
    //Expected corresponding JSX closing tag for 'div'
 
<div
style={{height:`${let_HeaderHeight}px`,width:'100%',backgroundColor:'red'}}
>
 
    </div>
 
<select onChange={()=>alert("f_Update('Type')")}
style={{fontSize:'15px',height:'25px'}} value={3} id='I01id_TextDimension'}>
  <option value="Rectangle">Rectangle</option>
  <option value="Frame">Frame</option>
  <option value="Line">Line</option>
  <option value="LineX">Horizontal Line</option>
  <option value="LineY">Vertical Line</option>
  <option value="Crop" style={{display:'none'}}>Crop</option>
</select>
 
    </div>
 
    </div>
 
    </div>
 
box.Type[0]
 
{'C05id_AddBox'+'Type'+box.Key.toString()
 
        In the Eye!!!
 
(SS_C02==true && 
 
<div>
<button>Close Input Tap</button>
</div>
 
<div>
<button>Close Input Tap</button>
</div>
 
    //useEffect(() => {
    //    alert(SS_IsNarrow)
    //},[SS_IsNarrow])
 
        
 
 - --let_HeaderHeight +120px
 
--let_HeaderHeight*0
 
 style={{height:'100%'}}
 
    marginBottom:`-${let_HeaderHeight}px`
 
    <div
    style={{height:'100px',width:'100%',backgroundColor:'red'}}
    >
        In the Eye!!!
        
    </div>
 
    height:'calc(100vh - 40px- 50px-255px)'
 
    height:100%;
 
        <td><button className='I02id_Header'>Image Editor  </button></td>
        <td><button className='I02id_Header'>Tesseract OCR </button></td>
 
p
 
</div>
 
style={{marginLeft:'10px'}}
 
    // Cannot read properties of null (reading 'value')
 
    alert(OCR_OutputFile)
 
        placeholder="File Name"
 
<input
        type="text"
        placeholder="File Name"
        style={{fontSize:'15px',marginLeft:'10px',width:'calc( 70% - 10px )',height:'20px',marginTop:'10px'}}
/>
 
.split(',')
 
 './C06_CommandLine/index';
 
import C06_CommandLine from
 
className='C06id_languageHeader'
 
<button>Download</button>
 
</div>
 
>alert('f_Create')}>Ok</button>
 
      <button style={{height:'20px',marginTop:'10px'}} onClick={()=
 
      </div>
 
      <div style={{display:'flex'}}>
 
    <div className='C06id_languageHeader'>
 
</div>
 
<div className='C06id_LanguageDIV'>
 
</div>
 
        <>
 

</>
 
div className='C06id_LanguageDIV'
 
</tr>
</div>

</div>
 
div
 
<button>Download</button>
 
<div className='C06id_LanguageList'>
</div>
 
    OCR_Languages,
    setOCR_Languages
 
    OCR_Languages:string[][]
    setOCR_Languages:(S:string[][])=>void
 

//****************************************************************************
// JSX 00: Selected Languages
//****************************************************************************
    let JSX_SelectedLanguages=OCR_Languages.map((language,index)=>{
        function f_Delete(){
    let ocr_Language=[...OCR_Languages]
    let let_UpdateOCRLanguage=ocr_Language.filter((_, i) => i !== index);
    setOCR_Languages(let_UpdateOCRLanguage)

        }
        return(<><div style={{width:'175px'}}>
    <tr style={{width:'100%'}}>
    <td></td>
    <td><button onClick={f_Delete}>X</button></td>
    <td>{language[1]} ({language[0]})</td>
    </tr>
        </div>
        <hr style={{marginTop:'3px'}} />
        </>)
    })
 
    const [searchTerm, setSearchTerm] = useState<string>('');


  function f_Create(){
    let let_Input:string[]=(document.getElementById("C06id_AddLanguage") as HTMLInputElement).value.toString().split(',');
    let ocr_Language=[...OCR_Languages]
    let let_UpdateOCRLanguage=[let_Input,...ocr_Language]
    setOCR_Languages(let_UpdateOCRLanguage)
  }
 
  const filteredLanguages = languageList.filter(([code, name]) =>
    name.toLowerCase().includes(searchTerm.toLowerCase())
  );
 
    const [searchTerm, setSearchTerm] = useState<string>('');
  const filteredLanguages = languageList.filter(([code, name]) =>
    name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  function f_Create(){
    let let_Input:string[]=(document.getElementById("C06id_AddLanguage") as HTMLInputElement).value.toString().split(',');
    let ocr_Language=[...OCR_Languages]
    let let_UpdateOCRLanguage=[let_Input,...ocr_Language]
    setOCR_Languages(let_UpdateOCRLanguage)
  }

//****************************************************************************
// JSX 00: Selected Languages
//****************************************************************************
    let JSX_SelectedLanguages=OCR_Languages.map((language,index)=>{
        function f_Delete(){
    let ocr_Language=[...OCR_Languages]
    let let_UpdateOCRLanguage=ocr_Language.filter((_, i) => i !== index);
    setOCR_Languages(let_UpdateOCRLanguage)

        }
        return(<><div style={{width:'175px'}}>
    <tr style={{width:'100%'}}>
    <td></td>
    <td><button onClick={f_Delete}>X</button></td>
    <td>{language[1]} ({language[0]})</td>
    </tr>
        </div>
        <hr style={{marginTop:'3px'}} />
        </>)
    })
 
{JSX_SelectedLanguages}
 
      
 
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
 
          
 
[code,name]
 
key={index} 
 
            
 
    let let_UpdateOCRLanguage=ocr_Language.splice(index,1)
 
()=>alert('f_ResetAff(0,1) ')} onClick={
 
s HTMLInputElement).value.toString().split(',');
 
    let let_Input:string[]=(document.getElementById("C06id_AddLanguage") a
 
function f_Delete(){}
 
.toString()
 
id:number
 
          id={'C06id_Language'+index.toString()}
 
id:number
 
  function f_Create(id:number){
    let let_Input:string=(document.getElementById('C05id_CreatingNewBox') as HTMLInputElement).value.toString();

  }

  function f_Delete(){}
 
board
 
00px;
 
    margin-left:10px
 
,marginLeft:'auto'
 
</h1>
 
<hr />
 
<hr />
 
    <hr/>
 
</div>
 
        [
 
</div>
 
</h5>
 
    border-left: 0cap;
 
    height:400px;
 
index
 
Thai (tha)
 
</div>
 
        <div className='C06id_LanguageList'>
 
<div className='C06id_LanguageList'>
    <tr style={{width:'100%'}}>
    <td></td>
    <td><button onClick={()=>alert('f_ResetAff(0,1) ')}>X</button></td>
    <td>Thai (tha)</td>
    </tr>
    <hr/>
        <tr style={{width:'100%'}}>
    <td></td>
    <td><button onClick={()=>alert('f_ResetAff(0,1) ')}>X</button></td>
    <td>Thai (tha)</td>
    </tr>
    <hr/>
 
style={{marginTop:'0px',marginBottom:'-2px'}} 
 
.C06id_LanguageList hr{
    margin-top: 0px;
    margin-bottom: -2px;
    color: black;
    border-width: 1px;
}
 
    color: black;
    border-width: 1px;
 
style={{marginTop:'0px',marginBottom:'-2px'}} 
 
    background-color:aquamarine;
 
</div>
 
<div className='C06id_LanguageList'>
    <tr style={{width:'100%'}}>
    <td></td>
    <td><button onClick={()=>alert('f_ResetAff(0,1) ')}>X</button></td>
    <td>Thai (tha)</td>
    </tr>
    <hr/>
 
/****************************************************************************
// FUNCTION 00: UPDATE INPUT
//****************************************************************************

    function f_UpdateAff(id:number,defaultt:0|1){
        let let_Input:string=(
            document.getElementById(
                'C04id_Aff'+id.toString()) as HTMLInputElement)
            .value.toString();
        let ss_Aff=[...SS_Aff]
        let Aff=[...Aff]
        if(isNaN(parseFloat(let_Input))===false){
            ss_Aff[id]=parseFloat(let_Input)
            Aff[id]=let_Input
        }
        else{
            ss_Aff[id]=defaultt
            Aff[id]=defaultt.toString()
        }
        setSS_Aff(ss_Aff)
        setSS_AffSTR(Aff)
    }

    function f_ResetAff(id:number,defaultt:0|1){
        let ss_Aff=[...SS_Aff]
        let Aff=[...Aff]
        ss_Aff[id]=defaultt
        Aff[id]=defaultt.toString()
        setSS_Aff(ss_Aff)
        setSS_AffSTR(Aff)
    }

//****************************************************************************
// FUNCTION 01: UPDATE INPUT SCALE
//****************************************************************************

    function f_UpdateScale(){
        let let_Input:string=(document.getElementById('C04id_AffScale') as HTMLInputElement).value.toString();
        let ss_Aff=[...SS_Aff]
        let Aff=[...Aff]
        if(isNaN(parseFloat(let_Input))===false){
            ss_Aff[0]=parseFloat(let_Input)
            ss_Aff[1]=parseFloat(let_Input)
            Aff[0]=let_Input
            Aff[1]=let_Input
        }
        else{
            ss_Aff[0]=1
            ss_Aff[1]=1
            Aff[0]='1'
            Aff[1]='1'
        }
        setSS_Aff(ss_Aff)
        setSS_AffSTR(Aff)
    }

    function f_ResetScale(){
        let ss_Aff=[...SS_Aff]
        let Aff=[...Aff]
        ss_Aff[0]=1
        ss_Aff[1]=1
        Aff[0]='1'
        Aff[1]='1'
        setSS_Aff(ss_Aff)
        setSS_AffSTR(Aff)
    }

//****************************************************************************
// FUNCTION 02: SHOW ORIGIN
//****************************************************************************

    function f_UpdateOrigin(){
        let let_Input:string=(document.getElementById('C04id_AffShoww') as HTMLInputElement).value.toString();
        let let_InputColor:string=(document.getElementById('C04id_AffShowColorr') as HTMLInputElement).value.toString();
        setSS_AffOrigin([let_Input,let_InputColor])
    }
 
        <div className='C04id_Scalar' style={{display:'inline-block',marginLeft:'10px',margin:'auto'}}>
<h1>OCR Options</h1>
{
//****************************************************************************
// Scale = SS_Aff[0] = SS_Aff[1]
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
 
{
//****************************************************************************
// Scale Y = SS_Aff[1]
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
<tr>
    <td style={{width:let_WidthTr}} >Scale Y</td>
    <td>Aff[1]</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}} id='C04id_Aff1'></input></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateAff(1,1)')}>Ok</button></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetAff(1,1) ')}>Reset</button></td>
</tr>
{
//****************************************************************************
// Rotation = SS_Aff[4]
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
<tr>
    <td style={{width:let_WidthTr}} >Rotation</td>
    <td>Aff[4]</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}} id='C04id_Aff4'></input></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateAff(4,0)')}>Ok</button></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetAff(4,0) ')}>Reset</button></td>
</tr>
{
//****************************************************************************
// Show Origin
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
<tr>
    <td style={{width:let_WidthTr}} >Show Origin</td>
    <td><input type='color' id='C04id_AffShowColorr'></input></td>
</tr>
<tr>
<select id="C04id_AffShoww">
  <option value="NoOrigin">No Origin</option>
  <option value="CenterOrigin">Center Origin</option>
  <option value="TopLeftOrigin">Top Left Origin</option>
</select>
<td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateOrigin')}>Ok</button></td>
</tr>
{
//****************************************************************************
// Pos X = SS_Aff[2]
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
<tr>
    <td style={{width:let_WidthTr}} >Pos X</td>
    <td>Aff[2]</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}} id='C04id_Aff2'></input></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateAff(2,0)')}>Ok</button></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetAff(2,0) ')}>Reset</button></td>
</tr>
{
//****************************************************************************
// Pos Y = SS_Aff[3]
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
<tr>
    <td style={{width:let_WidthTr}} >Pos Y</td>
    <td>Aff[3]</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}} id='C04id_Aff3'></input></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateAff(3,0)')}>Ok</button></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetAff(3,0) ')}>Reset</button></td>
</tr>
<hr style={{marginTop:'5px',marginBottom:'3px'}} />

    </div>
    </>
 
    const [searchTerm, setSearchTerm] = useState('');
  const filteredLanguages = languageList.filter(([code, name]) =>
    name.toLowerCase().includes(searchTerm.toLowerCase())
  );

 
import {languageList} from './Coms/languageList'
 
import './language.css'
 
<div className='C06id_LanguageDIV'>
 
<tr>
<div style={{display:'block'}}>
<input
        type="text"
        placeholder="Search for a language"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        style={{fontSize:'15px',width:'150px'}}
      />
      <div style={{display:'flex'}}>
      <select id="C06id_AddLanguage" style={{ width: '120px' }}>
        {filteredLanguages.map(([code, name], index) => (
          <option key={index} value={code}>
            {code} ({name})
          </option>
        ))}
      </select>
      <button style={{height:'20px',marginTop:'10px'}}>add</button>
      </div>
</div>
</tr>
<hr style={{marginTop:'-5px',marginBottom:'-2px'}} />
<div className='C06id_LanguageList'>
    <tr style={{width:'100%'}}>
    <td></td>
    <td><button onClick={()=>alert('f_ResetAff(0,1) ')}>X</button></td>
    <td>Thai (tha)</td>
    </tr>
    <hr/>
</div>
</div>
 
<tr>
<div style={{display:'block'}}>
<input
        type="text"
        placeholder="Search for a language"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        style={{fontSize:'15px',width:'150px'}}
      />
      <div style={{display:'flex'}}>
      <select id="C06id_AddLanguage" style={{ width: '120px' }}>
        {filteredLanguages.map(([code, name], index) => (
          <option key={index} value={code}>
            {code} ({name})
          </option>
        ))}
      </select>
      <button style={{height:'20px',marginTop:'10px'}}>add</button>
      </div>
</div>
</tr>
<hr style={{marginTop:'-5px',marginBottom:'-2px'}} />
<div className='C06id_LanguageList'>
    <tr style={{width:'100%'}}>
    <td></td>
    <td><button onClick={()=>alert('f_ResetAff(0,1) ')}>X</button></td>
    <td>Thai (tha)</td>
    </tr>
    <hr/>
</div>
</div>
 
<tr>
    <td>Languages</td>
</tr>
 
/****************************************************************************
// FUNCTION 00: UPDATE INPUT
//****************************************************************************

    function f_UpdateAff(id:number,defaultt:0|1){
        let let_Input:string=(
            document.getElementById(
                'C04id_Aff'+id.toString()) as HTMLInputElement)
            .value.toString();
        let ss_Aff=[...SS_Aff]
        let Aff=[...Aff]
        if(isNaN(parseFloat(let_Input))===false){
            ss_Aff[id]=parseFloat(let_Input)
            Aff[id]=let_Input
        }
        else{
            ss_Aff[id]=defaultt
            Aff[id]=defaultt.toString()
        }
        setSS_Aff(ss_Aff)
        setSS_AffSTR(Aff)
    }

    function f_ResetAff(id:number,defaultt:0|1){
        let ss_Aff=[...SS_Aff]
        let Aff=[...Aff]
        ss_Aff[id]=defaultt
        Aff[id]=defaultt.toString()
        setSS_Aff(ss_Aff)
        setSS_AffSTR(Aff)
    }

//****************************************************************************
// FUNCTION 01: UPDATE INPUT SCALE
//****************************************************************************

    function f_UpdateScale(){
        let let_Input:string=(document.getElementById('C04id_AffScale') as HTMLInputElement).value.toString();
        let ss_Aff=[...SS_Aff]
        let Aff=[...Aff]
        if(isNaN(parseFloat(let_Input))===false){
            ss_Aff[0]=parseFloat(let_Input)
            ss_Aff[1]=parseFloat(let_Input)
            Aff[0]=let_Input
            Aff[1]=let_Input
        }
        else{
            ss_Aff[0]=1
            ss_Aff[1]=1
            Aff[0]='1'
            Aff[1]='1'
        }
        setSS_Aff(ss_Aff)
        setSS_AffSTR(Aff)
    }

    function f_ResetScale(){
        let ss_Aff=[...SS_Aff]
        let Aff=[...Aff]
        ss_Aff[0]=1
        ss_Aff[1]=1
        Aff[0]='1'
        Aff[1]='1'
        setSS_Aff(ss_Aff)
        setSS_AffSTR(Aff)
    }

//****************************************************************************
// FUNCTION 02: SHOW ORIGIN
//****************************************************************************

    function f_UpdateOrigin(){
        let let_Input:string=(document.getElementById('C04id_AffShoww') as HTMLInputElement).value.toString();
        let let_InputColor:string=(document.getElementById('C04id_AffShowColorr') as HTMLInputElement).value.toString();
        setSS_AffOrigin([let_Input,let_InputColor])
    }
 
 style={{ textAlign: 'right' }}
 
style={{width:'100%'}}
 
style={{width:'10px'}}
 
style={{width:'10px'}}
 
    <tr>
        <td style={{width:'10px'}}></td>
    <td>Thai (tha)</td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetAff(0,1) ')}>X</button></td>
    </tr>
    <hr/>
 
<td><button onClick={()=>alert('f_ResetAff(0,1) ')}>X</button></td>
 
style={{marginTop:'3px'}} 
 
className='C06id_CloseLanguageButton'
 
    // marginLeft:'auto' does not working.
    marginLeft:'auto'
 
className='C06id_CloseLanguageButton'
 
</div>
 
<td><button>add</button></td>
 
</div>
 
display:'block'
 
      <select id="C06id_AddLanguage" style={{ width: '125px' }}>
        {filteredLanguages.map(([code, name], index) => (
          <option key={index} value={code}>
            {code} ({name})
          </option>
        ))}
      </select>
 
  <option value="tha">Thai (tha)</option>
  <option value="eng">English (eng)</option>
 
[string, string]
 
{languageList.map(()=>{
        return (<></>)
    })}
 
// write full language name as the second element of each list
 

[['sin','?'],
['slk','?'],
['slv','?'],
['snd','?'],
['snum','?'],
['spa','?'],
['spa_old','?'],
['sqi','?'],
['srp','?'],
['srp_latn','?'],
['sun','?'],
['swa','?'],
['swe','?'],
['syr','?'],
['tam','?'],
['tat','?'],
['tel','?'],
['tgk','?'],
['tha','?'],
['tir','?'],
['ton','?'],
['tur','?'],
['uig','?'],
['ukr','?'],
['urd','?'],
['uzb','?'],
['uzb_cyrl','?'],
['vie','?'],
['yid','?'],
['yor','?']
 

.C06id_LanguageList{
    margin-left: 10px;
}

 
    margin-left: 10px;
 
    width:calc(100% + 10px)
 
margin-top:-10px;
 
margin-left:10px;
 
    margin-top:-5px
 
<h1>
 
</h1>
 
</h1>
 
<h1>
 
    <hr/>
 
    background-color: skyblue;
 
y
 
</div>
 
</div>
 
</div>
<tr>
 
<td>
<button>add</button>
</td>
 
Language
 
  <option value="csv">tha</option>
 
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateAff(0,1)')}>Ok</button></td>
 

{/*
 
*/}
 
<tr>
    <td style={{width:let_WidthTr}} colSpan={2}>File Name</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}} id='C04id_AffScale'></input></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateScale')}>Ok</button></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetScale')}>Reset</button></td>
</tr>
{
//****************************************************************************
// Scale X = SS_Aff[0]
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
<tr>
    <td style={{width:let_WidthTr}} colSpan={2} >File Format</td>
</tr>
 
<tr>
    <td style={{width:let_WidthTr}} colSpan={2}>File Name</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}} id='C04id_AffScale'></input></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateScale')}>Ok</button></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetScale')}>Reset</button></td>
</tr>
{
//****************************************************************************
// Scale X = SS_Aff[0]
//****************************************************************************
}
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
<tr>
    <td style={{width:let_WidthTr}} colSpan={2} >File Format</td>
</tr>
{/*
<tr>
    <td>
<select 
id='C06id_FileFormat'
>
  <option value="png">.png</option>
  <option value="txt">.txt</option>
  <option value="csv">.csv</option>
</select>
    </td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateAff(0,1)')}>Ok</button></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetAff(0,1) ')}>Reset</button></td>
</tr>
*/}
 
  <option value="">.csv</option>
 
style={{fontSize:'15px',marginLeft:'10px',marginTop:'-20px',marginBottom:'20px',width:let_WidthTr}}
 
id='C05id_CreatingNewBox'
 
  <option value="LineX">Horizontal Line</option>
  <option value="LineY">Vertical Line</option>
 
id='C05id_CreatingNewBox'
 
  <option value="Frame">Frame</option>
  <option value="Line">Line</option>
  <option value="LineX">Horizontal Line</option>
  <option value="LineY">Vertical Line</option>
 
input  style={{marginTop:'3px'}} id='C04id_Aff0'></input>
 
    <td>Aff[0]</td>
 
}
 
    const [SS_AffSTR,setSS_AffSTR]=useState<string[]>([
        SS_Aff[0].toString(),   // Scale X
        SS_Aff[1].toString(),   // Scale Y
        SS_Aff[2].toString(),   // Position X
        SS_Aff[3].toString(),   // Position Y
        SS_Aff[4].toString(),   // Rotation
    ])
 
SS_Aff,
setSS_Aff,
SS_AffOrigin,
setSS_AffOrigin,
setSS_UseEffect,
SS_IsActivate,
setSS_IsActivate,
 
    SS_Aff:number[]
    setSS_Aff:(S:number[])=>void
    SS_AffOrigin:string[]
    setSS_AffOrigin:(S:string[])=>void
setSS_UseEffect:(S:boolean)=>void
SS_IsActivate:boolean[]
setSS_IsActivate:(S:boolean[])=>void,
 
/*{
OCR_Languages,
OCR_Mode,
OCR_FileName,
OCR_IsFirstRowAsColumn,
OCR_DPI,
//OCR_Boxes,
//OCR_Rex
setOCR_Languages,
setOCR_Mode,
setOCR_FileName,
setOCR_IsFirstRowAsColumn,
setOCR_DPI,
//setOCR_Boxes,
//setOCR_Rex
}:
{
OCR_Languages:          string[]
OCR_Mode:               number
OCR_FileName:           string[]
OCR_IsFirstRowAsColumn: boolean
OCR_DPI:                number
setOCR_Languages:          (S:string[])=>void
setOCR_Mode:               (S:number)=>void
setOCR_FileName:           (S:string[])=>void
setOCR_IsFirstRowAsColumn: (S:boolean)=>void
setOCR_DPI:                (S:number)=>void
}*/
 
<></>
 
    <hr/>
 
    <button className='C04id_Button'>Run Tesseract OCR</button>
 
    {//****************************************************************************
    // Edit Image
    //****************************************************************************
    }
 
    {//****************************************************************************
    // RGB or Gray
    //****************************************************************************
    }
 
<div style={{display:'flex',height:'100px'}}>
      
      <U_Zoom
      SS_Zoom={SS_Zoom}
      setSS_Zoom={setSS_Zoom}/>
    {//****************************************************************************
    // RGB or Gray
    //****************************************************************************
    }
    <U_IsRGB
    SS_IsRGB={SS_IsRGB}
    setSS_UseEffect={setSS_UseEffect}
    setSS_IsRGB={setSS_IsRGB}/>

    </div>

    {//****************************************************************************
    // Edit Image
    //****************************************************************************
    }
    <hr/>
    <U_UpdateImage
    setSS_IsShow={setSS_IsShow}
    setSS_UseEffect={setSS_UseEffect}
    setSS_IsRGB={setSS_IsRGB}
    SS_IsRGB={SS_IsRGB}
    SS_IsShow={SS_IsShow}
    />
    <hr/>
    <U_Aff
    SS_Aff={SS_Aff}
    setSS_Aff={setSS_Aff}
    SS_AffOrigin={SS_AffOrigin}
    setSS_AffOrigin={setSS_AffOrigin}
    SS_IsActivate={SS_IsActivate}
    setSS_IsActivate={setSS_IsActivate}
    setSS_UseEffect={setSS_UseEffect}
    />
    <hr/>
 
<div style={{display:'flex',height:'100px'}}>
      
      <U_Zoom
      SS_Zoom={SS_Zoom}
      setSS_Zoom={setSS_Zoom}/>
    {//****************************************************************************
    // RGB or Gray
    //****************************************************************************
    }
    <U_IsRGB
    SS_IsRGB={SS_IsRGB}
    setSS_UseEffect={setSS_UseEffect}
    setSS_IsRGB={setSS_IsRGB}/>

    </div>

    {//****************************************************************************
    // Edit Image
    //****************************************************************************
    }
    <hr/>
    <U_UpdateImage
    setSS_IsShow={setSS_IsShow}
    setSS_UseEffect={setSS_UseEffect}
    setSS_IsRGB={setSS_IsRGB}
    SS_IsRGB={SS_IsRGB}
    SS_IsShow={SS_IsShow}
    />
    <hr/>
    <U_Aff
    SS_Aff={SS_Aff}
    setSS_Aff={setSS_Aff}
    SS_AffOrigin={SS_AffOrigin}
    setSS_AffOrigin={setSS_AffOrigin}
    SS_IsActivate={SS_IsActivate}
    setSS_IsActivate={setSS_IsActivate}
    setSS_UseEffect={setSS_UseEffect}
    />
    <hr/>
  </div>
  {//****************************************************************************
    // Convolution or Threshold
    //****************************************************************************
  }
  {JSX_ImageProcessingDIV}
 
>
 
OCR_FileFormat:         string
 
OCR_FileFormat,
 
setOCR_FileFormat,
 
setOCR_FileFormat:         (S:string)=>void
 
  let let_Color=['white','white']
//****************************************************************************
// FUNCTION_00: Zoom setting
//****************************************************************************
    if(SS_OpenOCR==='Image'){
      let_Color[1]='white'
      let_Color[0]='lightgreen'
    }
    else{
      let_Color[0]='lightgreen'
      let_Color[1]='white'
    }
 
let_Color[0]
 
      setSS_UseEffect(true)
 
      setSS_UseEffect(true)
 
:(S:boolean)=>void
 
    SS_OpenOCR
 
  else{
    JSX_ImageProcessingDIV=<></>
  }
 
{/*    <U1_EditImage/>

    //****************************************************************************
    // Edit Image Setting
    //****************************************************************************
  }
  <U1_ShapeTextSetting
  SS_IsShapeSetting={SS_IsShapeSetting}
  setSS_IsShapeSetting={setSS_IsShapeSetting}
/>*/}
  
  {/*
  <hr style={{marginTop:'20px'}}/>
  <U1_2DMatrix
  SS_3DMatrix ={SS_3DMatrix   }  
setSS_3DMatrix={setSS_3DMatrix}
SS_3DTable    ={SS_3DTable    }
setSS_3DTable ={setSS_3DTable }/>*/}
 
OCR(
 
    let let_State='Color'
 
      let_State='Gray'
 
      let_State='Color'
 
    function f_Gray(){
      setSS_UseEffect(true)
      setSS_IsRGB(false)
    }

    function f_RGB(){
      setSS_UseEffect(true)
      setSS_IsRGB(true)
    }
 
SS_OpenOCR
 
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Mode:</h1>
 
inline-bloc
 
<hr/>
 
{//****************************************************************************
    // Tesseract OCR or Image Editor
    //****************************************************************************
    }
    <M_OCRorImage
    SS_IsRGB={SS_IsRGB}
    setSS_UseEffect={setSS_UseEffect}
    setSS_IsRGB={setSS_IsRGB}/>
    <div style={{display:'flex',height:'100px'}}>
    <hr/>
 
 - 10px
 
- 40px
 
 - 40px - 2px
 
    marginTop:'20px',
 
marginTop:'auto'
 
height:'calc(100vh - 40px - 100px - 40px - 2px)'
 
,marginTop:'0px'
 
Choose Image
 
          <label className="custom-file-input">
 
        </label>
 
.custom-file-input {
    position: relative;
    overflow: hidden;
    display: inline-block;
}
 
</label>
 
    </div>
    </div>
 
,overflowX:'scroll'
 
 - 40px
 
0
 
</div>
 
</div>
 
  <div
  style={{display:'flex',height:'30px',backgroundColor:}}
  >

  </div>
 
</div>
 
</div>
 
 - 40px
 
+20
 
+20
 
<C06_CommandLine/>
 
 </div>
 
  style={{
    width:'200px',
    display:'block',
    fontSize:'16px'
  }}
 
{/*
<div style={{marginTop:'-100px'}} >
<h1>Operate Tesseract</h1>
<button>Ok</button>
</div>


<div>
<button>Help</button>
<button>About us</button>
</div>*/}
 

//****************************************************************************
// HOOK
//****************************************************************************
  const [SS_IsCrop,setSS_IsCrop]=useState<boolean>(false)
  const [SS_HelloPy,setSS_HelloPy]=useState<number>(55)
/*
useEffect(() => {        
    try {
    fetch("/"+SS_HelloPy.toString())
        .then((res) => res.json())
        .then((data) => {
            //alert(JSON.stringify(data));
            setSS_HelloPy(data.py);
        });
    } catch (error) {
    console.error("Error fetching data:", error);
    }
  },[])*/

//****************************************************************************
// JSX 00
//****************************************************************************
  let JSX_Crop=<></>
  if(SS_IsCrop){
    JSX_Crop=<>
    <button onClick={f_CloseCrop} style={{marginLeft:'2px'}}>Yes</button>
    <button onClick={f_CloseCrop} style={{marginLeft:'2px'}}>No</button>
    <h1 style={{width:'250px'}}>Do you want to crop the image?</h1>
    </>
  }
  else{
    JSX_Crop=<>
    <button style={{marginLeft:'2px'}} onClick={f_OpenCrop}>Crop</button>
    <button style={{marginLeft:'2px'}}>Reset</button>
    </>
  }
  
//****************************************************************************
// FUNCTION 00: Open Crop
//****************************************************************************
  function f_OpenCrop(){
    setSS_IsCrop(true)
  }

  function f_CloseCrop(){
    setSS_IsCrop(false)
  }

//****************************************************************************
// FUNCTION 01: Compute
//****************************************************************************
  function f_ComputeSquare(){
    let let_input = (document.getElementById('C04id_CropImageX1') as HTMLInputElement).value.toString();
    //alert(let_input)
    if(isNaN(parseFloat(let_input))){
      alert('This is not a number!')
    }
    else{
      // https://rapidapi.com/guides/fetch-api-react
      fetch("/def_Ysquare/"+let_input.toString())
        .then((res) => res.json())
        .then((data) => {
            //alert(JSON.stringify(data));
            setSS_HelloPy(data.py);
        });
    }
    }

  function f_ComputeCube(){
    let let_input = (document.getElementById('C04id_CropImageX1') as HTMLInputElement).value.toString();
    //alert(let_input)
    if(isNaN(parseFloat(let_input))){
      alert('This is not a number!')
    }
    else{
      // https://rapidapi.com/guides/fetch-api-react
      fetch("/def_Ycube/"+let_input.toString())
        .then((res) => res.json())
        .then((data) => {
            //alert(JSON.stringify(data));
            setSS_HelloPy(data.py);
        });
    }
    }
 
<button>Add Language</button>
 
display:'block',
 
</div>
 
inline-
 
0%
 
<select id="cars" name="cars" className='C06id_EditOkSet'>
  <option value="volvo">Thai</option>
  <option value="volvo">English</option>
</select>
<button>X</button>
 
 - ${55}px
 
 - ${55}px
 
 - ${55}px
 
 - ${55}px
 
<C06_CommandLine/>
 
 Format and Name 
 
tesseract -l tha --dpi 2400 test_thai_OCR3.png test_thai_OCR3
 
นอกจากนี้
 
            print(type(i[-1]))
 
 in "/usr/local/share/tessdata/" 
 
/Users/imac/Desktop/SoloOpenSourceProject/JOCR
 
//Users/imac/Desktop/SoloOpenSourceProject/JOCR
 
/jocreactypescript/node_modules
 
/Users/imac/Desktop/SoloOpenSourceProject/JOCR
 
/Users/imac/Desktop/SoloOpenSourceProject/JOCR
 
          //alert(SS_AffineRGB)
          //alert(SS_Affine)
 
,marginTop:'-300px'
 
,marginTop:'-100px'
 
                    try:
 
                    except:
                        let_Img=let_Img
 
-1,
 
let_Img = cv2.cvtColor(let_Img, cv2.COLOR_BGR2GRAY)
 
let_Img = cv2.cvtColor(let_Img, cv2.COLOR_BGR2GRAY)
 
                #if Is_nDMatrix==True:
                #    let_Img = cv2.filter2D(let_Img, -1, SS_nDMatrix)
 
        SS_Kernals_Name=[]
 
        {Key:0,Name:'Convolution',
        Kernal:[
            [0,0,0,0,0],
            [0,0,0,0,0],
            [0,0,1,0,0],
            [0,0,0,0,0],
            [0,0,0,0,0],
        ],
        Kernal_str:[
            ['0','0','0','0','0'],
            ['0','0','0','0','0'],
            ['0','0','1','0','0'],
            ['0','0','0','0','0'],
            ['0','0','0','0','0'],
        ],
        Iterations:1,
        IsActivate:false},
 




        '''
        SS_nDMatrix_str = request.form.get('SS_nDMatrix')
        SS_nDMatrix_list = SS_nDMatrix_str.split(',')
        SS_nDMatrix_list = [float(item) for item in SS_nDMatrix_list]  # Example: convert to float
        SS_nDMatrix=np.array(SS_nDMatrix_list)#.reshape(-1,5)
        Is_nDMatrix=SS_IsActicate[0]
        '''
        #Is_...
 
        #for i in SS_Kernals_list:
        #    SS_Kernals_ls.append(i)
        #    print(i)
        #SS_Kernals_data = json.loads(SS_Kernals_str)
        #print(SS_Kernals_str)
        '''SS_Kernals = [[item['Key'],item['Name'], item['Kernal'], item['Iterations'],item['IsActivate']] for item in SS_Kernals_data]
        SS_Kernals_Name=[]
        SS_Kernals_Matrix=[]
        SS_Kernals_Iterations=[]
        SS_Kernals_IsShow=[]
        for i in SS_Kernals:
            SS_Kernals_Name.append(i[1])
            SS_Kernals_Matrix.append(i[2])
            SS_Kernals_Iterations.append(i[3])
            SS_Kernals_IsShow.append(i[4])
            print(i[1])
            print(i[2])
            print(i[3])
            print(i[4])'''
        
        #SS_Kernals_Matrix2=[]
        #for i in SS_Kernals_Matrix:
        #    for j in i:
        #        pass
 
            print(i[2])
 
            print(type(i[2][0][0]))
 
            
            pass
 
()=>
 
setSS_Iterations(let_input)
 
'C04id_Kernal'+ss_ThisKernal.Key+'_'+(id0*10+id1).toString()
 
let let_UpdateKernals=U05_UpdateIndex
 
style={{height:'30px'}}
 
<div style={{display:'flex',marginTop:'5px'}}>
<input style={{width:'100px',marginLeft:'10px'}}></input>
<button>Ok</button>
</div>
 
 style={{display:'flex'}}
 
,gridTemplateColumns: 'repeat(2, 25px 1fr) 50px;'
 
</div>
 
style={{height:'25px'}}
 
 style={{height:'20px',marginTop:'0px',width:'100px',marginLeft:'auto',marginRight:'10px'}}
 
className='C02id_CreateRowButton' style={{width:'275px',marginTop:'5px',marginBottom:'-20px'}}
 
onClick={()=>f_Update('XYWH',index)}
 
id={'C05id_AddBox'+'XYWH'+box.Key.toString()+'_'+index.toString()} 
 
<h1>{name}: {box.XYWH[index]}</h1>
 
<div className='C02id_CreateRowButton' style={{width:'275px',marginTop:'5px',marginBottom:'-20px'}}>
<h1>{name}: {box.XYWH[index]}</h1>
<input id={'C05id_AddBox'+'XYWH'+box.Key.toString()+'_'+index.toString()} style={{height:'20px',marginTop:'0px',width:'100px',marginLeft:'auto',marginRight:'10px'}}></input>
<button style={{height:'25px'}} onClick={()=>f_Update('XYWH',index)}>Ok</button>
</div>
 
<div className='C02id_CreateRowButton' style={{width:'275px',marginTop:'5px',marginBottom:'-20px'}}>
<input  style={{height:'20px',marginTop:'0px',width:'100px',marginLeft:'auto',marginRight:'10px'}}></input>
<button style={{height:'25px'}} onClick={()=>alert("f_Update('XYWH',index)")}>Ok</button>
</div>
</div>
 
id={'C05id_AddBox'+'XYWH'+box.Key.toString()+'_'+index.toString()}
 
<h1>{name}: {box.XYWH[index]}</h1>
 
SS_Kernals_list=SS_Kernals_str.split(',')
        SS_Kernals_ls=[]
 
        print(SS_Boxes_str)
 
</div>
<div style={{display:'flex'}}>
 
,marginTop:'10px'}
 
</div>
 
</div>
 
SS_ThiKernals
 
    const [SS_UseEffect,setSS_UseEffect]=useState<false>
 
setSS_UseEffect(true)
 
    let ss_nDMatrix=[...SS_nDMatrix]
    // SS_nDTable does not update when SS_nDMatrix is updated.
 
Layout
 
        function f_Down(){
            if(let_Index<SS_Kernals.length){
                let ss_Kernals=[...SS_Kernals]
                let let_UpdateKernals=U05_UpdateIndex(ss_Kernals,let_Index,let_Index+1)
                setSS_Kernals(let_UpdateKernals)
            }
        }
        function  (){
            if(let_Index>0){
                let ss_Kernals=[...SS_Kernals]
                let let_UpdateKernals=U05_UpdateIndex(ss_Kernals,let_Index,let_Index-1)
                setSS_Kernals(let_UpdateKernals)
            }
        }
 
<button onClick={f_Down}>Down</button>
 
<button onClick={ }>Up</button>
 
        //alert(JSON.stringify(SS_UpdateKernals))
        //setSS_nDTable(SS_ThisKernal.Kernal.map(row => row.map(cell => cell.toString())))
        //setSS_nDMatrix(SS_ThisKernal.Kernal.map(row => row.map(cell => cell)))
 
.map(row => row.map(cell => cell))
 
  useEffect(()=>{},[SS_Kernals])
 
let JSX_Kernals=
 
  let JSX_Kernals=
 
SS_Kernals.map((kernal,index)=>{
        return(<>
        <U_Kernal
        SS_Kernals={SS_Kernals}
        setSS_Kernals={setSS_Kernals}
        SS_ThisKernal={kernal}
        Index={index}
        />
        </>
        )})
 
  let JSX_Kernals=SS_Kernals.map((kernal,index)=>{
        return(<>
        <U_Kernal
        SS_Kernals={SS_Kernals}
        setSS_Kernals={setSS_Kernals}
        SS_ThisKernal={kernal}
        Index={index}
        />
        </>
        )})
 
.toString()
 
let_Img=DrawingBoxes(let_Img,SS_Boxes_XYWH,SS_Boxes_Type,SS_Boxes_Color,SS_Boxes_IsShow)
 
let_Img=DrawingBoxes(let_Img,SS_Boxes_XYWH,SS_Boxes_Type,SS_Boxes_Color,SS_Boxes_IsShow)
 
            //if(Mode==='Delete') {setSS_ThisBox(let_DefaultBox)}
            //if(Mode==='Create') {setSS_ThisBox(let_DefaultBox)}
            if(Mode==='None'){}
 
        SS_AddBoxColor,
 
        SS_AddBoxColor,
        SS_AddBoxType,
 
{//
 
,SS_ThisBox
 
        alert(SS_AddBoxXYWHindex)
        alert(SS_AddBoxXYWHvalue)
 
|null
 
|null
 
 && SS_AddBoxColor 
 
 && SS_AddBoxType )
 
 && SS_AddBoxXYWHindex && SS_AddBoxXYWHvalue 
 
                //alert(SS_AddBoxXYWHvalue)
                // null
                //alert(SS_AddBoxXYWHindex)
                // null
 
                alert('HelloWorld')
 
alert(index)
 
setSS_AddBoxXYWHindex(index)
 
        alert(SS_UpdateMode)
 
Mode
 
            alert(SS_AddBoxXYWHvalue
            alert(SS_AddBoxXYWHindex
 
                alert(index)
 
alert(isNaN(parseInt(let_input)).toString())
 
                    alert(let_input)
 
alert(index)
 
                alert(let_input)
 
                setSS_AddBoxXYWHvalue
 
                setSS_AddBoxXYWH(ss_AddBoxXYWH)
 
[1,1,1,1,1]
 


//****************************************************************************
// FUNCTION 02: EDIT BOX TYPE
//****************************************************************************

//****************************************************************************
// FUNCTION 02: DELETE BOX
//****************************************************************************
 
//****************************************************************************
// FUNCTION 00: CREATE NEWBOX
//****************************************************************************

//****************************************************************************
// FUNCTION 01: EDIT BOX NUMBER
//****************************************************************************
    function f_UpdateNumber(key:number,index:number){
        let ss_Boxes=[...SS_Boxes]
        setSS_ThisBox(R04_SelectBox(key,ss_Boxes))
        let let_UpdateBoxes=ss_Boxes
        let let_Input:string=(document.getElementById('C05id_AddBoxNumber'+key.toString()+'_'+index.toString()) as HTMLInputElement).value.toString();
        if(isNaN(parseInt(let_Input))===false
        ){
            let_UpdateBoxes=U04_UpdateNumber(SS_ThisBox,ss_Boxes,parseInt(let_Input),index)
        }else{
            let_UpdateBoxes=let_UpdateBoxes
        }
        setSS_Boxes(let_UpdateBoxes)
    }
 
    //useEffect(()=>{
    //let let_UpdateBoxes=U04_UpdateType(SS_ThisBox,ss_Boxes,SS_ThisBoxType)
    //let_UpdateBoxes=U04_UpdateColor(SS_ThisBox,ss_Boxes,SS_ThisBoxColor)
    //setSS_Boxes(let_UpdateBoxes)
    //},[SS_ThisBox,SS_ThisBoxType])
 
        //let let_Input:string=(document.getElementById('C05id_CreatingNewBox') as HTMLInputElement).value.toString();
        //let ss_Boxes=[...SS_Boxes]
        //let let_UpdateBoxes=C04_Create(ss_Boxes,let_Input)
        //setSS_Boxes(let_UpdateBoxes)
 
f_UpdateNumber(box.Key,index)
 
Number(
 
f_UpdateType
 
f_setColor
 
|nul
 
f_Delete
 
                
 
ss_AddBoxXYWH[index]=let_input
 
        if(SS_UpdateMode==='IsShow'){}
 
    const [SS_AddBoxIsShow,setSS_AddBoxIsShow]=useState<boolean>(false)
 
            if(Mode==='IsShow') {
                let let_input=(document.getElementById('C05id_AddBox'+Mode+box.Key.toString())as HTMLInputElement).value.toString()
                setSS_AddBoxIsShow(let_input)
            }
 
''
 
+'_'+index.toString()
 
+'_'+index.toString()
 
+'_'+index.toString()
 
Type
 
Color
 

        // Update
        function f_Delete(){
        let ss_Boxes=[...SS_Boxes]
        let let_UpdateBoxes=D04_Delete(R04_SelectBox(box.Key,ss_Boxes),ss_Boxes)
        setSS_ThisBox(let_DefaultBox)
        setSS_Boxes(let_UpdateBoxes)
        }
 
        // Update
        function f_UpdateType(){
        let ss_Boxes=[...SS_Boxes]
        let let_Input:string=(document.getElementById('C05id_AddBox'+box.Key.toString()) as HTMLInputElement).value.toString()
        let let_UpdateBoxes=U04_UpdateType(R04_SelectBox(box.Key,ss_Boxes),ss_Boxes,let_Input)
        setSS_Boxes(let_UpdateBoxes)
    }

        // Update
        function f_setColor(){
            let let_Input=(document.getElementById('C05id_AddBoxColor'+box.Key.toString())as HTMLInputElement).value.toString()
            let ss_Boxes=[...SS_Boxes]
            let let_UpdateBoxes=U04_UpdateColor(R04_SelectBox(box.Key,ss_Boxes),ss_Boxes,let_Input)
            setSS_Boxes(let_UpdateBoxes)
        }

 
        // Update
        function f_UpdateType(){
        let ss_Boxes=[...SS_Boxes]
        let let_Input:string=(document.getElementById('C05id_AddBox'+box.Key.toString()) as HTMLInputElement).value.toString()
        let let_UpdateBoxes=U04_UpdateType(R04_SelectBox(box.Key,ss_Boxes),ss_Boxes,let_Input)
        setSS_Boxes(let_UpdateBoxes)
    }

        // Update
        function f_setColor(){
            let let_Input=(document.getElementById('C05id_AddBoxColor'+box.Key.toString())as HTMLInputElement).value.toString()
            let ss_Boxes=[...SS_Boxes]
            let let_UpdateBoxes=U04_UpdateColor(R04_SelectBox(box.Key,ss_Boxes),ss_Boxes,let_Input)
            setSS_Boxes(let_UpdateBoxes)
        }

 
            if(Mode===)
 
Type
 
        let ss:TS_Box=SS_ThisBox
 
    const [SS_ThisBoxType,setSS_ThisBoxType]=useState<string>('Rectangle')
    const [SS_ThisBoxColor,setSS_ThisBoxColor]=useState<string>('#000000')
 
            <h1>{'C05id_AddBoxType'+box.Key.toString()}</h1>
 



        '''
        SS_nDMatrix_str = request.form.get('SS_nDMatrix')
        SS_nDMatrix_list = SS_nDMatrix_str.split(',')
        SS_nDMatrix_list = [float(item) for item in SS_nDMatrix_list]  # Example: convert to float
        SS_nDMatrix=np.array(SS_nDMatrix_list)#.reshape(-1,5)
        Is_nDMatrix=SS_IsActicate[0]
        '''
 
            pass
 
SS_nDMatrix
 
    # X
    kernel = np.ones((5,5),np.uint8)
 
          formData.append('SS_Boxes',JSON.stringify(SS_Kernals).toString())
 
  useEffect(()=>{
    JSX_Kernals=SS_Kernals.map((kernal,index)=>{
        return(<>
        <U_Kernal
        SS_Kernals={SS_Kernals}
        setSS_Kernals={setSS_Kernals}
        SS_ThisKernal={kernal}
        Index={index}
        />
        </>
        )})
  },[SS_Kernals,])
 
            let ss_Index=SS_Index
 
let ss_Index=SS_Index
 
                setSS_Index(ss_Index+1)
 
                setSS_Index(ss_Index-1)
 
    const [SS_PrevIndex,setSS_PrevIndex]=useState<number>(Index)
 
        if(SS_Index!==SS_PrevIndex){
            //alert('Hello')
            let ss_Index=SS_Index
            let ss_PrevIndex=SS_PrevIndex
            let ss_Kernals=[...SS_Kernals]
            let let_UpdateKernals=U05_UpdateIndex(ss_Kernals,0,ss_Index)
            setSS_Kernals(let_UpdateKernals)
            setSS_PrevIndex(ss_Index)
        }
 
    alert('FFTSOSS')
 
  let 
 
JSX_Kernals=SS_Kernals.map((kernal,index)=>{
  return(<>
  <U_Kernal
  SS_Kernals={SS_Kernals}
  setSS_Kernals={setSS_Kernals}
  SS_ThisKernal={kernal}
  Index={index}
  />
  </>
  )}
 
U05_UpdateIndex()
 
        if(SS_Index<SS_PrevIndex){}
 
                let 
 
dateIndex
 

    function f_UpdateIndex(){
        let let_Input:string=(document.getElementById('C05id_UpdateIndexKernal'+SS_Index) as HTMLInputElement).value.toString()
        setSS_Index(let_Input)
    }
 
<select onChange={f_UpdateIndex}
style={{fontSize:'15px',height:'25px'}} 
value={SS_Index} id={'C05id_UpdateIndexKernal'+SS_Index}>
  <option value="0">0</option>
  <option value="1">1</option>
  <option value="2">2</option>
  <option value="3">3</option>
</select>
 
<select onChange={f_UpdateIndex}
style={{fontSize:'15px',height:'25px'}} 
value={SS_Index} id={'C05id_UpdateIndexKernal'+SS_Index}>
  <option value="0">0</option>
  <option value="1">1</option>
  <option value="2">2</option>
  <option value="3">3</option>
</select>
</div>
 
C05id_AddBoxType
 

    function f_UpdateIndex(){}
 
<h1>{SS_ThisKernal.Key.toString()}</h1>
 
  <option value="LineY">Vertical Line</option>
  <option value="Crop" style={{display:'none'}}>Crop</option>
 
.toString()
 
<U_Kernal
SS_IsActivate={SS_IsActivate}
setSS_IsActivate={setSS_IsActivate}
SS_Affine={SS_Affine}
setSS_Affine={setSS_Affine}
SS_AffineSTR={SS_AffineSTR}
setSS_AffineSTR={setSS_AffineSTR}
SS_AffineRGB={SS_AffineRGB}
setSS_AffineRGB={setSS_AffineRGB}
SS_AffineBOOL={SS_AffineBOOL}
setSS_AffineBOOL={setSS_AffineBOOL}
SS_nDMatrix   ={SS_nDMatrix   }
setSS_nDMatrix={setSS_nDMatrix}
SS_nDTable    ={SS_nDTable    }
setSS_nDTable ={setSS_nDTable }/>
<U_Kernal
SS_IsActivate={SS_IsActivate}
setSS_IsActivate={setSS_IsActivate}
SS_Affine={SS_Affine}
setSS_Affine={setSS_Affine}
SS_AffineSTR={SS_AffineSTR}
setSS_AffineSTR={setSS_AffineSTR}
SS_AffineRGB={SS_AffineRGB}
setSS_AffineRGB={setSS_AffineRGB}
SS_AffineBOOL={SS_AffineBOOL}
setSS_AffineBOOL={setSS_AffineBOOL}
SS_nDMatrix   ={SS_nDMatrix   }
setSS_nDMatrix={setSS_nDMatrix}
SS_nDTable    ={SS_nDTable    }
setSS_nDTable ={setSS_nDTable }/>
<U_Kernal
SS_IsActivate={SS_IsActivate}
setSS_IsActivate={setSS_IsActivate}
SS_Affine={SS_Affine}
setSS_Affine={setSS_Affine}
SS_AffineSTR={SS_AffineSTR}
setSS_AffineSTR={setSS_AffineSTR}
SS_AffineRGB={SS_AffineRGB}
setSS_AffineRGB={setSS_AffineRGB}
SS_AffineBOOL={SS_AffineBOOL}
setSS_AffineBOOL={setSS_AffineBOOL}
SS_nDMatrix   ={SS_nDMatrix   }
setSS_nDMatrix={setSS_nDMatrix}
SS_nDTable    ={SS_nDTable    }
setSS_nDTable ={setSS_nDTable }/>
 
    KERNAL.Kernal_str=[
        ['0','0','0','0','0'],
        ['0','0','0','0','0'],
        ['0','0','1','0','0'],
        ['0','0','0','0','0'],
        ['0','0','0','0','0'],
    ]
 
    KERNAL.Kernal_str=[
        ['1','1','1','1','1'],
        ['1','1','1','1','1'],
        ['1','1','1','1','1'],
        ['1','1','1','1','1'],
        ['1','1','1','1','1'],
    ]
 
        const stringTable = SS_nDMatrix.map(row => row.map(cell => cell.toString()));
        setSS_nDTable(stringTable);
 
/*
     convert all number in SS_nDMatrix to string.
     */
 
ss_ThisKernal.Kernal_str
 
        Kernal_str:[
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
        ],
 
        Kernal_str:[
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
            ['1','1','1','1','1'],
        ],
 
        Kernal_str:[
            ['0','0','0','0','0'],
            ['0','0','0','0','0'],
            ['0','0','1','0','0'],
            ['0','0','0','0','0'],
            ['0','0','0','0','0'],
        ],
 
    Kernal_str:string[][],
 
SS_InputMatrix
 
    let let_Index=SS_ThisKernal.Index
 
        let ss_IsActivate=[...SS_IsActivate]
        ss_IsActivate[0]=false
 
        let ss_IsActivate=[...SS_IsActivate]
        ss_IsActivate[0]=true
 
        ss_IsActivate[0]=true
 
        let ss_IsActivate=[...SS_IsActivate]
 
        let ss_IsActivate=[...SS_IsActivate]
 
        ss_IsActivate[0]=true
 
Convolution
 
numbe
 
setSS_IsActivate,
 
setSS_nDMatrix,
 
setSS_nDTable 
 
setSS_nDTable :(S:string[][])=>void
 
setSS_nDMatrix:(S:number[][])=>void
 
setSS_IsActivate:(S:boolean[])=>void
 
SS_Affine       :number[][][]
setSS_Affine    :(S:number[][][])=>void
SS_AffineSTR    :string[][][]
setSS_AffineSTR :(S:string[][][])=>void
SS_AffineRGB    :string[][]
setSS_AffineRGB :(S:string[][])=>void
SS_AffineBOOL:boolean[][]
setSS_AffineBOOL:(S:boolean[][])=>void
 
SS_Affine ,  
setSS_Affine,
SS_AffineSTR    ,
setSS_AffineSTR ,
SS_AffineRGB,
setSS_AffineRGB,
SS_AffineBOOL,
setSS_AffineBOOL,
 
SS_IsActivate:boolean[];
setSS_IsActivate:(S:boolean[])=>void
SS_Affine       :number[][][]
setSS_Affine    :(S:number[][][])=>void
SS_AffineSTR    :string[][][]
setSS_AffineSTR :(S:string[][][])=>void
SS_AffineRGB    :string[][]
setSS_AffineRGB :(S:string[][])=>void
SS_AffineBOOL:boolean[][]
setSS_AffineBOOL:(S:boolean[][])=>void
 
SS_IsActivate,
setSS_IsActivate,
SS_Affine ,  
setSS_Affine,
SS_AffineSTR    ,
setSS_AffineSTR ,
SS_AffineRGB,
setSS_AffineRGB,
SS_AffineBOOL,
setSS_AffineBOOL,
 
  SS_IsActivate:boolean[];
  setSS_IsActivate:(S:boolean[])=>void
SS_Affine       :number[][][]
setSS_Affine    :(S:number[][][])=>void
SS_AffineSTR    :string[][][]
setSS_AffineSTR :(S:string[][][])=>void
SS_AffineRGB    :string[][]
setSS_AffineRGB :(S:string[][])=>void
SS_AffineBOOL:boolean[][]
setSS_AffineBOOL:(S:boolean[][])=>void
SS_nDMatrix   :number[][]
setSS_nDMatrix:(S:number[][])=>void
SS_nDTable    :string[][]
setSS_nDTable :(S:string[][])=>void
 
SS_IsActivate={SS_IsActivate}
setSS_IsActivate={setSS_IsActivate}
SS_Affine={SS_Affine}
setSS_Affine={setSS_Affine}
SS_AffineSTR={SS_AffineSTR}
setSS_AffineSTR={setSS_AffineSTR}
SS_AffineRGB={SS_AffineRGB}
setSS_AffineRGB={setSS_AffineRGB}
SS_AffineBOOL={SS_AffineBOOL}
setSS_AffineBOOL={setSS_AffineBOOL}
SS_Kernals={SS_Kernals}
 
SS_nDMatrix   ={SS_nDMatrix   }
setSS_nDMatrix={setSS_nDMatrix}
SS_nDTable    ={SS_nDTable    }
setSS_nDTable ={setSS_nDTable }
 
SS_nDTable    :string[][]
 
SS_nDMatrix      ={SS_nDMatrix      }
SS_nDTable       ={SS_nDTable       }
 
        {Key:1,Name:'Convolution',Kernal:[
            [0,0,0,0,0,],
            [0,0,0,0,0,],
            [0,0,0,0,0,],
            [0,0,0,0,0,],
            [0,0,0,0,0,],
        ]},
        {Key:2,Name:'Convolution',Kernal:[
            [0,0,0,0,0,],
            [0,0,0,0,0,],
            [0,0,0,0,0,],
            [0,0,0,0,0,],
            [0,0,0,0,0,],
        ]},
 
    const [SS_nDMatrix,setSS_nDMatrix]=useState<number[][]>(
       [[0,0,0,0,0],
        [0,0,0,0,0],
        [0,0,1,0,0],
        [0,0,0,0,0],
        [0,0,0,0,0]]
    )
    const [SS_nDTable,setSS_nDTable]=useState<string[][]>(
       [['0','0','0','0','0'],
        ['0','0','0','0','0'],
        ['0','0','1','0','0'],
        ['0','0','0','0','0'],
        ['0','0','0','0','0']]
    )
 
    Order:number,
 
/*
type TS_Kernal={
    Key:number,
    Name:string,
    Kernal:number[][],
    Kernal_str:string[][],
    Order:number,
    Iterations:number,
    IsActivate:boolean
}

export default TS_Kernal
*/
 
    /*
Type 'TS_Kernal[]' is missing the following properties from type 'TS_Kernal': Key, Name, Kernal, Kernal_str, and 3 more
 
     */
 
Previous
 
    var b = list[y];
list[y] = list[x];
list[x] = b;
 
    THISKERNAL:TS_Kernal,
 
    PREVIOUSORDER
 
if(ORDER>0 && ORDER<4){
    KERNAL.Order=ORDER
    }
    else if (ORDER<=0){
        ORDER=1
    }
 
    ISACTIVE:boolean
 
    // Delete the column with selected key
    for(let i:number=0;i<BOXES.length;i++){
        if(BOXES[i].Type[0]==='Crop'){
            BOXES[i].Type[0]='Frame'
        }
        if(BOXES[i].Key===THISBOX.Key){
            THISBOX.Type[0]='Crop'
        }
    }
    return BOXES
 
    // Renamed Column
 
    // All BOXES
    BOXES:TS_Box[]
 
const let_Width='100%'
 
</>
 

</div>
 
</>
 
<div style={{height:`calc(100vh - 40px - ${(143+20)}px )`,width:let_Width,backgroundColor:'lightblue'}}>
 
{/*
<div style={{backgroundColor:'#33AAFF',height:'10px',marginTop:'-5px',width:'100%'}}></div>
<U_Affine
SS_IsActivate={SS_IsActivate}
setSS_IsActivate={setSS_IsActivate}
SS_Affine={SS_Affine}
setSS_Affine={setSS_Affine}
SS_AffineSTR={SS_AffineSTR}
setSS_AffineSTR={setSS_AffineSTR}
SS_AffineRGB={SS_AffineRGB}
setSS_AffineRGB={setSS_AffineRGB}
SS_AffineBOOL={SS_AffineBOOL}
setSS_AffineBOOL={setSS_AffineBOOL}
/>*/}
 
  let let_TotalSize=5
  let let_Status='Error'
  if(SS_IsActivate[0]===true){
    let_Status='(Active)'
  }
  else{
    let_Status='(Inactive)'
  }
  let JSX_Con=[]
  const let_Width='100%'
  for(let i=0;i<let_TotalSize;i++){
    let JSX_Kernals=[]
    for(let j=0;j<let_TotalSize;j++){
      JSX_Kernals.push([i,j])
    }
    JSX_Con.push(JSX_Kernals)
  }
  let JSX_Convolution=JSX_Con.map((i)=>(<tr>{i.map((j)=>(<td><input 
    onChange={()=>f_OnChange(j[0],j[1])}
    value={(SS_nDTable[j[0]][j[1]]).toString()} 
    id={'C04id_Kernal'+(j[0]*10+j[1]).toString()}></input></td>))}</tr>))

//****************************************************************************
// FUNCTION_00: On Change
//****************************************************************************
    function f_OnChange(id0:number,id1:number){
        let let_input=(document.getElementById('C04id_Kernal'+(id0*10+id1).toString()) as HTMLInputElement).value.toString();
        let ss_nDTable=[...SS_nDTable]
        ss_nDTable[id0][id1]=let_input
        setSS_nDTable(ss_nDTable);
        (document.getElementById('C04id_Kernal'+(id0*10+id1).toString()) as HTMLInputElement).value = let_input;
      }

//****************************************************************************
// FUNCTION_01: Reset
//****************************************************************************
      function f_Reset(){
        setSS_nDMatrix(
        [[0,0,0,0,0],
         [0,0,0,0,0],
         [0,0,1,0,0],
         [0,0,0,0,0],
         [0,0,0,0,0]])
        setSS_nDTable(
        [['0','0','0','0','0'],
         ['0','0','0','0','0'],
         ['0','0','1','0','0'],
         ['0','0','0','0','0'],
         ['0','0','0','0','0']])
        let ss_IsActivate=[...SS_IsActivate]
        ss_IsActivate[0]=true
        setSS_IsActivate(ss_IsActivate)
      }

      function f_OnePunchMan(){
        setSS_nDMatrix(
        [[1,1,1,1,1],
         [1,1,1,1,1],
         [1,1,1,1,1],
         [1,1,1,1,1],
         [1,1,1,1,1]])
        setSS_nDTable(
        [['1','1','1','1','1'],
         ['1','1','1','1','1'],
         ['1','1','1','1','1'],
         ['1','1','1','1','1'],
         ['1','1','1','1','1']])
        let ss_IsActivate=[...SS_IsActivate]
        ss_IsActivate[0]=true
        setSS_IsActivate(ss_IsActivate)
      }

//****************************************************************************
// FUNCTION_01: Update Matrix
//****************************************************************************
        function f_Update(){
          let ss_nDMatrix=[...SS_nDMatrix]
          let ss_nDTable=[... SS_nDTable]
          for(let i=0;i<let_TotalSize;i++){
          for(let j=0;j<let_TotalSize;j++){
            if(isNaN(parseFloat(SS_nDTable[i][j]))===false){
              //alert(SS_nDTable[i])
              ss_nDMatrix[i][j]=parseFloat(ss_nDTable[i][j])
            }
            else{
              ss_nDMatrix[i][j]=0
            }}
          }
          setSS_nDMatrix(ss_nDMatrix)

        for(let i=0;i<let_TotalSize;i++){
          for(let j=0;j<let_TotalSize;j++){
            //if(isNaN(parseFloat(ss_nDTable[i][j]))){
            //  ss_nDTable[i][j]='1'//let_2DMatrix[i].toString()
            //}
            if(ss_nDTable[i][j]!==ss_nDMatrix[i][j].toString()){
              ss_nDTable[i][j]=ss_nDMatrix[i][j].toString()
            }
          }
        }
        setSS_nDTable(ss_nDTable)
        let ss_IsActivate=[...SS_IsActivate]
        ss_IsActivate[0]=true
        setSS_IsActivate(ss_IsActivate)
        }

//****************************************************************************
// FUNCTION_02: Activate or Deactivate SS_nDMatrix
//****************************************************************************

      function f_SetDeActivate(){
        let ss_IsActivate=[...SS_IsActivate]
        ss_IsActivate[0]=false
        setSS_IsActivate(ss_IsActivate)
      }
 
<div style={{height:`calc(100vh - 40px - ${(143+20)}px )`,width:let_Width,backgroundColor:'lightblue'}}>

</div>
 
  <div style={{display:'flex',marginTop:'10px'}}>
    <h1 className='C05id_Zoom' style={{marginTop:'10px',marginLeft:'10px'}}>Convolution {let_Status}</h1>
  </div>
  
<div className='C05id_Convolution' style={{marginLeft:'10px'}}>
<div style={{marginTop:'20px'}}></div>
{JSX_Convolution}
    <button style={{backgroundColor:SS_IsActivate[0]? 'lightgreen':'white'}} onClick={f_Update}>Activate</button>
    <button style={{backgroundColor:SS_IsActivate[0]? 'white':'lightgreen'}} onClick={f_SetDeActivate}>Deactivate</button>
    <button onClick={f_Reset}>Reset</button>
    <button onClick={f_OnePunchMan}>Matrix 1</button>
</div>
<hr/>

{/*
<div style={{backgroundColor:'#33AAFF',height:'10px',marginTop:'-5px',width:'100%'}}></div>
<U_Affine
SS_IsActivate={SS_IsActivate}
setSS_IsActivate={setSS_IsActivate}
SS_Affine={SS_Affine}
setSS_Affine={setSS_Affine}
SS_AffineSTR={SS_AffineSTR}
setSS_AffineSTR={setSS_AffineSTR}
SS_AffineRGB={SS_AffineRGB}
setSS_AffineRGB={setSS_AffineRGB}
SS_AffineBOOL={SS_AffineBOOL}
setSS_AffineBOOL={setSS_AffineBOOL}
/>*/}
 
 iterations = 1
 
    # X
 
        false   //
 
<div style={{backgroundColor:'#33AAFF',height:'10px',marginTop:'-5px',width:'100%'}}></div>
 
setSS_UseEffect,
 
setSS_UseEffect:(S:boolean)=>void
 
      setSS_UseEffect(true)
 
      setSS_UseEffect(true)
 
    setSS_UseEffect={setSS_Use}
 
    if(SS_IsRGB===true){
      let_State='Color'
      let_Color[0]='white'
      let_Color[1]='lightgreen'
    }
    else{
      let_State='Gray'
      let_Color[0]='lightgreen'
      let_Color[1]='white'
    }
 
      setSS_IsRGB(true)
 
      setSS_IsRGB(false)
 
SS_IsRGB,
 
setSS_IsRGB
 
setSS_IsRGB:(S:boolean)=>void
 
SS_IsRGB:boolean
 
SS_IsRGB,
setSS_UseEffect,
setSS_IsRGB
 
SS_IsRGB:boolean
setSS_UseEffect:(S:boolean)=>void
setSS_IsRGB:(S:boolean)=>void
 
def get_grayscale(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

 

              setSS_ImageDimensions([img.width,img.height])
 
              // Once the image has loaded, you can retrieve its dimensions
 
              // How can I get width and height of this image?
 
              //alert(JSON.stringify(data));
              // Change Image
 
      loadImageDimensions()
 
      const loadImageDimensions = () => {
      if (SS_ImageFile) {
        const reader = new FileReader();

        reader.onload = (e) => {
          const img = new Image();

          img.onload = () => {
            setSS_ImageDimensions([img.width, img.height]);
          };

          img.src = e.target?.result as string;
        };

        reader.readAsDataURL(SS_ImageFile);
      }
    };
 
              imageURL.onload = () => {
                setSS_ImageDimensions([imageURL.width, imageURL.height]);
              };
 
      const loadImageDimensions = () => {
      if (SS_ImageFile) {
        const reader = new FileReader();

        reader.onload = (e) => {
          const img = new Image();

          img.onload = () => {
            setSS_ImageDimensions([img.width, img.height]);
          };

          img.src = e.target?.result as string;
        };

        reader.readAsDataURL(SS_ImageFile);
      }
    };
 
loadImageDimensions();
 
loadImageDimensions();
 
 style={{fontSize:'14px',marginTop:'-20px',marginBottom:'5px'}} 
 
<h1 style={{fontSize:'14px',}} >Image Name: {SS_Image}</h1>
 
? SS_Image.slice(0, 10):''
 
{ width: number; height: number }
 
height: 
 
{ width: 
 
 image
 
<h1 id='C02id_DivHeader' style={{marginTop:'-30px',marginBottom:'-10px'}} >Image Size:</h1>
 
<h1 id='C02id_DivHeader' >Image Name:</h1>
 
<div id='C02id_DivButton'>
<button onClick={()=>alert('f_CreateRow ')}>Ok</button>
<button onClick={()=>alert('f_ResetInput')}id='C02id_B2133' >Reset Input</button>
</div>
 
                print('Position X',xy[0])
                print('Width',xy[0]+int(xy[2]))
                print('Position Y',xy[1])
                print('Height',xy[1]+int(xy[3]))
 
int(xy[1]):int(xy[1])+int(xy[3])
 
                (int(xy[0]),int(xy[1])), 
                (int(xy[0])+int(xy[2]),int(xy[1])+int(xy[3])), 
 
{box.Key},{box.Type}
 
(document.getElementById('C05id_AddBoxType'+box.Key.toString()) as HTMLInputElement).value.toString()
 
            function f_Crop(){
                let ss_Boxes=[...SS_Boxes]
                let let_UpdateBoxes=U04_SetTypeCrop(R04_SelectBox(box.Key,ss_Boxes),ss_Boxes)
                
            }
 
        if(BOXES[i].Type[0]==='Crop')
 
            break
 
    TYPE:string,
 
ginTop:'0px',width:'100px',marginLeft:'auto',marginRight:'10px'}}></input>
 
<input type="submit" id={'C05id_AddBoxNumber'+box.Key.toString()+'_i'} style={{height:'20px',mar
 
<button style={{height:'25px'}} onClick={()=>alert('f_UpdateNumber(box.Key,index)')}>Ok</button>
 
k
 
x',marginLeft:'auto',marginRight:'10px'}}></input>
 
<input id={'C05id_AddBoxNumber'+box.Key.toString()+'_i'} style={{height:'20px',marginTop:'0px',width:'100p
 
{name}: {box.XYWH[index]}
 
+index.toString()
 
lineWidth=1
 
                lineWidth=1
                
 
#int(xy[4])
 
        alert(let_Input)
 
key:number
 
        setSS_ThisBox(R04_SelectBox(key,ss_Boxes))
 
        let ss_Boxes=[...SS_Boxes]
 
value.toString()
 
        let let_Input=(document.getElementById('C05id_AddBoxColor'+box.Key.toString())as HTMLInputElement).
 
        let let_Input:string=(document.getElementById('C05id_AddBoxType'+key.toString()) as HTMLInputElement).value.toStri
 
    function f_UpdateType(key:number){
        let ss_Boxes=[...SS_Boxes]
        setSS_ThisBox(R04_SelectBox(key,ss_Boxes))
        let let_Input:string=(document.getElementById('C05id_AddBoxType'+key.toString()) as HTMLInputElement).value.toString();
        setSS_ThisBoxType(let_Input)
    }
 
key:number
 
    function f_Delete(key:number){
        let ss_Boxes=[...SS_Boxes]
        let let_UpdateBoxes=D04_Delete(R04_SelectBox(key,ss_Boxes),ss_Boxes)
        setSS_ThisBox(let_DefaultBox)
        setSS_Boxes(let_UpdateBoxes)
    }
 
(box.Key)
 
key:number
 
    function f_OpenDeleteBox(key:number){
        setSS_ThisBoxMode(1)
        let ss_Boxes=[...SS_Boxes]
        setSS_ThisBox(R04_SelectBox(key,ss_Boxes))
    }
 
            setSS_ThisBoxColor(let_Input)
 
id:number
 
            setSS_ThisBox(R04_SelectBox(box.Key,ss_Boxes))
 
Point1 
 
                'Point2 X',
 
                'Point2 Y',
 
                print('Normal Distribution Album')
                print(XYWH)
                print(type(XYWH))
 
        for i in SS_Boxes_XYWH:
            print(i)
 
                print('There is God!')
 
end_point
 
start_point
 
    Color
 
                'Point2 Y',
 
                'Point1 Y',
 
                'Point2 X',
 
                'Point1 X',
 
                'Point1 X',
 
                'Point1 Y',
 

        #for i in SS_Boxes:
        #    SS_Boxes_Number.append(i[1])
        #    SS_Boxes_Type.append(i[2])
        #    SS_Boxes_IsShow.append(i[3])
        #for i in SS_Boxes_Number:
        #    print(i)
 

        '''
        [
            [86, True, '#000000'],
            [148, True, '#e1e1e1'],
            [284, True, '#5b5b5b']
        ]
        '''
 
        
        print('WillWood')
        print(SS_Boxes_str)
 
for item in SS_Boxes_data]
 
],item['XYWH'], item['Type'], item['IsShow']] 
 

        #SS_Boxes_list=SS_Boxes_str.split(',')
        #print(SS_Boxes_list)
        
        #for i in SS_Boxes_list:
        #    print(json.loads(i))
        #SS_Boxes_DictList=[]
        #for i in SS_Boxes_list:
        #    SS_Boxes_DictList.append(json.loads(i))
        #for i in SS_Boxes_DictList:
        #    print(i)

        #for i in SS_Boxes_data:
        #    print(i)
        #SS_Boxes = [[item['Key'
 
        SS_Boxes_ls = SS_Boxes_str.split(',')[0].split(' ')
        SS_Boxes_list=[(item) for item in SS_Boxes_ls]
        #for i in SS_Boxes_ls:
        #    pass
 
json.loads
 
type
 
.split(',')[0]
 
        # NameError: name 'SS_B' is not defined
        # I never write variable name 'SS_B'
 
[1]
 
        #print(SS_Boxes_str)
        SS_Boxes_data = json.loads(SS_Boxes_str)
        print(SS_Boxes_data)
 
        This is error. Then shut the fuck up!
 
        for i in SS_Boxes:
            print(i)
 
            pass
 
    //SS_UseEffect
 
import { U04_Update } from '../../T04_Box/U04_Update';
 
        COLOR:string,
        POSITIONX:number,
        POSITIONY:number,
        WIDTH:number,
        HEIGHT:number,
        LINEWIDTH:number,
 
COLOR
 
'C05id_CreatingNewBox'
 
            //alert(JSON.stringify(SS_Thresholds))
 
            //let let_UpdateBoxes=U04_UpdateColor(SS_ThisBox,ss_Boxes,let_input)
            //setSS_Boxes(let_UpdateBoxes)
            //alert(JSON.stringify(SS_Boxes))
 
alert('f_Delete( )'
 



{/*
            <h5 className='C02id_RowInput' style={{width:'275px',marginRight:'auto',marginTop:'0px'}}>Position X: {box.XYWH[0]}</h5>
            <h5 className='C02id_RowInput' style={{width:'275px',marginRight:'auto',marginTop:'-20px'}}>Position Y: {box.XYWH[1]}</h5>
            <h5 className='C02id_RowInput' style={{width:'275px',marginRight:'auto',marginTop:'-20px'}}>Width: {box.XYWH[2]}</h5>
            <h5 className='C02id_RowInput' style={{width:'275px',marginRight:'auto',marginTop:'-20px',marginBottom:'-20px'}}>Height: {box.XYWH[3]}</h5>
        */}
 
()=>
 
(box.Key)
 
    function f_IsShow(key:number){
        let ss_Boxes=[...SS_Boxes]
        setSS_ThisBox(R04_SelectBox(key,ss_Boxes))
    }
 
        setSS_ThisBoxIsShow(true)
 
    const [SS_ThisBoxIsShow,setSS_ThisBoxIsShow]=useState<boolean>(false)
 
    if(SS_ThisBoxIsShow===true){
        if(SS_ThisBox.IsShow===true){
            let ss_ThisBox=SS_ThisBox
            ss_ThisBox.IsShow=false
        }
        else{
            let ss_ThisBox=SS_ThisBox
            ss_ThisBox.IsShow=true
        }
        setSS_Boxes(ss_Boxes)
        setSS_ThisBoxIsShow(false)
    }
 
    let let_UpdateBoxes=U04_UpdateType(SS_ThisBox,ss_Boxes,SS_ThisBoxType)
    let_UpdateBoxes=U04_UpdateColor(SS_ThisBox,ss_Boxes,SS_ThisBoxColor)
 
    const [SS_ThisBoxIsShow,setSS_ThisBoxIsShow]=useState<boolean>(true)
 
<string>('')
 
    //alert(SS_ThisBoxColor)
 
    alert(JSON.stringify(SS_Boxes))
 
let 
 
Threshold
 
            setSS_ThisBoxColor(let_input)
 
let 
 
            let let_UpdateThresholds=U03_SetColor(Threshold,ss_Boxes,let_input)
            setSS_Thresholds(let_UpdateThresholds)
 
            let ss_Boxes=[...SS_Boxes]
 

            let let_Show=(document.getElementById('C05id_Show'+Threshold.Key.toString())as HTMLInputElement)
            let_Show!.style.backgroundColor=let_input

 
            //let let_input=let_target?.value
            //let_input=let_input[0]+let_input[1]+let_input[2]+let_input[1]+let_input[2]+let_input[1]+let_input[2]

 
setSS_Boxes(SS_Boxes)
 
        //let let_UpdateBoxes=U04_UpdateType(SS_ThisBox,ss_Boxes,let_Input)
        //setSS_Boxes(let_UpdateBoxes)
        //alert(JSON.stringify(SS_ThisBox))

 
    //...
    <select onChange={()=>f_UpdateType(box.Key)}
style={{fontSize:'15px',height:'25px'}} 
value={box.Type[0]} id={'C05id_AddBoxType'+box.Key.toString()}>
  <option value="Rectangle">Rectangle</option>
  <option value="Frame">Frame</option>
  <option value="Line">Line</option>
</select>
//...
// Why f_UpdateType does not update the select dom element as except
 
 onChange={()=>f_UpdateType(box.Key)}
 
value={box.Type[0]} id={'C05id_AddBoxType'+box.Key.toString()}
 
,height:'20px'
 
<input id={'C05id_AddBoxNumber'+box.Key.toString()+'_'+index.toString()} style={{height:'20px',marginTop:'0px',width:'100px',marginLeft:'auto',marginRight:'10px'}}></input>
 
{name}: {box.XYWH[index]}
 
<select onChange={()=>f_UpdateType(box.Key)}
style={{fontSize:'15px',height:'25px'}} 
value={box.Type[0]} id={'C05id_AddBoxType'+box.Key.toString()}>
  <option value="Rectangle">Rectangle</option>
  <option value="Frame">Frame</option>
  <option value="Line">Line</option>
</select>
 
ss_Boxes=[...SS_Boxes]
 
let ss_Boxes=[...SS_Boxes]
    let JSX_Input=ss_Boxes.map((box)=>{
        let let_IsShow='Show'
        if(box.IsShow){
            let_IsShow='Show'
        }else{let_IsShow='Hide'}
        let let_InputName:string[]=[
            'Position X',
            'Position Y',
            'Width',
            'Height',
            'Line Width',
        ]
        if(box.Type[0]==='Line'){
            let_InputName=[
                'Point X1',
                'Point Y1',
                'Point X2',
                'Point Y2',
                'Line Width',
            ]
        }
        let JSX_NextedInput=let_InputName.map((name,index)=>
        {
        return (<div className='C02id_CreateRowButton' style={{width:'275px',marginTop:'5px',marginBottom:'-20px'}}>
<h1>{name}: {box.XYWH[index]}</h1>
<input id={'C05id_AddBoxNumber'+box.Key.toString()+'_'+index.toString()} style={{height:'20px',marginTop:'0px',width:'100px',marginLeft:'auto',marginRight:'10px'}}></input>
<button style={{height:'25px'}} onClick={()=>f_UpdateNumber(box.Key,index)}>Ok</button>
</div>)}
)
        // Rename  
        if(box.Key!==0){
        if(box===SS_ThisBox && SS_ThisBoxMode===1){
            return(
            <tr className='C02id_HeightLightRow' ><td>

            <div style={{marginLeft:C02_MarginLeft,marginBottom:'-10px'}}>
                <h1 style={{marginTop:'5px'}}>Do you sure you want to</h1>
                <h1 style={{marginTop:'-20px'}}>delete this {box.Type[0]}?</h1>
            </div>
            <div className='C02id_DeleteColumn' style={{marginTop:'-10px',marginLeft:C02_MarginLeft,marginRight:'auto',marginBottom:'10px'}}>
                <button onClick={()=>alert('f_Delete( )')}>Ok</button>
                <button onClick={()=>f_OpenDefaultBox()}>Cancel</button>
            </div>
            </td></tr>

            )
        }
        // Default State
        else
        {return(
            <tr><td>
<div className='C02id_CreateRowButton' style={{width:'275px'}}>
<button className='C02id_DeleteColumn' style={{height:'25px'}} onClick={()=>f_OpenDeleteBox(box.Key)}>X</button>
<input type='color' style={{height:'25px',marginTop:'0px',marginLeft:'5px',marginRight:'10px'}}></input>
             
<select onChange={()=>f_UpdateType(box.Key)}
style={{fontSize:'15px',height:'25px'}} 
value={box.Type[0]} id={'C05id_AddBoxType'+box.Key.toString()}>
  <option value="Rectangle">Rectangle</option>
  <option value="Frame">Frame</option>
  <option value="Line">Line</option>
</select>
<button style={{height:'25px',width:'50px',marginLeft:'10px'}}>{let_IsShow}</button>
</div>
{JSX_NextedInput}



{/*
            <h5 className='C02id_RowInput' style={{width:'275px',marginRight:'auto',marginTop:'0px'}}>Position X: {box.XYWH[0]}</h5>
            <h5 className='C02id_RowInput' style={{width:'275px',marginRight:'auto',marginTop:'-20px'}}>Position Y: {box.XYWH[1]}</h5>
            <h5 className='C02id_RowInput' style={{width:'275px',marginRight:'auto',marginTop:'-20px'}}>Width: {box.XYWH[2]}</h5>
            <h5 className='C02id_RowInput' style={{width:'275px',marginRight:'auto',marginTop:'-20px',marginBottom:'-20px'}}>Height: {box.XYWH[3]}</h5>
        */}
            </td>
            </tr>
        )}}
        else{return <></>}
    })
 
    let JSX_Input=ss_Boxes.map((box)=>{
        let let_IsShow='Show'
        if(box.IsShow){
            let_IsShow='Show'
        }else{let_IsShow='Hide'}
        let let_InputName:string[]=[
            'Position X',
            'Position Y',
            'Width',
            'Height',
            'Line Width',
        ]
        if(box.Type[0]==='Line'){
            let_InputName=[
                'Point X1',
                'Point Y1',
                'Point X2',
                'Point Y2',
                'Line Width',
            ]
        }
        let JSX_NextedInput=let_InputName.map((name,index)=>
        {
        return (<div className='C02id_CreateRowButton' style={{width:'275px',marginTop:'5px',marginBottom:'-20px'}}>
<h1>{name}: {box.XYWH[index]}</h1>
<input id={'C05id_AddBoxNumber'+box.Key.toString()+'_'+index.toString()} style={{height:'20px',marginTop:'0px',width:'100px',marginLeft:'auto',marginRight:'10px'}}></input>
<button style={{height:'25px'}} onClick={()=>f_UpdateNumber(box.Key,index)}>Ok</button>
</div>)}
)
        // Rename  
        if(box.Key!==0){
        if(box===SS_ThisBox && SS_ThisBoxMode===1){
            return(
            <tr className='C02id_HeightLightRow' ><td>

            <div style={{marginLeft:C02_MarginLeft,marginBottom:'-10px'}}>
                <h1 style={{marginTop:'5px'}}>Do you sure you want to</h1>
                <h1 style={{marginTop:'-20px'}}>delete this {box.Type[0]}?</h1>
            </div>
            <div className='C02id_DeleteColumn' style={{marginTop:'-10px',marginLeft:C02_MarginLeft,marginRight:'auto',marginBottom:'10px'}}>
                <button onClick={()=>alert('f_Delete( )')}>Ok</button>
                <button onClick={()=>f_OpenDefaultBox()}>Cancel</button>
            </div>
            </td></tr>

            )
        }
        // Default State
        else
        {return(
            <tr><td>
<div className='C02id_CreateRowButton' style={{width:'275px'}}>
<button className='C02id_DeleteColumn' style={{height:'25px'}} onClick={()=>f_OpenDeleteBox(box.Key)}>X</button>
<input type='color' style={{height:'25px',marginTop:'0px',marginLeft:'5px',marginRight:'10px'}}></input>
             
<select onChange={()=>f_UpdateType(box.Key)}
style={{fontSize:'15px',height:'25px'}} 
value={box.Type[0]} id={'C05id_AddBoxType'+box.Key.toString()}>
  <option value="Rectangle">Rectangle</option>
  <option value="Frame">Frame</option>
  <option value="Line">Line</option>
</select>
<button style={{height:'25px',width:'50px',marginLeft:'10px'}}>{let_IsShow}</button>
</div>
{JSX_NextedInput}



{/*
            <h5 className='C02id_RowInput' style={{width:'275px',marginRight:'auto',marginTop:'0px'}}>Position X: {box.XYWH[0]}</h5>
            <h5 className='C02id_RowInput' style={{width:'275px',marginRight:'auto',marginTop:'-20px'}}>Position Y: {box.XYWH[1]}</h5>
            <h5 className='C02id_RowInput' style={{width:'275px',marginRight:'auto',marginTop:'-20px'}}>Width: {box.XYWH[2]}</h5>
            <h5 className='C02id_RowInput' style={{width:'275px',marginRight:'auto',marginTop:'-20px',marginBottom:'-20px'}}>Height: {box.XYWH[3]}</h5>
        */}
            </td>
            </tr>
        )}}
        else{return <></>}
    })
 
,index:number
 
+'_'+index.toString()
 
let let_UpdateBoxes=ss_Boxes
 
        if(isNaN(parseInt(let_Input))===false){
            let_UpdateBoxes=U04_UpdateNumber(SS_ThisBox,ss_Boxes,parseInt(let_Input),index)
        }else{
            let_UpdateBoxes=let_UpdateBoxes
        }
 
        alert('Update!!!')
 
parseInt(let_Input)
 
        let ss_ThisBox=SS_ThisBox
 
    TYPE:string,
    COLOR:string,
    POSITIONX:number,
    POSITIONY:number,
    WIDTH:number,
    HEIGHT:number,
    LINEWIDTH:number,
 
            THISBOX.XYWH=[
                POSITIONX,
                POSITIONY,
                WIDTH,
                HEIGHT,
                LINEWIDTH
            ]
            THISBOX.Type=[
                TYPE,
                COLOR
            ]
 
    COLOR:string,
    POSITIONX:number,
    POSITIONY:number,
    WIDTH:number,
    HEIGHT:number,
    LINEWIDTH:number,
    ISSHOW:boolean
 
            THISBOX.IsShow=ISSHOW
 
=[
                TYPE,
                COLOR
            ]
 
            THISBOX.XYWH=[
                POSITIONX,
                POSITIONY,
                WIDTH,
                HEIGHT,
                LINEWIDTH
            ]
 
=[
                POSITIONX,
                POSITIONY,
                WIDTH,
                HEIGHT,
                LINEWIDTH
            ]
            THISBOX.Type=[
                TYPE,
                COLOR
            ]
            THISBOX.IsShow=ISSHOW
 
,marginBottom:'-10px'
 
{
//****************************************************************************
}
<div className='C02id_CreateRowButton' style={{width:'275px',marginTop:'5px'}}>
<h1>Position X: {box.XYWH[0]}</h1>
<input style={{height:'20px',marginTop:'0px',width:'100px',marginLeft:'auto',marginRight:'10px'}}></input>
<button style={{height:'25px'}}>Ok</button>
</div>
{
//****************************************************************************
}
<div className='C02id_CreateRowButton' style={{width:'275px',marginTop:'5px'}}>
<h1>Position Y: {box.XYWH[1]}</h1>
<input style={{height:'20px',marginTop:'0px',width:'100px',marginLeft:'auto',marginRight:'10px'}}></input>
<button style={{height:'25px'}}>Ok</button>
</div>
{
//****************************************************************************
}
<div className='C02id_CreateRowButton' style={{width:'275px',marginTop:'5px'}}>
<h1>Position X: {box.XYWH[2]}</h1>
<input style={{height:'20px',marginTop:'0px',width:'100px',marginLeft:'auto',marginRight:'10px'}}></input>
<button style={{height:'25px'}}>Ok</button>
</div>
{
//****************************************************************************
}
<div className='C02id_CreateRowButton' style={{width:'275px',marginTop:'5px'}}>
<h1>Position X: {box.XYWH[3]}</h1>
<input style={{height:'20px',marginTop:'0px',width:'100px',marginLeft:'auto',marginRight:'10px'}}></input>
<button style={{height:'25px'}}>Ok</button>
</div>
{
//****************************************************************************
}
<div className='C02id_CreateRowButton' style={{width:'275px',marginTop:'5px'}}>
<h1>Position X: {box.XYWH[4]}</h1>
<input style={{height:'20px',marginTop:'0px',width:'100px',marginLeft:'auto',marginRight:'10px'}}></input>
<button style={{height:'25px'}}>Ok</button>
</div>
 
Position X
 
  <option value="LineX">Line X</option>
  <option value="LineY">Line Y</option>
 
  <option value="LineX">Line X</option>
  <option value="LineY">Line Y</option>
 
{/*
 
eight:'10px'h
 
<tr>
    <td >Pos Y</td>
    <td>SS_AffSTR[3]</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}}></input></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateAff(3,0)')}>Ok</button></td>
    <td><button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetAff(3,0) ')}>Reset</button></td>
</tr>
 
 id='C04id_Aff3'
 
style={{width:let_WidthTr}} 
 
<h1>{box.XYWH}</h1>
 
<h1>{box.XYWH}</h1>
 
<button>{let_IsShow}</button>
 
{box.IsShow?'Show':'Hide'}
 
    function f_OpenDefaultBox(){
        setSS_ThisBoxMode(0)
        setSS_ThisBox(let_DefaultBox)
    }
 
    function f_OpenEditBox(key:number){
        setSS_ThisBoxMode(1)
        let ss_Boxes=[...SS_Boxes]
        setSS_ThisBox(R04_SelectBox(key,ss_Boxes))
    }
 
if(box===SS_ThisBox && SS_ThisBoxMode===1){
            return(
            <tr className='C02id_HeightLightRow'><td>
            <div className='C02id_CreateRowDiv' style={{marginLeft:C02_MarginLeft}}>
                <h1>{box.Type[0]}</h1>
            </div>
            <input id={'C02id_RenameColumn'+ box.Key} className='C02id_RowInput' style={{marginLeft:C02_MarginLeft}} ></input>
            <div className='C02id_DeleteColumn' style={{marginLeft:C02_MarginLeft,marginRight:'auto',marginBottom:'10px'}}>
                <button onClick={()=>alert('f_Rename( )')}>Ok</button>
                <button onClick={()=>f_OpenDefaultBox()}>Cancel</button>
            </div>
            </td></tr>
            )
        }
        // Delete  
        else 
 
{//<button onClick={()=>f_OpenEditBox(box.Key)} className='C02id_3342'>...</button>
                }
 
                {box.}
 
,marginLeft:'10px',marginTop:'-20px',marginBottom:'20px'
 
    <td>
    <div style={{display:'flex',width:'260px'}}>
    <input  style={{marginTop:'3px',width:'70%'}} ></input>
    <button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateAff(3,0)')}>Ok</button>
    <button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetAff(3,0) ')}>Reset</button>
    </div>
    </td>
    <td>
    <div style={{display:'flex',width:'260px'}}>
    <input  style={{marginTop:'3px',width:'70%'}} ></input>
    <button style={{marginTop:'3px'}} onClick={()=>alert('f_UpdateAff(3,0)')}>Ok</button>
    <button style={{marginTop:'3px'}} onClick={()=>alert('f_ResetAff(3,0) ')}>Reset</button>
    </div>
    </td>
 
    <h1>PositionX:</h1>
 
 {box.XYWH[0]}
 
id='C04id_Aff3'
 
<tr>
 
</tr>
 
{/*
 
 className='C02id_CreateRowDiv C02id_RowInput'
 
delete this {box.Type[0]}?
 
</div><
 
</div>
 
<div style={{display:'flex'}}>
 
</div>
 
            */}
 
            <input className='C02id_RowInput'></input>
            {/*
 
            <table></table>
 
            </table>
 
            <table>
 
</tr>
 
</table>
 
            </tr>
 
            <tr style={{width:'100%'}}>
 
</tr>
 
<input id={'C02id_Input'+ box.Key} className='C02id_RowInput' ></input>
 
    //function f_OpenEditBox(id:number){
    //    setSS_ThisBoxMode(1)
    //    setSS_ThisBox(SS_Boxes[id])
    //}

 
THISBOX.
 
id:number
 
Edi
 
,marginTop:'0px'
 
 style={{marginBottom:'-10px'}}
 
style={{marginTop:'-20px'}}
 
marginBottom:'20px'
 
marginTop:'0px
 
marginTop:'-10px'
 
  let ss_Affine=[...SS_Affine]
 
{/*<button style={{marginTop:'10px',marginRight:'10px',marginLeft:'-140px'}}>Ok</button>
<button style={{marginTop:'10px',marginRight:'5px'}}>Reset</button>*/}
{/*<hr style={{width:'95%'}}/>
<select id="cars" name="cars" className='C05id_Convolution' style={{marginRight:'5px'}} >
  <option value="volvo">Scale</option>
  <option value="volvo">Scale X</option>
  <option value="saab">Scale Y</option>
</select>
<input style={{marginRight:'5px'}} ></input>
<button style={{marginTop:'0px',marginRight:'5px'}}>Set</button>
<button style={{marginTop:'0px',marginRight:'5px'}}>Set 1</button>*/}
 
//
 
,height:'calc()'
 
        <button onClick={()=>{setSS_ImageProcessing(2)}}>Utility</button>
 
object
 
                THISBOX.IdXYWH[0],
 
let_NewKey
 
    // 0 = Key
 
{ .Name} to
 
    // useEffect(()=>{
    //     
    // },[])

//****************************************************************************
// FUNCTION_00: Create New Column
//****************************************************************************
    function f_CreateRow():void{
        let let_NewArray:string[]=[]
        let ss_Columns=[...SS_Columns]
        for(let i=0;i<ss_Columns.length;i++){
            //alert('C02id_Input'+ss_Columns[i].Name)
            let let_Input:string=(
                document.getElementById(
                    'C02id_Input'+ss_Columns[i].Name) as HTMLInputElement
                    ).value.toString();

            let_NewArray.push(let_Input)
        }
        let ss_Rows=SS_Row
        let let_UpdateRows=C01_Create(ss_Rows,let_NewArray)
        setSS_Row(let_UpdateRows)
    }

//****************************************************************************
// FUNCTION_01: Create Column
//****************************************************************************
    function f_CreateColumn():void{
        let let_NewColumn:string=(document.getElementById('C02id_CreateColumnInput')  as HTMLInputElement).value.toString();
        let ss_Columns=[...SS_Columns]
        let let_UpdateColumns=C02_Create(ss_Columns,let_NewColumn)
        if(ss_Columns!==let_UpdateColumns){
        let ss_Rows=[...SS_Row]
        let let_UpdateRow=U01_CreateColumn(ss_Rows)
        setSS_Columns(let_UpdateColumns)
        setSS_Row(let_UpdateRow)
    }
    }

//****************************************************************************
// FUNCTION_02: Open
//****************************************************************************
    function f_Open(THISCOLUMN:TS_Column,MODE:0|1|2):void{
        setSS_EditColumn(1)
        let ss_Columns=[...SS_Columns]
        let let_UpdateColumns=U02_UpdateDisplay(THISCOLUMN,ss_Columns,MODE)
        setSS_Columns(let_UpdateColumns)
    }

//****************************************************************************
// FUNCTION_03: Rename Column
//****************************************************************************
    function f_Rename(THISCOLUMN:TS_Column):void{
        let let_Input:string=(document.getElementById('C02id_RenameColumn'+THISCOLUMN.Key)  as HTMLInputElement).value.toString();
        let ss_Columns=[...SS_Columns]
        let let_UpdateColumn=U02_Edit(THISCOLUMN,ss_Columns,let_Input)
        setSS_Columns(let_UpdateColumn)
    }

//****************************************************************************
// FUNCTION_04: Delete Column
//****************************************************************************
    function f_Delete(THISCOLUMN:TS_Column):void{
        let ss_Rows=[...SS_Row]
        let ss_Columns=[...SS_Columns]
        
        let let_UpdateRow=U01_DeleteColumn(ss_Rows,R02_ReturnIndex(THISCOLUMN,ss_Columns))
        let let_UpdateColumn=D02_Delete(THISCOLUMN,ss_Columns)

        setSS_Row(let_UpdateRow)
        setSS_Columns(let_UpdateColumn)

        if(SS_Columns.length==1){
            setSS_Row([{Key:0 ,Next:1  , Array:['Xedni Wor'],Display:4}])
        }
    }

//****************************************************************************
// FUNCTION_05: Reset input
//****************************************************************************
    function f_ResetInput() {
        // By ChatGPT
        const let_inputElements = document.querySelectorAll('input');
        let_inputElements.forEach((input) => {
          input.value = '';
        });
    }
    
 
// 1 = LineWidth
 
import './index01.css'  // Specific
import './index02_Header.css'
import './index03_Table.css'
import './index04_Minor.css'
import './index05_Hightlight.css'
 
            // Add New Column in List of All BOXES
 
Key:let_NewKey,
                PositionY:10+5,
                ScalePosition:255,
                IsDefault:false,
                Gray:'#000000'
 
import {U02_UpdateDisplay} from  '../T02_Column/U02_UpdateDisplay'
 
.
 
            
 
            []
 

function
1. f_Create
2. f_Delete
3. f_Update
 

function
1. f_Create
2. f_Delete
3. f_Update
 
// Type Script Column
 
// Properties of Each Column
 
    Key:number,         // DEFAULT: Math.random()
                        // Unique Key
    Next:number,        // Key's of the next TS_Row
                        // If not exist, then Next = this Key
    Array:string[],     // Contains data.
    Display?:0|1|2|3|4, // Display State
        // 0 = Default State
        // 1 = Rename
        // 2 = Delete
        // 3 = ?
        // 4 = Start of Linked List
 
LineWidth
 
Color
 
 
 

Attribute 
1. Id 
2. Type 
3. Color 
4. 
 
// React
import { useState , useEffect} from 'react';

// Components
//import R_FilterColumn from './Coms/R_FilterColumn';

// Type
import TS_Row from  '../T01_Row/An_Index';
import TS_Column from  '../T02_Column/An_Index';
import {C01_Create} from  '../T01_Row/C01_Create';
import {C02_Create} from  '../T02_Column/C02_Create'
import {U02_UpdateDisplay} from  '../T02_Column/U02_UpdateDisplay'
import {U02_Edit} from  '../T02_Column/U02_Edit'
import {D02_Delete} from  '../T02_Column/D02_Delete'
import {R02_ReturnIndex} from  '../T02_Column/R02_ReturnIndex'
import {U01_CreateColumn} from  '../T01_Row/U01_CreateColumn'
import {U01_DeleteColumn} from  '../T01_Row/U01_DeleteColumn'

// CSS
import './index00.css'  // General
import './index01.css'  // Specific
import './index02_Header.css'
import './index03_Table.css'
import './index04_Minor.css'
import './index05_Hightlight.css'

const U_AddBox = (
//****************************************************************************
// INPUT
//****************************************************************************
{   // PARAMETER
    // HOOK: setState()
    SS_Row,         // Update Columns
    setSS_Row,      // -
    SS_Columns,
    setSS_Columns,
    SS_EditColumn,
    setSS_EditColumn
}:
{   // TYPE
    // HOOK: setState()
    SS_Row        :TS_Row[],
    setSS_Row     :(S:TS_Row[])=>void,
    // https://stackoverflow.com/questions/60130319/react-typescript-how-to-setstate
    SS_Columns:TS_Column[],
    setSS_Columns:(S:TS_Column[])=>void,
    SS_EditColumn:0|1,
    setSS_EditColumn:(S:0|1)=>void
}
) => {
    const C02_MarginLeft='10px'

    // useEffect(()=>{
    //     
    // },[])

//****************************************************************************
// FUNCTION_00: Create New Column
//****************************************************************************
    function f_CreateRow():void{
        let let_NewArray:string[]=[]
        let ss_Columns=[...SS_Columns]
        for(let i=0;i<ss_Columns.length;i++){
            //alert('C02id_Input'+ss_Columns[i].Name)
            let let_Input:string=(
                document.getElementById(
                    'C02id_Input'+ss_Columns[i].Name) as HTMLInputElement
                    ).value.toString();

            let_NewArray.push(let_Input)
        }
        let ss_Rows=SS_Row
        let let_UpdateRows=C01_Create(ss_Rows,let_NewArray)
        setSS_Row(let_UpdateRows)
    }

//****************************************************************************
// FUNCTION_01: Create Column
//****************************************************************************
    function f_CreateColumn():void{
        let let_NewColumn:string=(document.getElementById('C02id_CreateColumnInput')  as HTMLInputElement).value.toString();
        let ss_Columns=[...SS_Columns]
        let let_UpdateColumns=C02_Create(ss_Columns,let_NewColumn)
        if(ss_Columns!==let_UpdateColumns){
        let ss_Rows=[...SS_Row]
        let let_UpdateRow=U01_CreateColumn(ss_Rows)
        setSS_Columns(let_UpdateColumns)
        setSS_Row(let_UpdateRow)
    }
    }

//****************************************************************************
// FUNCTION_02: Open
//****************************************************************************
    function f_Open(THISCOLUMN:TS_Column,MODE:0|1|2):void{
        setSS_EditColumn(1)
        let ss_Columns=[...SS_Columns]
        let let_UpdateColumns=U02_UpdateDisplay(THISCOLUMN,ss_Columns,MODE)
        setSS_Columns(let_UpdateColumns)
    }

//****************************************************************************
// FUNCTION_03: Rename Column
//****************************************************************************
    function f_Rename(THISCOLUMN:TS_Column):void{
        let let_Input:string=(document.getElementById('C02id_RenameColumn'+THISCOLUMN.Key)  as HTMLInputElement).value.toString();
        let ss_Columns=[...SS_Columns]
        let let_UpdateColumn=U02_Edit(THISCOLUMN,ss_Columns,let_Input)
        setSS_Columns(let_UpdateColumn)
    }

//****************************************************************************
// FUNCTION_04: Delete Column
//****************************************************************************
    function f_Delete(THISCOLUMN:TS_Column):void{
        let ss_Rows=[...SS_Row]
        let ss_Columns=[...SS_Columns]
        
        let let_UpdateRow=U01_DeleteColumn(ss_Rows,R02_ReturnIndex(THISCOLUMN,ss_Columns))
        let let_UpdateColumn=D02_Delete(THISCOLUMN,ss_Columns)

        setSS_Row(let_UpdateRow)
        setSS_Columns(let_UpdateColumn)

        if(SS_Columns.length==1){
            setSS_Row([{Key:0 ,Next:1  , Array:['Xedni Wor'],Display:4}])
        }
    }

//****************************************************************************
// FUNCTION_05: Reset input
//****************************************************************************
    function f_ResetInput() {
        // By ChatGPT
        const let_inputElements = document.querySelectorAll('input');
        let_inputElements.forEach((input) => {
          input.value = '';
        });
    }
    
//****************************************************************************
// JSX_00: Input
//****************************************************************************
    let ss_Columns=[...SS_Columns]
    let JSX_Input=ss_Columns.map((Column)=>{
        // Rename Column
        if(Column.Display===1 && SS_EditColumn===1){
            return(
            <tr className='C02id_HeightLightRow'><td>
            <div className='C02id_CreateRowDiv' style={{marginLeft:C02_MarginLeft}}>
                <h1>{Column.Name} to</h1>
            </div>
            <input id={'C02id_RenameColumn'+Column.Key} className='C02id_RowInput' style={{marginLeft:C02_MarginLeft}} ></input>
            <div className='C02id_DeleteColumn' style={{marginLeft:C02_MarginLeft,marginRight:'auto',marginBottom:'10px'}}>
                <button onClick={()=>f_Rename(Column)}>Ok</button>
                <button onClick={()=>f_Open(Column,0)}>Cancel</button>
            </div>
            </td></tr>
            )
        }
        // Delete Column
        else if(Column.Display===2 && SS_EditColumn===1){
            return(
            <tr className='C02id_HeightLightRow' ><td>

            <div className='C02id_CreateRowDiv C02id_RowInput' style={{marginLeft:C02_MarginLeft,marginBottom:'-10px'}}>
                <h1>Do you sure you want to delete {Column.Name}?</h1>
            </div>
            <div className='C02id_DeleteColumn' style={{marginLeft:C02_MarginLeft,marginRight:'auto',marginBottom:'10px'}}>
                <button onClick={()=>f_Delete(Column)} >Ok</button>
                <button onClick={()=>f_Open(Column,0)}>Cancel</button>
                </div>
            </td></tr>

            )
        }
        // Default State
        else
        {return(
            <tr><td>
            <div className='C02id_CreateRowButton'>
                <button className='C02id_DeleteColumn' onClick={()=>f_Open(Column,2)}>X</button>
                <button onClick={()=>f_Open(Column,1)} className='C02id_3342'>...</button>
                <h1>{Column.Name}</h1>
            </div>
            <input id={'C02id_Input'+Column.Name} className='C02id_RowInput' ></input>

            </td></tr>
        )}
    })

//****************************************************************************
// OUTPUT
//****************************************************************************
return(
<div id='C02id_Div'>
<div id='C02id_Header'>
<h1 id='C02id_DivHeader'>Create New Column</h1>
<div className='C02id_CreateColumnDiv'>
<div style={{display:'inline-flex'}}>
<input id='C02id_CreateColumnInput' style={{height:'20px',marginLeft:'15px'}}>
</input>
<button onClick={f_CreateColumn} style={{marginTop:'-10px',marginLeft:'5px'}}>
Add New Column</button>
</div>
</div>

</div>
<h1 id='C02id_DivHeader' >Create New Row</h1>
<table style={{height:'calc(100vh - 255px)'}}>
{JSX_Input}
</table>

<tr><td>
<div id='C02id_DivButton'>
<button onClick={f_CreateRow}>Ok</button>
<button onClick={f_ResetInput}id='C02id_B2133' >Reset Input</button>
</div>
</td></tr>

</div>
    )
}

export default U_AddBox
 
        false,  // C04_ImageEditor/SS_Aff
 
ine
 
    center = (width/2, height/2) 
 
    #width, height, ch = Img.shape
 
  
# get the center coordinates of the  
# image to create the 2D rotation matrix 
 
    print('Kiss the Rainbow')
    print(M)
 
    #print('Hii')
    #print(pts[0].shape)
 
    width, height, ch = Img.shape
 
    #print('Hii')
    #print(pts[0].shape)
 
https://math.stackexchange.com/questions/2093314/rotation-matrix-of-rotation-around-a-point-other-than-the-origin
 
    M=np.array([[np.cos(Radian),-np.sin(Radian),0],
                [np.sin(Radian), np.cos(Radian),0]])
 
    Radian=(Rotation/180)*np.pi
 
    center=(int(width/2),int(height/2))
 
+int(PositionY)
 
+int(PositionX)
 
+int(PositionY)
 
+int(PositionX)
 
caleX
 
        alert(let_Input.toString())
 
    function f_Null(S:string|null|undefined){
        if(S===null){
            return 'S'
        }
        else if(S===undefined){
            return 'S'
        }
        else{
            return S
        }
    }
 
            #print("merry go 'round: ᴀ ᴊᴀᴘᴀɴᴇꜱᴇ ᴄɪᴛʏ ᴘᴏᴘ ᴘʟᴀʏʟɪꜱᴛ ꜰᴏʀ ᴀ ᴡᴀʟᴋ ᴛʜʀᴏᴜɢʜ ᴛʜᴇ ɴɪɢʜᴛ")
            #print(str((float(v[0]),float(v[1]))))
            #print('v',tuple(list(v)))
            #print(type(tuple(list(v))[0]))
 
let_Img=DrawPointOrigin(let_Img,SS_AffOrigin_Mode,hex_to_rgb_3Dvector(SS_AffOrigin_Color))
 
_ScaleX,SS_Aff_ScaleY
 
Scale
 
        alert(let_Input)
 
        /*
        Cannot read properties of null (reading 'value')
TypeError: Cannot read properties of null (reading 'value')
        */
 
        alert(let_Input)
        /*
 
f_Null(
 
f_Null(
 
f_Null(
 
'white':
 
  let let_Select='lightgreen'
 
     setSS_Color(2)
 
      setSS_Color(0)
 
      setSS_Color(1)
 
    print(RGB)
 
 RGB
 
    RGB=255*RGB#.reshape((3))
 
print(
 
eigh
 
alert('let_Input = '+let_Input)
        alert('let_InputColor = '+let_InputColor)
 
          formData.append('SS_Aff',SS_Aff.toString())

 
formData.append('SS_Aff',SS_Aff.toString())
 
                #print(SS_Affine.shape)
 
            
            #    let_Img=DrawPoints(let_Img,SS_Affine,SS_AffineRGB,SS_AffineBOOL)
 
        # ...
 
        #let_JSON  = request.get_json()
        #let_IsRGB = let_JSON.get('IsRGB')
        #let_Image = let_JSON.get('file')
        #if let_Image!=None:
        #    let_Img = cv2.imdecode(np.frombuffer(let_Image, np.uint8), cv2.IMREAD_COLOR)
        #    let_Bytes = cv2.imencode('.png', let_Img)[1].tobytes()
        #    response = Response(let_Bytes, content_type='image/png')
        #    return response
    
        # Decode base64 encoded image
        #encoded_image = let_Image#.get('file')
        #decoded_image = base64.b64decode(encoded_image)
        #nparr = np.frombuffer(decoded_image, np.uint8)
        #image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        #_, buffer = cv2.imencode('.png', image)
        #processed_image_base64 = base64.b64encode(buffer).decode('utf-8')
#
        #return buffer#{'IsRGB':let_IsRGB,'file':let_Image}
    

        # This is the posted data.
        # convert "file" to image and return image
        # If "IsRGB"=="false" then return black and white image
        # {"IsRGB":"true","file":"{\"file\":{}}"}
        #return {'IsRGB':let_IsRGB,'file':let_File}
        #if let_File!=None:
        #    let_Img = cv2.imdecode(np.frombuffer(Let_JSON.get('file').read(), np.uint8), cv2.IMREAD_COLOR)
        #    let_Bytes = cv2.imencode('.png', let_Img)[1].tobytes()
        #    response = Response(let_Bytes, content_type='image/png')
        #    return Let_JSON #jsonify({'py':response})
            #if let_IsRGB=='false':
            #    return {'messenger':'Bordom'}
            #else:
            #    return {'messenger':'Addiction'}
    #pass
    '''
    # By ChatGPT
    if request.method == 'POST':
        let_File=request.files['file']
        if let_File!=None:
            let_Img = cv2.imdecode(np.frombuffer(let_File.read(), np.uint8), cv2.IMREAD_COLOR)
            let_Bytes = cv2.imencode('.png', let_Img)[1].tobytes()
            response = Response(let_Bytes, content_type='image/png')
            return response #jsonify({'py':response})
        else:
            return jsonify({'error': 'No file uploaded'})'''
 
defaultt.toString()
 
+id.toString()
 
    <td>3</td>
 
    <td>2</td>
 
    <td>0</td>
 
    <td>1</td>
 
    <td>4</td>
 
 onClick={()=>f_UpdateAff()}
 
+NAME
 
function f_ResetAff(id:number){}
 
    <td><button style={{marginTop:'3px'}} >Reset</button></td>
 
how Origin
 
{
//****************************************************************************
// Show Origin
//****************************************************************************
}
 
  let let_Status='Error'
  if(SS_IsActivate[2]===true){
    let_Status='(Active)'
  }
  else{
    let_Status='(Inactive)'
  }
 
    <td>00</td>
 
    <td><input type='color'></input></td>
 
<tr>
    <td style={{width:let_WidthTr}} >Show Center</td>
</tr>
<tr>
    <select id="cars">
  <option value="NoCenter">No Center</option>
  <option value="Center">Center</option>
  <option value="TopLeftCenter">Top Left Center</option>
</select>
<td><button style={{marginTop:'3px'}}>Ok</button></td>
</tr>
 
<tr>
    <td style={{width:let_WidthTr}} >Rotation</td>
    <td>11674</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}}></input></td>
    <td><button style={{marginTop:'3px'}}>Ok</button></td>
    <td><button style={{marginTop:'3px'}}>Reset</button></td>
</tr>
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
 
<tr>
    <td style={{width:let_WidthTr}} >Pos X</td>
    <td>8</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}}></input></td>
    <td><button style={{marginTop:'3px'}}>Ok</button></td>
    <td><button style={{marginTop:'3px'}}>Reset</button></td>
</tr>
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
<tr>
    <td style={{width:let_WidthTr}} >Pos Y</td>
    <td>8</td>
</tr>
<tr>
    <td><input  style={{marginTop:'3px'}}></input></td>
    <td><button style={{marginTop:'3px'}}>Ok</button></td>
    <td><button style={{marginTop:'3px'}}>Reset</button></td>
</tr>
<hr style={{marginTop:'5px',marginBottom:'3px'}} />
 
    <td style={{width:let_WidthTr}} >Show Center</td>
 
Volvo
 
<tr>
    <td><button style={{marginTop:'3px'}}>No C</button></td>
    <td><button style={{marginTop:'3px'}}>Left C</button></td>
    <td><button style={{marginTop:'3px'}}>Center C</button></td>
</tr>
 
rigin
 
Diable 
 
    <td><input  style={{marginTop:'3px'}}></input></td>
 
 style={{}}
 
ition
 
ition
 
<hr/>
 
<hr/>
 
<hr/>
 
<h1 style={{fontSize:'14px',marginTop:'-10px'}}>{let_Status}</h1>
<div style={{display:'flex'}}>
<button style={{marginTop:'0px',marginBottom:'6px',marginRight:'3px'}} onClick= {()=>alert('Rain')/*f_Update          */}>Activate</button>
<button style={{marginTop:'0px',marginBottom:'6px',marginRight:'0px'}} onClick= {()=>alert('Rain')/*f_SetDeActivate   */}>Deactivate</button>

</div>
 
 className='C04id_ShortReset'
 
style={{marginTop:'3px'}}
 
 style={{visibility:'visible',height:'2px',marginBottom:'-2px'}}
 
 style={{visibility:'visible',height:'1px',marginBottom:'0px'}}
 
<td><input></input></td>
 
    <td><button>Ok</button></td>
    <td><button className='C04id_ShortReset'>Reset</button></td>
 
<tr>
    <td style={{width:let_WidthTr}} >Scale X</td>
    <td><input></input></td>
    <td><button>Ok</button></td>
    <td><button className='C04id_ShortReset'>Reset</button></td>
</tr>
<hr style={{visibility:'hidden',height:'2px',marginBottom:'-2px'}}/>
<tr>
    <td style={{width:let_WidthTr}} >Scale Y</td>
    <td><input ></input></td>
    <td><button className='C04id_ShortOk'>Ok</button></td>
    <td><button className='C04id_ShortReset'>Reset</button></td>
</tr>
<hr style={{visibility:'hidden',height:'2px',marginBottom:'-2px'}}/>

<hr style={{visibility:'hidden',height:'2px',marginBottom:'-2px'}}/>


 
{/*<tr>
    <td style={{width:let_WidthTr}} >Crop XL</td>
    <td><input></input></td>
    <td><button>Ok</button></td>
</tr>
<hr style={{visibility:'hidden',height:'2px',marginBottom:'-2px'}}/>
<tr>
    <td style={{width:let_WidthTr}} >Crop XR</td>
    <td><input></input></td>
    <td><button>Ok</button></td>
</tr>
<hr style={{visibility:'hidden',height:'2px',marginBottom:'-2px'}}/>
<tr>
    <td style={{width:let_WidthTr}} >Crop YU</td>
    <td><input></input></td>
    <td><button>Ok</button></td>
</tr>
<hr style={{visibility:'hidden',height:'2px',marginBottom:'-2px'}}/>
<tr>
    <td style={{width:let_WidthTr}} >Crop YD</td>
    <td><input></input></td>
    <td><button>Ok</button></td>
    </tr>*/}
 
className='C04id_ShortInput'
 
<tr>
    <td style={{width:let_WidthTr}} >Rotate</td>
    <td><input></input></td>
    <td><button className='C04id_ShortOk'>Ok</button></td>
    <td><button className='C04id_ShortReset'>Reset</button></td>
</tr>
 
            print('My Country have!')
            print(SS_Affine.shape)
            print(SS_AffineRGB.shape)
            print(SS_AffineBOOL.shape)
 
 
    pts2 = np.float32()
 
[[10, 100],
                   [200, 50], 
                   [100, 250]]
 
    print('ประเทศมึงมี')
 

            # >  - Can't parse 'center'. Expected sequence length 2, got 3
 
            '''
cv2.error: OpenCV(4.8.1) :-1: error: (-5:Bad argument) in function 'circle'
> Overload resolution failed:
>  - circle() missing required argument 'img' (pos 1)
>  - circle() missing required argument 'img' (pos 1)
            '''
 
    print("Vector shape:", Vector.shape)    # (6,2)
    print("Color shape:", Color.shape)  # (6,3)
    print("Bool shape:", Bool.shape)    # (6,)
 
        print(b)
 
            print(str((int(c[0]),int(c[1]),int(c[2]))))
 
        # How can I draw colorful point and make the image become black and white?
        #...
 
#jsonify({'py':response})
 
                if Is_Affine==True:
                    let_Img=AffineTransformations(let_Img,SS_Affine)
 
let_Img = DrawPoints(let_Img,SS_Affine,SS_AffineRGB,SS_AffineBOOL)
 
                # color=(245, 0, 0)
 
            
 
2]))))
 
            print(str((int(c[0]),int(c[1]),int(c[
 
0
 
tuple(c)
 
tuple(list(v))
 
,inplace=True
 
Color.shape[0],
 
            print(v)
 
_coordinates
 
            print("merry go 'round: ᴀ ᴊᴀᴘᴀɴᴇꜱᴇ ᴄɪᴛʏ ᴘᴏᴘ ᴘʟᴀʏʟɪꜱᴛ ꜰᴏʀ ᴀ ᴡᴀʟᴋ ᴛʜʀᴏᴜɢʜ ᴛʜᴇ ɴɪɢʜᴛ")
            print('c',c)
 
        
        '''
        def DrawPoints(Img,Vector,Color,Bool):
            for v,c,b in zip(Vector,Color,Bool):
            if b==True:
                cv2.circle(Img,tuple(v),10,c,-1)
            return Img
        '''
 
let_Img = DrawPoints(let_Img,SS_Affine,SS_AffineRGB,SS_AffineBOOL)
 

                
 
                
 
Drawing
 
        Is_AffineTransform=SS_IsActicate[-1]
 
        print(SS_Affine)
        print(SS_AffineBOOL)
        print(SS_AffineRGB)
        

 
SS_AffineRGB_str=request.form.get('SS_AffineRGB')
 
_str
 
_str
 
'''SS_Affine_list = SS_Affine_str.split(',')
        SS_Affine_list = [float(item) for item in SS_Affine_list]  # Example: convert to float
        SS_Affine=np.array(SS_Affine_list).reshape(2,3,2)
        SS_AffineRGB_str=request.form.get('SS_AffineRGB')
        SS_AffineRGB_hex=[str(item) for item in SS_AffineRGB_str]
        #print(SS_AffineRGB_hex)
        SS_AffineRGB=[]
        for i in SS_AffineRGB_hex:
            ii = i.strip().replace('#', '')
            ii = ii.replace(',', '')
            if ii:
                SS_AffineRGB.append(hex_to_rgb_3Dvector(ii))
        SS_AffineBOOL_str=request.form.get('SS_AffineBOOL')
        SS_AffineBOOL=[bool(item) for item in SS_AffineBOOL_str]
        #SS_AffineBOOL=np.array(SS_AffineBOOL).reshape(2,-1)
        Is_Affine=SS_IsActicate
        print('Title: SS_Affine_str\n'+SS_Affine_str+'\n')
        print('Title: SS_Affine\n'+SS_Affine+'\n')
        print('Title: SS_AffineRGB_str\n'+SS_AffineRGB_str+'\n')
        print('Title: SS_AffineRGB\n'+SS_AffineRGB+'\n')
        print('Title: SS_Affine_str\n'+SS_AffineBOOL_str+'\n')
        print('Title: SS_Affine\n'+SS_AffineBOOL+'\n')'''
 
SS_AffineBOOL_str=request.form.get('SS_AffineBOOL')
 
        print(SS_IsActicate)
 
      setSS_IsRGB(false)
 
    <button onClick={f_Edit}  className='C04id_Button'>Edited BW Image</button>
 
15
 
set           */}>Reset</button>
 
<button style={{marginTop:'15px',marginBottom:'0px',marginRight:'0px'}}  onClick= {()=>alert('Rain')/*f_Re
 
<div style={{display:'flex'}}>
<button style={{marginTop:'15px',marginBottom:'0px',marginRight:'10px'}} onClick= {()=>alert('Rain')/*f_Update          */}>Activate</button>
<button style={{marginTop:'15px',marginBottom:'0px',marginRight:'10px'}} onClick= {()=>alert('Rain')/*f_SetDeActivate   */}>Deactivate</button>
<button style={{marginTop:'15px',marginBottom:'0px',marginRight:'0px'}}  onClick= {()=>alert('Rain')/*f_Reset           */}>Reset</button>
</div>
 
</div>
 
    function f_Gray(){
      setSS_UseEffect(true)
    }

    function f_RGB(){
      setSS_UseEffect(true)
    }
 

      
 
//****************************************************************************
 
//****************************************************************************
 
          /*
          .catch((error) => {
              console.error('Error uploading file:', error);
          });*/
          
         /*
          let canvas = document.getElementById("C04id_Midjourney");
          let image_file = canvas.toDataURL()
          let body = {
            "content": image_file,
          }

          fetch('/def_OpenCV', {
            body: JSON.stringify(body),
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            }
          }).then(response => {
            console.log(response);
          }).catch(exception => {
            // fetch API problem: in case of CORS the server must send header "Access-Control-Allow-Origin":"*"
            console.log(exception);
          });*/
 
setSS_UseEffect(true)
 
setSS_UseEffect(true)
 
setSS_UseEffect(true)
 
,port=5001
 
SS_IsActivate:boolean[]
setSS_IsActivate:(S:boolean[])=>void,
 
SS_IsActivate,
setSS_IsActivate,
 
    SS_IsActivate={SS_IsActivate}
    setSS_IsActivate={setSS_IsActivate}
 
    SS_IsActivate={SS_IsActivate}
    setSS_IsActivate={setSS_IsActivate}
 
SS_IsActivate:boolean[]
setSS_IsActivate:(S:boolean[])=>void,
 
setSS_UseEffect,
SS_IsActivate,
setSS_IsActivate,
 
        /*
        const formData = new FormData();
        formData.append('file', file);

        fetch('/def_OpenCV', {
            method: 'POST',
            body: formData,
        })
        .then((response) => {
            return response.blob();
        })
        .then((data) => {
            const imageURL = URL.createObjectURL(data);
            setSS_Image(imageURL);
        })
        .catch((error) => {
            console.error('Error uploading file:', error);
        });*/
 
      setSS_UseEffect(true)
 
setSS_UseEffect(true)
 
setSS_UseEffect(true)
 
SS_IsShow={SS_IsShow}
 
 ={ }
 
   ,
 
   :boolean
 
     ={ }
 
   ,
 
   :boolean
 
f_Reset()
 
f_Reset()
 
    function f_Reset(){

    }
 
      //alert(SS_IsShow.toString())
 
      //alert(SS_IsShow.toString())
 
      //alert(SS_IsShow.toString())
 
      let ss_IsShow=[...SS_IsShow]
      setSS_IsActivate(ss_IsShow)
 
      setSS_IsShowEffect(true)
 
      if(SS_IsShowEffect===true){
        let ss_IsActivate=[...SS_IsActivate]
        setSS_IsShow(ss_IsActivate)
        setSS_IsShowEffect(false)
      }
      let ss_IsActivate=[]
      for(let i=0;i<SS_IsActivate.length;i++){
        ss_IsActivate.push(false)
      }
      setSS_IsActivate(ss_IsActivate)
 
SS_IsShowEffect:boolean
setSS_IsShowEffect:(S:boolean)=>void
 
SS_IsShowEffect,
setSS_IsShowEffect
 
setSS_IsShowEffect,
 
setSS_IsShowEffect:(S:boolean)=>void
 
SS_IsShowEffect:boolean
 
setSS_IsShowEffect:(S:boolean)=>void
 
SS_IsShowEffect:boolean
 
SS_IsShowEffect   ,
 
setSS_IsShowEffect={setSS_IsShowEffect}
 
SS_IsShowEffect  ={SS_IsShowEffect  }
 
    const [SS_IsShowEffect,setSS_IsShowEffect]=useState<boolean>(true)
 
setSS_UseEffect(true)
 
setSS_UseEffect(true)
 
setSS_UseEffect(true)
 
      alert(SS_IsShowEffect.toString())
 
      alert(SS_IsShowEffect.toString())
 
      alert(SS_IsShowEffect.toString())
 
      alert(SS_IsShowEffect.toString())
 
    const [SS_UseEffect2,setSS_UseEffect2]=useState<boolean>(true)
 
SS_IsShowEffect
 
setSS_IsShowEffect={SS_IsShowEffect }
 
      setSS_IsShow(ss_IsActivate)
 
    const [SS_IsAct,set_IsAct]=useState<boolean[]>(SS_IsActivate)
 
    const [SS_IsAct,set_IsAct]=useState<boolean[]>(SS_IsActivate)
 
setSS_IsShow:(S:boolean[])=>void
 
setSS_IsShow     ={setSS_IsShow     }
 
{/*
<tr>
    <td>Scale X</td>
    <td><input></input></td>
</tr>
<tr>
    <td><button>Ok</button></td>
    <td><button>Reset</button></td>
</tr>
<tr>
    <td>Scale Y</td>
    <td><input></input></td>
</tr>
<tr>
    <td><button>Ok</button></td>
    <td><button>Reset</button></td>
</tr>
<tr>
    <td>Rotate</td>
    <td><input></input></td>
</tr>
<tr>
    <td><button>Ok</button></td>
    <td><button>Reset</button></td>
</tr>
<tr>
    <td>Crop X 1</td>
    <td><input></input></td>
</tr>
<tr>
    <td><button>Ok</button></td>
    <td><button>Reset</button></td>
</tr>
<tr>
    <td>Crop X 2</td>
    <td><input></input></td>
</tr>
<tr>
    <td><button>Ok</button></td>
    <td><button>Reset</button></td>
</tr>
<tr>
    <td>Crop Y 1</td>
    <td><input></input></td>
</tr>
<tr>
    <td><button>Ok</button></td>
    <td><button>Reset</button></td>
</tr>
<tr>
    <td>Crop Y 2</td>
    <td><input></input></td>
</tr>
<tr>
    <td><button>Ok</button></td>
    <td><button>Reset</button></td>
    </tr>*/}
 
 style={{marginTop:'-3px',marginLeft:'10px'}}
 
,marginLeft:'10px'
 
<h1 className='C05id_Zoom' style={{fontSize:'14px'}}>{let_Status}</h1>
 
let let_Status='Error'
  if(SS_IsActivate[0]===true){
    let_Status='(Active)'
  }
  else{
    let_Status='(Inactive)'
  }
 
          
          //formData.append('IsRGB', SS_IsRGB);

          //fetch('/def_OpenCV')
          //.then(())

          /*
          // Print Hello World
          // https://www.geeksforgeeks.org/how-to-connect-reactjs-with-flask-api/
          fetch('/def_OpenCV')
          .then((res)=>
          res.json().then((data)=>alert(JSON.stringify(data)))
          )
          */

          /* Basic Post Request
          // https://stackoverflow.com/questions/72023176/how-to-send-post-request-from-react-to-flask-without-submit-button
          fetch("/Square", {
            method: "POST",
            body: JSON.stringify({IsRGB:SS_IsRGB.toString()}),
            headers: { "content-type": "application/json" },
          })
            .then((res) => {
              if (!res.ok) return Promise.reject(res);
              return res.json();
            })
            .then((data) => {
              alert(JSON.stringify(data))
              // do something with data ¯\_(ツ)_/¯
            })
            .catch(console.error);*/
 
set_IsAct(SS_IsActivate)
 
...SS_IsActivate
 
<button onClick={f_RGB}  className='C04id_Button'>Original BW Image</button>
 
ivate
 
, useEffect
 
            print('minn',minn)
            print('maxx',maxx)
            print('gray',gray)
            #print('If'+str(bool)+'==True:')
            #print('Then: mark=np.logical_and('+str(img)+'>'+str(minn)+','+str(img)+'<'+str(maxx))
 
        print('WhiteBackGround')
 
            print()
            print('minn',str(minn))
            print('maxx',str(maxx))
            print('gray',str(gray))
            print('bool',str(bool))
 
                print('Is_Thresholds',str(Is_Thresholds))
 
                    print(str(list_Minn))
                    print(str(list_Maxx))
                    print(str(list_Gray))
                    print(str(list_Bool))
 
        print('SS_Thresholds=SS_ScaleThresholds')
        for i in SS_Thresholds:
            print(i)
 
            print(i)
 
                    for min,max,gray,bool in zip(list_Minn,list_Maxx,list_Gray,list_Bool):
                        print()
                        print('min',min)
                        print('max',max)
                        print('gray',gray)
                        print('bool',bool)
 
,Threshold:TS_Threshold
 
let let_InputGrayScale=Math.round(255*(255*((SS_MaxHeight) - Threshold.PositionY)/(SS_MaxHeight))/250)
 
{Key:0,PositionY:0,IsDefault:false,Gray:'#000000'}
 
{Key:0,PositionY:0,IsDefault:false,Gray:'#000000'}
 

//****************************************************************************
// FUNCTION 01: Compute
//****************************************************************************
  function f_ComputeSquare(){
    let let_input = (document.getElementById('C04id_CropImageX1') as HTMLInputElement).value.toString();
    //alert(let_input)
    if(isNaN(parseFloat(let_input))){
      alert('This is not a number!')
    }
    else{
      // https://rapidapi.com/guides/fetch-api-react
      fetch("/def_Ysquare/"+let_input.toString())
        .then((res) => res.json())
        .then((data) => {
            //alert(JSON.stringify(data));
            setSS_HelloPy(data.py);
        });
    }
    }

  function f_ComputeCube(){
    let let_input = (document.getElementById('C04id_CropImageX1') as HTMLInputElement).value.toString();
    //alert(let_input)
    if(isNaN(parseFloat(let_input))){
      alert('This is not a number!')
    }
    else{
      // https://rapidapi.com/guides/fetch-api-react
      fetch("/def_Ycube/"+let_input.toString())
        .then((res) => res.json())
        .then((data) => {
            //alert(JSON.stringify(data));
            setSS_HelloPy(data.py);
        });
    }
    }
 
,ShowMustGoOn
 
def ShowMustGoOn(img):
    cv2.imshow("image", img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
 

'''

'''
 
def sharpen(image):
    k2=-0.1
    k1=-5
    k0=-(k2*16+k1*8)+1
    kernel = np.array([
        [k2,k2,k2,k2,k2,], 
        [k2,k1,k1,k1,k2,], 
        [k2,k1,k0,k1,k2,], 
        [k2,k1,k1,k1,k2,], 
        [k2,k2,k2,k2,k2,]
        ])
    # https://youtu.be/KuXjwB4LzSA?si=mt-leKGKjpMnJGfg
    # https://www.geeksforgeeks.org/python-opencv-filter2d-function/
    return cv2.filter2D(image, -1, kernel)
 
,sharpen
 

/*
/////////////////////////////////////////////////////////////////////////////////
*/
 
    position:relative;
 
{JSX_C03}
 
.I02id_Editor {
    background-color: burlywood;
    height: var(--index02_HeaderHeight);
    margin-top: 0px;
    padding-bottom: 1px;
}

.I02id_Editor h1 {
    font-size: 14px;
}
 
setSS_C02:(S:boolean)=>void
 
setSS_IsActivate ={setSS_IsActivate }
 
setSS_nDMatrix   ={setSS_nDMatrix   }
 
setSS_nDTable    ={setSS_nDTable    }
 
setSS_Affine     ={setSS_Affine     }
 
setSS_AffineSTR  ={setSS_AffineSTR  }
 
setSS_AffineRGB  ={setSS_AffineRGB  }
 
setSS_AffineBOOL ={setSS_AffineBOOL }
 
setSS_Image      ={setSS_Image      }
 
SS_Thresholds    ={SS_Thresholds    }
 
SS_Thresholds    ={SS_Thresholds    }
 
SS_OpenPanel     ={SS_OpenPanel     }
 
setSS_Zoom       ={setSS_Zoom       }
setSS_WidthImage ={setSS_WidthImage }
setSS_IsRGB      ={setSS_IsRGB      }
setSS_ImageFile  ={setSS_ImageFile  }
setSS_UseEffect  ={setSS_UseEffect  }
 
SS_IsActivate    ={SS_IsActivate    }
setSS_IsActivate ={setSS_IsActivate }
SS_nDMatrix      ={  SS_nDMatrix    }
setSS_nDMatrix   ={setSS_nDMatrix   }
SS_nDTable       ={SS_nDTable       }
setSS_nDTable    ={setSS_nDTable    }
SS_Affine        ={SS_Affine        }
setSS_Affine     ={setSS_Affine     }
SS_AffineSTR     ={SS_AffineSTR     }
setSS_AffineSTR  ={setSS_AffineSTR  }
SS_AffineRGB     ={SS_AffineRGB     }
setSS_AffineRGB  ={setSS_AffineRGB  }
SS_AffineBOOL    ={SS_AffineBOOL    }
setSS_AffineBOOL ={setSS_AffineBOOL }
SS_Image         ={SS_Image         }
setSS_Image      ={setSS_Image      }
SS_Zoom          ={SS_Zoom          }
SS_WidthImage    ={SS_WidthImage    }
SS_IsRGB         ={SS_IsRGB         }
SS_ImageFile     ={SS_ImageFile     }
SS_UseEffect     ={SS_UseEffect     }
setSS_Zoom       ={setSS_Zoom       }
setSS_WidthImage ={setSS_WidthImage }
setSS_IsRGB      ={setSS_IsRGB      }
setSS_ImageFile  ={setSS_ImageFile  }
setSS_UseEffect  ={setSS_UseEffect  }
SS_OpenPanel     ={SS_OpenPanel     }
setSS_OpenPanel  ={setSS_OpenPanel  }
SS_Thresholds    ={SS_Thresholds    }
setSS_Thresholds ={setSS_Thresholds }
 
, useLayoutEffect
 
 useState ,
 
const Ref_C04 = useRef<HTMLDivElement | null>(null);
 
  useEffect(() => {
//****************************************************************************
      let_fetchImage()
//****************************************************************************
      const let_CurrentWidthC04 = Ref_C04.current;
      let let_WidthC04=(document.getElementById('C04id_Canvas')as HTMLElement)

      if (let_CurrentWidthC04) {
      const let_ObsImageWidth = new ResizeObserver(() => { 
        setSS_WidthImage(let_WidthC04!.offsetWidth-1)
      })

      let_ObsImageWidth.observe(let_CurrentWidthC04);
      return () => {
          let_ObsImageWidth.disconnect();
      };
      }

      
  }, [SS_Image,SS_ImageFile,SS_IsRGB]);
 
  const Ref_C04 = useRef<HTMLDivElement | null>(null);
  let let_RightToolW=100
  useEffect(() => {
//****************************************************************************
      let_fetchImage()
//****************************************************************************
      const let_CurrentWidthC04 = Ref_C04.current;
      let let_WidthC04=(document.getElementById('C04id_Canvas')as HTMLElement)

      if (let_CurrentWidthC04) {
      const let_ObsImageWidth = new ResizeObserver(() => { 
        setSS_WidthImage(let_WidthC04!.offsetWidth-1)
      })

      let_ObsImageWidth.observe(let_CurrentWidthC04);
      return () => {
          let_ObsImageWidth.disconnect();
      };
      }

      
  }, [SS_Image,SS_ImageFile,SS_IsRGB]);
 

export default index02_Canvas;
 

export default index02_Canvas;
 
    /* 1 */    SS_IsActivate={SS_IsActivate}
    /* 2 */    setSS_IsActivate={setSS_IsActivate}
    /* 3 */    SS_Affine   ={SS_Affine   }
    /* 4 */    setSS_Affine={setSS_Affine}
    /* 5 */    SS_AffineSTR    ={SS_AffineSTR    }
    /* 6 */    setSS_AffineSTR ={setSS_AffineSTR }
    /* 7 */    SS_AffineRGB={SS_AffineRGB}
    /* 8 */    setSS_AffineRGB={setSS_AffineRGB}
    /* 9 */    SS_AffineBOOL={SS_AffineBOOL}
    /* 10*/    setSS_AffineBOOL={setSS_AffineBOOL}
    /* 11*/    SS_nDMatrix   ={SS_nDMatrix   }
    /* 12*/    setSS_nDMatrix={setSS_nDMatrix}
    /* 13*/    SS_nDTable    ={SS_nDTable    }
    /* 14*/    setSS_nDTable ={setSS_nDTable }
    /* 15*/    SS_Image={SS_Image}
    /* 16*/    setSS_Image={setSS_Image}
    /* 17*/    SS_Zoom      ={SS_Zoom      }
    /* 18*/    SS_WidthImage={SS_WidthImage}
    /* 19*/    SS_IsRGB     ={SS_IsRGB     }
    /* 20*/    SS_ImageFile ={SS_ImageFile }
    /* 21*/    SS_UseEffect ={SS_UseEffect }
    /* 22*/    setSS_Zoom      ={setSS_Zoom      }
    /* 23*/    setSS_WidthImage={setSS_WidthImage}
    /* 24*/    setSS_IsRGB     ={setSS_IsRGB     }
    /* 25*/    setSS_ImageFile ={setSS_ImageFile }
    /* 26*/    setSS_UseEffect ={setSS_UseEffect }
    /* 27*/    SS_OpenPanel={SS_OpenPanel}
    /* 28*/    setSS_OpenPanel={setSS_OpenPanel}
    /* 29*/    setSS_C02={setSS_C02}
    /* 30*/    SS_Thresholds={SS_Thresholds}
    /* 31*/    setSS_Thresholds={setSS_Thresholds}
 
SS_Thresholds:TS_Threshold[];
 
SS_OpenPanel:0|1|2;
 
setSS_Image:(S:string | null)=>void
 
setSS_AffineBOOL:(S:boolean[][])=>void
 
setSS_AffineRGB :(S:string[][])=>void
 
setSS_AffineSTR :(S:string[][][])=>void
 
setSS_Affine    :(S:number[][][])=>void
 
setSS_nDTable :(S:string[][])=>void
 
setSS_nDMatrix:(S:number[][])=>void
 
setSS_IsActivate:(S:boolean[])=>void
 
_Toolbar
 
import './U1_Affine.css'
 
TotalWidth,
 

#C04id_Canvas{
    display: grid;
}
#C04id_Body{
    background-color: black;
    display: flex;
}

#C04id_DivHeader {
    background-color: rgb(43, 226, 202);
    width: 100%;
}

.C04id_RightToolbar{
    margin-left:auto
}

/*
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
*/

:root {
    --C04_MarginTop: 0px;
    --C04_HeaderHeight: 100px;
}

.C04id_Header {
    font-size: 16px;
    margin-left: 5px;
    margin-top: var(--C04_MarginTop);
    margin-bottom: var(--C04_MarginTop);
    height: 30px;
}

.C04id_Editor {
    background-color: burlywood;
    height: var(--C04_HeaderHeight);
    margin-top: 0px;
    padding-bottom: 1px;
}

.C04id_Editor h1 {
    font-size: 14px;
}
 
/*
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
*/
 
    /*
    display: flex;
    width:50%;
    
    margin-left:auto;
    position: fixed;
    */
 
// Both for C04id_DivHeader, C_TopButton.tsx, header button
 

:root{
    --C04_RightToolW:100px;
}
 
_Toolbar
 
_Toolbar
 
_Toolbar
 
import TS_Threshold from '../T03_Threshold/An_Index';
 
import C05_Convolution from '../C05_Convolution/index';
 
import U_Zoom from './Coms_Toolbar/U1_Zoom';
import U_IsRGB from './Coms_Toolbar/U1_IsRGB';
import U_UpdateImage from './Coms_Toolbar/U_UpdateImage';
 
import U_UpdateImage from './Coms_Toolbar/U_UpdateImage';
 
import U1_ShapeTextSetting from './Coms_Toolbar/U1_ShapeTextSetting'
 
import U1_2DMatrix from './Coms_Toolbar/U2_Affine'
 
import U2_Convolution from './Coms_Toolbar/U2_Convolution';
 
import U1_Affine from './Coms_Toolbar/U1_Affine';
 

  let JSX_ImageProcessing=
 
<C05_Convolution
    SS_IsActivate={SS_IsActivate}
    setSS_IsActivate={setSS_IsActivate}
    SS_ImageProcessing={SS_ImageProcessing}
    SS_Thresholds={SS_Thresholds}
    setSS_Thresholds={setSS_Thresholds}
    SS_Affine={SS_Affine}
    setSS_Affine={setSS_Affine}
    SS_AffineSTR={SS_AffineSTR}
    setSS_AffineSTR={setSS_AffineSTR}
    SS_AffineRGB={SS_AffineRGB}
    setSS_AffineRGB={setSS_AffineRGB}
    SS_AffineBOOL={SS_AffineBOOL}
    setSS_AffineBOOL={setSS_AffineBOOL}
    SS_nDMatrix   ={SS_nDMatrix   }
    setSS_nDMatrix={setSS_nDMatrix}
    SS_nDTable    ={SS_nDTable    }
    setSS_nDTable ={setSS_nDTable }
    />
 

  let JSX_ImageProcessing=<C05_Convolution
    SS_IsActivate={SS_IsActivate}
    setSS_IsActivate={setSS_IsActivate}
    SS_ImageProcessing={SS_ImageProcessing}
    SS_Thresholds={SS_Thresholds}
    setSS_Thresholds={setSS_Thresholds}
    SS_Affine={SS_Affine}
    setSS_Affine={setSS_Affine}
    SS_AffineSTR={SS_AffineSTR}
    setSS_AffineSTR={setSS_AffineSTR}
    SS_AffineRGB={SS_AffineRGB}
    setSS_AffineRGB={setSS_AffineRGB}
    SS_AffineBOOL={SS_AffineBOOL}
    setSS_AffineBOOL={setSS_AffineBOOL}
    SS_nDMatrix   ={SS_nDMatrix   }
    setSS_nDMatrix={setSS_nDMatrix}
    SS_nDTable    ={SS_nDTable    }
    setSS_nDTable ={setSS_nDTable }
    />
 
/Coms_Toolbar
 
<div className='C04id_Toolbar'
    style={{
      width:`${200}px`,
      height:`calc(100vh - ${143+20}px)`,
      }}>
    
    <div style={{display:'flex',height:'100px'}}>
      
      <U1_Zoom
      SS_Zoom={SS_Zoom}
      setSS_Zoom={setSS_Zoom}/>
    {//****************************************************************************
    // RGB or Gray
    //****************************************************************************
    }
    <U1_IsRGB
    SS_IsRGB={SS_IsRGB}
    setSS_UseEffect={setSS_UseEffect}
    setSS_IsRGB={setSS_IsRGB}/>

    </div>

    {//****************************************************************************
    // Edit Image
    //****************************************************************************
    }
    <hr/>
    <U1_UpdateImage
    SS_IsActivate={SS_IsActivate}
    setSS_IsActivate={setSS_IsActivate}
    setSS_UseEffect={setSS_UseEffect}
    />
    <hr/>
    <U1_Affine
    SS_IsActivate={SS_IsActivate}
    setSS_IsActivate={setSS_IsActivate}
    setSS_UseEffect={setSS_UseEffect}
    />
{/*    <U1_EditImage/>

    //****************************************************************************
    // Edit Image Setting
    //****************************************************************************
  }
  <U1_ShapeTextSetting
  SS_IsShapeSetting={SS_IsShapeSetting}
  setSS_IsShapeSetting={setSS_IsShapeSetting}
/>*/}
  
  {/*
  <hr style={{marginTop:'20px'}}/>
  <U1_2DMatrix
  SS_3DMatrix ={SS_3DMatrix   }  
setSS_3DMatrix={setSS_3DMatrix}
SS_3DTable    ={SS_3DTable    }
setSS_3DTable ={setSS_3DTable }/>*/}
  </div>
  {//****************************************************************************
    // Convolution or Threshold
    //****************************************************************************
  }
  {JSX_ImageProcessingDIV}
 
  const [SS_IsShapeSetting,setSS_IsShapeSetting]=useState<boolean>(true)
  const [SS_ImageProcessing,setSS_ImageProcessing]=useState<0|1>(0)
  // 0 Threshold
  // 1 Convolution
  // 2 FFT
  // 3 2D Linear Transformation
  // 4 ...

  let JSX_ImageProcessing=<C05_Convolution
    SS_IsActivate={SS_IsActivate}
    setSS_IsActivate={setSS_IsActivate}
    SS_ImageProcessing={SS_ImageProcessing}
    SS_Thresholds={SS_Thresholds}
    setSS_Thresholds={setSS_Thresholds}
    SS_Affine={SS_Affine}
    setSS_Affine={setSS_Affine}
    SS_AffineSTR={SS_AffineSTR}
    setSS_AffineSTR={setSS_AffineSTR}
    SS_AffineRGB={SS_AffineRGB}
    setSS_AffineRGB={setSS_AffineRGB}
    SS_AffineBOOL={SS_AffineBOOL}
    setSS_AffineBOOL={setSS_AffineBOOL}
    SS_nDMatrix   ={SS_nDMatrix   }
    setSS_nDMatrix={setSS_nDMatrix}
    SS_nDTable    ={SS_nDTable    }
    setSS_nDTable ={setSS_nDTable }
    />

  let JSX_ImageProcessingDIV=<></>
  if(SS_OpenPanel===1){
    JSX_ImageProcessingDIV=<div style={{display:'grid'}}>
      <div style={{display:'flex',height:'40px'}}>
        <button onClick={()=>{setSS_ImageProcessing(0)}}>Threshold</button>
        <button onClick={()=>{setSS_ImageProcessing(1)}}>Convolution</button>
      </div>
      {JSX_ImageProcessing}
  </div>
  }else{
    JSX_ImageProcessingDIV=<></>
  }

 

  if(SS_ImageProcessing===0){
    JSX_ImageProcessing=<C05_Convolution
    SS_IsActivate={SS_IsActivate}
    setSS_IsActivate={setSS_IsActivate}
        SS_Thresholds={SS_Thresholds}
        setSS_Thresholds={setSS_Thresholds}/>
  }
  else{
    JSX_ImageProcessing=<U2_Convolution
SS_IsActivate={SS_IsActivate}
setSS_IsActivate={setSS_IsActivate}
SS_Affine={SS_Affine}
setSS_Affine={setSS_Affine}
SS_AffineSTR={SS_AffineSTR}
setSS_AffineSTR={setSS_AffineSTR}
SS_AffineRGB={SS_AffineRGB}
setSS_AffineRGB={setSS_AffineRGB}
SS_AffineBOOL={SS_AffineBOOL}
setSS_AffineBOOL={setSS_AffineBOOL}
SS_nDMatrix   ={SS_nDMatrix   }
setSS_nDMatrix={setSS_nDMatrix}
SS_nDTable    ={SS_nDTable    }
setSS_nDTable ={setSS_nDTable }
/>
  }
 
import './index02_Canvas_1.css'
 
// Both for C04id_DivHeader, C_TopButton.tsx, header button
 

:root{
    --C04_RightToolW:100px;
}
 
import TS_Row from './T01_Row/An_Index';
 
import Example01 from './Components/index01';
import Example02 from './Components/index02'
 
/Users/imac/Desktop/SoloOpenSourceProject/JOCR
 
*/}
 
_str
 
_str
 
_str
 
_str
 
_str
 
_str
 
</div>
 
</div>
 
<select id="cars" name="cars" className='C04id_EditOkSet'>
  <option value="volvo">Thai</option>
  <option value="volvo">English</option>
</select>
 
  <option value="volvo">Rectangle frame</option>
  <option value="saab">Circle</option>
  <option value="volvo">Circle frame</option>
  <option value="mercedes">Arrow</option>
  <option value="mercedes">2 Ways Arrow</option>
  <option value="audi">Line</option>
  <option value="audi">LineX</option>
  <option value="audi">LineY</option>
 
<input id='C04id_CropImageX1'></input>
    {
      /*<button onClick={f_ComputeSquare} style={{marginLeft:'2px'}}>Compute</button>
    <button onClick={f_ComputeCube} style={{marginLeft:'2px'}}>Compute3</button>
    <h1>{SS_HelloPy}</h1>*/}
 
.C04id_Scalar h1{
    font-size: 12px;
}
 
    alert(SS_AffineBOOL)
 
    alert('Updated')
 
1, pts2
 
1,pts2
 
[0],SS_Affine[1]
 
print('Title: SS_Affine_str\n'+SS_Affine_str+'\n')
 

<hr style={{visibility:'hidden'}}/>
 
<tr>
    <th style={{width:'100px'}}                  >Type</th>
    <th style={{width:'100px',marginLeft:'10px'}}>Input</th>
    <th>Update</th>
</tr>
<tr>
    <td></td>
    <td></td>
    <td></td>
</tr>
 
<hr style={{visibility:'hidden'}} />
 
<hr style={{visibility:'hidden'}} />
 
</table>
 
    <th>Ok</th>
 
    <td><button>Reset</button></td>
 
    <td><button>Reset</button></td>
 
<tr>
    <td><button>Ok</button></td>
    <td><button>Reset</button></td>
</tr>
 
    <td><button>Ok</button></td>
    <td><button>Reset</button></td>
 
    <td><button>Ok</button></td>
    <td><button>Reset</button></td>
 
    <td><button>Ok</button></td>
    <td><button>Reset</button></td>
 
    <td><button>Ok</button></td>
    <td><button>Reset</button></td>
 
    <th>Ok</th>
    <th>Reset</th>
 
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Happy New Year</h1>
    <button onClick={f_Gray} className='C04id_Button'>Gray</button>
    <button onClick={f_RGB}  className='C04id_Button'>RGB</button>
 
    let let_State='Color'
    if(SS_IsRGB===true){let_State='Color'}
    else{let_State='Gray'}
 
      setSS_IsRGB(true)
 
      setSS_IsRGB(false)
 
setSS_IsRGB:(S:boolean)=>void
 
SS_IsRGB:boolean
 
SS_IsRGB,
 
setSS_IsRGB
 
[0]
 
tuple
 
        
 
        // Transformed Point
        
 
        
 
*10+id2
 
    alert(ss_AffineSTR[id0][id1][id2])
 
    alert(ss_AffineSTR)
 
    //alert(let_input)
 
    pts1 = np.float32([[50, 50],
                   [200, 50], 
                   [50, 200]])
 
    pts2 = np.float32([[10, 100],
                       [200, 50], 
                       [100, 250]])
 
            
            #if not Is_...
            #let_Img = AffineTransformations(let_Img)
 
if Is_Affine==True:
 
        def hex_to_rgb_vector(hex_color):
            rgba = mcolors.to_rgba(hex_color)
            rgb = rgba[:3]
            return rgb[0]
 
        '''
        # "[['Mu','Che','Ta'],['Umumy','Ehchos','Attat']]" => [['Mu','Che','Ta'],['Umumy','Ehchos','Attat']]
        # Do this in Python
        '''
 
        # ['[a','b','c]'] => ['a','b,'c']
 
item[1:-1] if item.startswith('[') and item.endswith(']') else item for item in SS_AffineRGB_list]
 
        SS_AffineRGB_list=SS_AffineRGB_str.split(',')
 
true
 
        '''
        # "[[false,false,false],[true,false,true]]" => [[False,False,False],[True,False,True]]
        # Do this in Python
        '''
 
Show
 
    let ss_AffineBOOL=[...SS_AffineBOOL]
 
    
 
      
 
    
 
      
 
Show
 
      //let let_UpdateThresholds=U03_SetColor(Threshold,ss_Thresholds,let_input)
 
//[0]+let_input[1]+let_input[2]+let_input[1]+let_input[2]+let_input[1]+let_input[2]

      //let let_Show=(document.getElementById('C04id_AffineShow'+Threshold.Key.toString())as HTMLInputElement)
      //let_Show!.style.backgroundColor=let_input
 
       
 
*10+id2
 
,id2:number
 
Threshold.Key
 
setSS_nDTable(ss_nDTable)
 
setSS_nDTable(SS_nDTable)
 
      function f_SetActivate(){
        let ss_IsActivate=[...SS_IsActivate]
        ss_IsActivate[0]=true
        setSS_IsActivate(ss_IsActivate)
      }
 
   <button style={{marginTop:'10px',marginLeft:'10px'}} onClick={f_DeleteAll}>Reset</button>
 
      function f_DeleteAll(){
        setSS_ThisThreshold({Key:0,PositionY:0,IsDefault:false,Gray:'#000000'})
        setSS_Thresholds([{Key:0,PositionY:0,IsDefault:false,Gray:'#000000'}])
      }
 
,marginLeft:'auto'
 
<h1 className='C04id_Zoom' style={{marginTop:'10px',fontSize:'14px'}}>Gray Threshold</h1>
 
        alert('eeee')
 
not 
 
not 
 
            else:
                SS_IsActicate.append(False)
 
if 'true' in i:
                
 
)
 
SS_IsActivate:boolean[]
setSS_IsActivate:(S:boolean)=>void
 
            # convert let_File to Black and White Image if let_IsRGB === 'false'
 
 style={{marginTop:'10px',marginRight:'5px'}}
 
,marginRight:'10px',marginLeft:'-140px'
 
,
 
*100
 
    //setSS_AffineSTR([
    //  [
    //    ['1','2']
    //  ],
    //  [['1']],
    //  [['1']]])
 
setSS_AffineRGB={setSS_AffineRGB}
 
setSS_Affine={setSS_Affine}
 
setSS_AffineSTR={setSS_AffineSTR}
 


 
// shape = (2,3,2)
 
<div style={{display:'inline-grid'}}>
 
</div>
 
</div>
 
  //
 
    BOOL:
 
</div>
 
style={{marginTop:'-10px'}}
 
marginRight:'100px'
 
style={{backgroundColor:'#33AAFF'}}
 
,borderTop:'0px'
 
-5
 
height:`175px`,
 
<hr/>
 
<hr style={{width:'90%'}} />
 
<hr style={{width:'90%'}} />
 
marginTop:'-10px'
 
<h1>s</h1>
 
</div>
 
<select id="cars" name="cars" className='C04id_Convolution'>
  <option value="volvo">Scale</option>
  <option value="volvo">Scale X</option>
  <option value="saab">Scale Y</option>
</select>
<input></input>
<button style={{marginTop:'10px'}}>Set</button>
 
  <option value="volvo">Circle frame</option>
  <option value="mercedes">Arrow</option>
  <option value="mercedes">2 Ways Arrow</option>
  <option value="audi">Line</option>
  <option value="audi">LineX</option>
  <option value="audi">LineY</option>
 
,marginRight:'5px'
 
,marginRight:'10px',marginLeft:'-140px'
 
,marginRight:'10px',marginLeft:'-140px'
 
<input type='color' value={point.RGB}></input>
 
<tr>
<th><h1>Point</h1></th>
<th><h1>X</h1></th>
<th><h1>Y</h1></th>
<th><h1>RGB</h1></th>
</tr>
 

<h1 style={{fontSize:'16px'}}>Selected Point</h1>
<tr>
<th><h1>Point</h1></th>
<th><h1>X</h1></th>
<th><h1>Y</h1></th>
<th><h1>RGB</h1></th>
</tr>
 
<tr>
<th><h1>Point</h1></th>
<th><h1>X</h1></th>
<th><h1>Y</h1></th>
<th><h1>RGB</h1></th>
</tr>
 
<tr>
<h1 style={{marginRight:'10px'}}>Point 1</h1>
<td><input></input></td>
<td><input></input></td>
<td><input type='color'></input></td>
</tr>

<tr>
<h1 style={{marginRight:'10px'}}>Point 2</h1>
<td><input></input></td>
<td><input></input></td>
<td><input type='color'></input></td>
</tr>

<tr>
<h1 style={{marginRight:'10px'}}>Point 3</h1>
<td><input></input></td>
<td><input></input></td>
<td><input type='color'></input></td>
</tr>
 
<tr>
<h1 style={{marginRight:'10px'}}>Point 1</h1>
<td><input></input></td>
<td><input></input></td>
<td><input type='color'></input></td>
</tr>

<tr>
<h1 style={{marginRight:'10px'}}>Point 2</h1>
<td><input></input></td>
<td><input></input></td>
<td><input type='color'></input></td>
</tr>

<tr>
<h1 style={{marginRight:'10px'}}>Point 3</h1>
<td><input></input></td>
<td><input></input></td>
<td><input type='color'></input></td>
</tr>
 
 /*
  let let_TotalSize=3
  let let_TotalSize2=2

  let JSX_Con=[]
  const let_Width='250px'
  for(let i=0;i<let_TotalSize2;i++){
    let JSX_Kernals=[]
    for(let j=0;j<let_TotalSize;j++){
      JSX_Kernals.push([i,j])
    }
    JSX_Con.push(JSX_Kernals)
  }
  let JSX_Convolution=JSX_Con.map((i)=>(<tr>{i.map((j)=>(<td><input 
    onChange={()=>f_OnChange(j[0],j[1])}
    value={(SS_nDTable[j[0]][j[1]]).toString()} 
    id={'C04id_warpAffine'+(j[0]*10+j[1]).toString()}></input></td>))}</tr>))

//****************************************************************************
// FUNCTION_00: On Change
//****************************************************************************
    function f_OnChange(id0:number,id1:number){
        let let_input=(document.getElementById('C04id_warpAffine'+(id0*10+id1).toString()) as HTMLInputElement).value.toString();
        let ss_nDTable=[...SS_nDTable]
        ss_nDTable[id0][id1]=let_input
        setSS_nDTable(ss_nDTable);
        (document.getElementById('C04id_warpAffine'+(id0*10+id1).toString()) as HTMLInputElement).value = let_input;
      }

//****************************************************************************
// FUNCTION_01: Reset
//****************************************************************************
      function f_Reset(){
        setSS_nDMatrix([[1,0,0],[0,1,0]])
        setSS_nDTable([['1','0','0'],['0','1','0']])
      }

//****************************************************************************
// FUNCTION_01: Update Matrix
//****************************************************************************
        function f_Update(){
          let ss_nDMatrix=[...SS_nDMatrix]
          let ss_nDTable=[... SS_nDTable]
          for(let i=0;i<let_TotalSize2;i++){
          for(let j=0;j<let_TotalSize;j++){
            if(isNaN(parseFloat(SS_nDTable[i][j]))===false){
              //alert(SS_nDTable[i])
              ss_nDMatrix[i][j]=parseFloat(ss_nDTable[i][j])
            }
            else{
              ss_nDMatrix[i][j]=0
            }}
          }
          setSS_nDMatrix(ss_nDMatrix)

          for(let i=0;i<let_TotalSize2;i++){
          for(let j=0;j<let_TotalSize;j++){
            if(isNaN(parseFloat(SS_nDTable[i][j]))){
              SS_nDTable[i][j]='1'//let_2DMatrix[i].toString()
            }
          }
          setSS_nDTable(SS_nDTable)
        }
        }*/
 
/*
  for(let k=0;k<ss_Affine.length;k++){
    for(let i=0;i<ss_Affine[0].length;i++){
    let_Vector=[]
    for(let j=0;j<ss_Affine[0][0].length;j++){
      let_Vector.push(let_SelectedPoint[i][j])
    }

    if(k===0){
      let_SelectedPoint.push(
        {
          Vector:let_Vector,
          RGB:SS_AffineRGB[i]
        }
      )
    }}
    else{
      let_TransformedPoint.push(
        {
          Vector:let_Vector,
          RGB:SS_AffineRGB
        }
      )
    }
  }*/
 
  let let_SelectedP=[]
  let let_Vector=[]
 
  let
 
    
 
let let_Vector=[]
 
[0]
 
SS_Affine[1]
 
SS_Affine[0]
 
let JSX_SelectedPoint=let_SelectedPoint.map()
 
onClick={f_Update}
 
 onClick={alert}
 
          formData.append('LinearMap',SS_3DMatrix.toString())
 
,
 
SS_3DMatrix:number[][]
setSS_3DMatrix:(S:number[][])=>void
SS_3DTable:string[][]
setSS_3DTable:(S:string[][])=>void
 
SS_3DMatrix   ,
setSS_3DMatrix,
SS_3DTable    ,
setSS_3DTable ,
 
_SS
 
_SS
 
_SS
 
<hr style={{width:'90%'}}/>
 
X
 
RGB
 
Point
 
<h1>Y:</h1>
 
<h1>X:</h1>
 
<div style={{width:'10px'}}></div>
 
    // https://medium.com/@conghung43/image-projective-transformation-with-opencv-python-f0028aaf2b6d
    // https://docs.opencv.org/4.x/d4/d61/tutorial_warp_affine.html ?
 
</tr>
 
let_Img = AffineTransformations(let_Img)
 
let_Img = AffineTransformations(let_Img)
 
    img_src_coordinate = np.array([[0,0],[0,h],[w,0],[w,h]])

    pass
 
rows, cols, ch = let_Img.shape
 
,['0','0','1']
 
,[0,0,1]
 
,['0','0','1']
 
,[0,0,1]
 
         ['0','0','0','0','0']
 
,0,0
 
         [0,0,1,0,0],
         [0,0,0,0,0],
         [0,0,0,0,0]
 
    # Get source image parameter: 
    #[[left,top], [left,bottom], [right, top], [right, bottom]]
 
 transformation
 
import U1_2DMatrix from './U2_2DMatrix'
 
calc(100vh - 40px - ${(143+20)}px 
 
<hr/>
  <U1_2DMatrix
SS_nDMatrix ={SS_3DMatrix   }  
setSS_nDMatrix={setSS_3DMatrix}
SS_nDTable    ={SS_3DTable    }
setSS_nDTable ={setSS_3DTable }/>
 
  <U1_2DMatrix
SS_nDMatrix ={SS_3DMatrix   }  
setSS_nDMatrix={setSS_3DMatrix}
SS_nDTable    ={SS_3DTable    }
setSS_nDTable ={setSS_3DTable }/>
</div>
 
SS_3DMatrix:number[][]
setSS_3DMatrix:(S:number[][])=>void
SS_3DTable:string[][]
setSS_3DTable:(S:string[][])=>void
 
SS_3DMatrix   ,
setSS_3DMatrix,
SS_3DTable    ,
setSS_3DTable ,
 
import { useState, useEffect } from 'react'
 
SS_nDMatrix   :number[][]
setSS_nDMatrix:(S:number[][])=>void
SS_nDTable    :string[][]
setSS_nDTable :(S:string[][])=>void
 
SS_nDMatrix   ,
setSS_nDMatrix,
SS_nDTable    ,
setSS_nDTable 
 
import { useState, useEffect } from 'react'
 
alert(JSON.stringify(SS_Thresholds))
 
Threshold
 

      //alert(let_input[0])
      
      //let_target!.value=let_input
 
      //alert(let_InputGrayHex)
 
      // let_X=Math.round(255*(255*((SS_MaxHeight) - Threshold.PositionY)/(SS_MaxHeight))/250)
      // set 'linear-gradient(let_X, black)'
      //backgroundImage: Threshold.IsDefault?'':`linear-gradient(${let_InputGrayHex}, #000000)`,
      //backgroundImage:`linear-gradient(to bottom,${let_InputGrayHex} 100%, #000000 100%)`,
 
+let_InputGrayHex+let_InputGrayHex
 
100
 
#ffffff
 
 Threshold.IsDefault?'':
 
let let_InputGrayScale=Math.round(255*(255*((SS_MaxHeight) - Threshold.PositionY)/(SS_MaxHeight))/250)
 
Math.round(255*(255*((SS_MaxHeight) - Threshold.PositionY)/(SS_MaxHeight))/250)
          }
 
white
 
#aaaaaa
 
'linear-gradient(white, black)'
 
      color: 'transparent',
 
        for i in range(len(let_Thresholds)):
            list_Bool.append(i[1])
 
                if len(list_Minn)>=1:
 
            
 
if let_Thresholds[i][1]==True:
                let_Threshold.append(let_Thresholds)
 
         ['0','0','0'],
         ['0','0','0']
 
         [0,0,0,0,0],
         [0,0,0,0,0]
 
1,0,0,1
 
<hr style={{marginTop:'20px'}}/>
 
<hr style={{marginTop:'20px'}}/>
 
  <hr style={{marginTop:'20px'}}/>

 
<U1_2DMatrix
  SS_2DMatrix ={SS_2DMatrix   }  
setSS_2DMatrix={setSS_2DMatrix}
SS_2DTable    ={SS_2DTable    }
setSS_2DTable ={setSS_2DTable }/>
 
let_Gray=hex_to_rgb_vector(let_Thresholds[i][2])
 
            if let_Thresholds[i][1]==True
 
                list_Gray.append()
 
            elif  i!=0 and let_Thresholds[i][1]==True:
                list_Maxx.append(let_Thresholds[i][0])
                list_Gray.append()
                list_Minn.append(let_Thresholds[i-1][0])
 
hex_to_rgb_vector(let_Thresholds[i][2])
 
          alert(SS_nDMatrix)
 
            #list_Maxx.append(i)
 
                list_Minn.append(let_Thresholds[i-1][2])
 
    #img[img>=Start+((RangeMax)*Step)/A1]=255
 
    RangeMax=100
    A1=1
    Step=1
    Start=0
    for i in range(RangeMax):
      mark=np.logical_and(img>Start+(i*Step)/A1,img<Start+((i+1)*Step)/A1)
      img[mark]=Start+(i*Step)/A1
 
img<maxx
 
img<Start+((i+1)*Step)/A1
 
/A1
 
    
    # Extract RGB values
 
        # Convert hex color to RGBA
 
    #kernel = np.array([[-0.1,-0.1,-0.1], [-0.1,1.8,-0.1], [-0.1,-0.1,-0.1]])
    #k3=0    # 24
 
    
    '''
    k0=-0.02    # 19
    k1=-0.05    # 13
    k2=-2     # 8
    k3=18        # 1
    
    kernel = np.array([
        [k0,k0,k0,k0,k0,k0,k0], 
        [k0,k1,k1,k1,k1,k1,k0], 
        [k0,k1,k2,k2,k2,k1,k0], 
        [k0,k1,k2,k3,k2,k1,k0], 
        [k0,k1,k2,k2,k2,k1,k0], 
        [k0,k1,k1,k1,k1,k1,k0],
        [k0,k0,k0,k0,k0,k0,k0]
        ])'''
    #kernel = np.array([[0.5,0,-0.5], [0.5,0,-0.5], [0.5,0,-0.5]])
    #kernel = (1/(10**2))*np.ones((10,10))
 
        # convert to list
 

        # Convert the list elements to appropriate types if needed
 
set
 

        pass
 
          alert(let_ImageJson)
 
.get('file').read()
 
.get('file').read()
 
.processed_image
 
//  
 
'''
 
'''
 
rocessed_
 
          let let_Obs:any = {};
          formData.forEach((value, key) => let_Obs[key] = value);
 
          /*
 
alert(JSON.stringify(response))  
 
{'message':
 
file:SS_ImageFile,
 
file:SS_ImageFile,
 
{'Say':
 
    with open(path_to_file, 'rb') as my_file:
        files = {'file': my_file}
        payload = {'data1': 'foo', 'data2': 'bar'}
        r = requests.post(data=payload, files=files)
 
            # Not Working
 
        #Let_JSON  = request.get_json()
        #let_File = Let_JSON.get('file')
 
            #let_Load = json.loads(Let_JSON)
            #imdata = base64.b64decode(let_Load['image'])
            #im = pickle.loads(imdata)
            #return im
            #pass
 
            with open(Let_JSON)
 
            print('Emma')
 
,"r"
 
['file']
 
setSS_UseEffect(false)
 
const formData = new FormData();
          formData.append('file', SS_ImageFile);
 
              //body:JSON.stringify({file:formData}),
 
 file:
 
JSON.stringify({
                
 
                //IsRGB:SS_IsRGB
              })
 
        #let_JSON=request.json['IsRGB']
        #IsRGB=request.files['IsRGB']
 
        #print(request.files)
 
CR/jocreactypescript/flask/TheNowNow.png'
 
    #path = '/Users/imac/Desktop/SoloOpenSourceProject/JO
 
    
 
            #if IsRGB=='false':
            #    let_Img = get_grayscale(let_Img)
 
        
 
    #let_File  = Let_JSON.get('num')
    #let_IsRGB = Let_JSON.get('IsRGB')
    #if let_IsRGB=='false':
    #    return {'messenger':int(let_File)**3}
    #else:
    #    return {'messenger':int(let_File)**2}
 
int(let_File)**2
 
        let_File  = Let_JSON.get('num')
 
num:'33',
 
Ge
 
ourceProject/JOCR/jocreactypescript/flask/TheNowNow.png'
 
    #path = '/Users/imac/Desktop/SoloOpenS
 
#let_IsRGB = Let_JSON.get('IsRGB')
        return {'messenger':33}
    
        '''
 
#path = '/Users/imac/Desktop/SoloOpenSourceProject/JOCR/jocreactypescript/flask/TheNowNow.png'
    #if request.method == 'POST':
        # https://stackoverflow.com/questions/43218413/get-data-json-in-flask
        #Let_JSON  = request.get_json()
        #let_IsRGB = Let_JSON.get('IsRGB')
        return {'messenger':33}
    
        '''
 
    # By ChatGPT
    #path = '/Users/imac/Desktop/SoloOpenSourceProject/JOCR/jocreactypescript/flask/TheNowNow.png'
    #if request.method == 'POST':
        # https://stackoverflow.com/questions/43218413/get-data-json-in-flask
        #Let_JSON  = request.get_json()
        #let_IsRGB = Let_JSON.get('IsRGB')
 
.messenger
 
)
          
 
jsonify(
 
Hello
 
        let_File=request.files['file']
        IsRGB = request.files['IsRGB']
 
          formData.append('IsRGB', SS_IsRGB.toString());
 
    todo_data = request.get_json()
 
json.load(
 
json.load(
 
    alert(SS_IsRGB)
 
'data', 
 
SS_ImageFile
 
IsRGB
 
&<IsRGB>
 
&'+SS_IsRGB.toString()
 
@app.route('/<Input>')#,methods=['Get'])
def def_OutPut(Input):
    var=Input
    return jsonify({'py':var})

@app.route('/def_Update')#,methods=['Get'])
def def_Update():
    return jsonify({'py':100})

# y = x^2
# https://www.geeksforgeeks.org/flask-app-routing/
@app.route('/def_Ysquare/<Input>')#,methods=['Get'])
def def_Ysquare(Input):
    var=float(Input)**2
    return jsonify({'py':var})

@app.route('/def_Ycube/<Input>')#,methods=['Get'])
def def_Ycube(Input):
    var=float(Input)**3
    return jsonify({'py':var})

@app.route('/def_TheGreatestShowMustGoOn')#,methods=['Get'])
def def_TheGreatestShowMustGoOn():
    # By ChatGPT
    path = '/Users/imac/Desktop/SoloOpenSourceProject/JOCR/jocreactypescript/flask/TheNowNow.png'
    original_img = cv2.imread(path)
    grayscale_img = get_grayscale(original_img)
    img_bytes = cv2.imencode('.png', grayscale_img)[1].tobytes()
    response = Response(img_bytes, content_type='image/png')
    return response

'''
def def_TheGreatestShowMustGoOn():
    path='/Users/imac/Desktop/SoloOpenSourceProject/JOCR/jocreactypescript/flask/TheNowNow.png'
    img = cv2.imread(path)
    with open(path, 'rb') as file:
        img = get_grayscale(file)
        img_bytes = img.read()
    #img = get_grayscale(img)
    #img = sharpen(img)
    #img = WhiteBackGround(img)
    ##img=img[1100:,:]#600:2000]   
    ## To convert from OpenCV image to PIL image use:
    ## https://stackoverflow.com/questions/43232813/convert-opencv-image-format-to-pil-image-format
    #img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    #img = Image.fromarray(img)
    # Convert the PIL image to bytes
    #img_bytes = img.tobytes()
#
    ## Set appropriate content type in response headers
    response = Response(img_bytes, content_type='image/png')
    return response'''
#****************************************************************************
 
const [SS_Image     , setSS_Image] = useState<string | null>(null);  
 
SS_Image:string | null
 
  /*
  useEffect(()=>{
    let let_Rows =[]
    let let_Texts=[]
    if(SS_nDMatrix.length===1){
      for(let i=0;i<let_TotalSize;i++){
        let let_Row=[]
        let let_Text=[]
      for(let j=0;j<let_TotalSize;j++){
        if(i===2 && j===2){
          let_Row.push(1)
        let_Text.push('1')
        }
        else{
        let_Row.push(0)
        let_Text.push('0')
        }
      }
      let_Rows.push(let_Row)
      let_Texts.push(let_Text)
      }
      setSS_nDMatrix(let_Rows )
      setSS_nDTable(let_Texts)
    }
  },[])*/
 

          let let_nDMatrix=[...SS_nDMatrix]
 

          let let_2DMatrix=[...SS_2DMatrix]
 
//****************************************************************************
// OUTPUT
//****************************************************************************
    
 
[[1]]
 
  },[])
 
  useEffect(()=>{
 
*10+
 
Kerna
 
]
 
let let_TotalSize=5
 
  let JSX_Kernals=[]
 
  let JSX_Kernal=(Id:number)=>{
    return (
      <td>
        <h1>sss</h1>
        <input id={'C04id_Kernal'+Id.toString()}></input>
      </td>
    )
  }
 
      let let_pair=[]
 
JSX_Kernal(i*10+j)
 
Id:number
 
 key={SS_Reset}
 
        setSS_Reset(Math.random())
 
        setSS_Reset(Math.random())
 
setSS_Reset
 
    setSS_Reset:(S:number)=>void
 
        setSS_Reset={setSS_Reset}
 
    const [SS_Reset,setSS_Reset]=useState<number>(0)
 
setSS_Reset
 
setSS_Reset:(S:number)=>void
 
        setSS_Reset(Math.random())
 
        setSS_Reset(Math.random())
 
        setSS_Reset={setSS_Reset}
 
setSS_Reset:(S:number)=>void
 
setSS_Reset
 
setSS_Reset:S
 

    useEffect(()=>{setSS_Reset(Math.random)},[SS_OpenPanel])
 
        {
 
    const [SS_2DMatrix,setSS_2DMatrix]=useState<number[]>([1,0,0,1])
    const [SS_2DTable,setSS_2DTable]=useState<string[]>(['1','0','0','1'])

 
        setSS_Image     ={setSS_Image     }
 
const [SS_Image     , setSS_Image] = useState<string | null>(null);
 
SS_Image     ,
 
setSS_Image     ,
 
SS_Image     :string|null
 
setSS_Image     :(S:string|null)=>void
 
        SS_Image     ={SS_Image     }
 
     //f_UpdateThresholds()
 
     //alert(JSON.stringify(let_UpdateThresholds))
 
     //alert(JSON.stringify(SS_Thresholds))

     //alert(SS_Thresholds.length)
 
    alert('Add')
 
.pearseInt()
 
let_Height=let_MaxY
 
let_Height=let_MaxY
 
let_Height
 
          
 
    let let_IsShow='visible'
 
let_input
 
,whiteSpace:'break-spaces'
 
      if(let_input[0]===let_input[2]&& let_input[2]==let_input[])
 
//import {U03_SetIsDefault} from '../../../T03_Threshold/U03_SetIsDefault'
 
       //let ss_Thresholds=[...SS_Thresholds]
       //let let_UpdateThresholds=U03_Sort(ss_Thresholds)
       //setSS_Thresholds(let_UpdateThresholds)
       
 
let ss_Thresholds=[..SS_Thresholds]
 
    for(let i:number=0;i<THRESHOLDS.length;i++){
        if(THRESHOLDS[i].Key===THISTHRESHOLD.Key){
            if(THISTHRESHOLD.IsDefault===true){
                THISTHRESHOLD.IsDefault=false
            }
            else if(THISTHRESHOLD.IsDefault===false){
                THISTHRESHOLD.IsDefault=true
            }
            break
        }
    }
 
        THRESHOLDS:TS_Threshold[],
 
,backgroundColor:'green'
 
+Threshold.PositionY+3
 
let_IsShow
 
setAttribute('style',)
 
</>
 
   <div>
    
   </div>
 
div
   style={{
   backgroundImage: 'linear-gradient(white, black)',
   marginTop:'10px',
   marginLeft:'0px',
   width:'50px',
   height:`calc(100vh - ${ (143+20+200)}px )`
   }}>
   </div><
 
    
  let let_ColorValue='#333333'
 
      //alert(Threshold.Key.toString())
      //let_ColorValue=let_input  // update the value
      // make sure that the only available input is only black, white and gray color.
 
    /*

      <input  
          style={{width:'25px',height:'25px'}} 
          value={let_ColorValue} 
          onChange={f_setColor} 
          type="color" 
          id={'C04id_Color'+Threshold.Key.toString()} 
      ></input>*/
    //...
    //<input  style={{width:'25px',height:'25px'}} value={let_ColorValue} onChange={f_setColor} type="color" id={'C04id_Color'+Threshold.Key.toString()} name="favcolor" ></input>
    //...
 
          value={let_ColorValue} 
 
name="favcolor" >
 
.getElementsByTagName("input")
 
?.setAttribute('value',let_input)
 
as HTMLInputElement)
 
"#6688aa"
 
value="#ff0000"
 
      setSS_Delta(let_Delta)
      setSS_Mouse(let_Mouse)
      setSS_MousePosition(let_MousePosition)
 
 const [SS_Mouse,setSS_Mouse]=useState<number>(0)
 const [SS_MousePosition,setSS_MousePosition]=useState<number>(0)
 const [SS_Delta,setSS_Delta]=useState<number>(0)
 
 let Test_SS_MouseActivate=<h5>SS_MouseActivate: {SS_MouseActivate.toString()}</h5>
 let Test_SS_SuperActivate=<h5>SS_SuperActivate: {SS_SuperActivate.toString()}</h5>
 
{Test_SS_MouseActivate}
{Test_SS_SuperActivate} 
<h5>SS_Delta: {SS_Delta}</h5>
<h5>SS_Mouse: {SS_Mouse}</h5>
<h5>SS_MousePosition: {SS_MousePosition}</h5>
 
//****************************************************************************
 
()=>U03_setIsDefault(Threshold,ss_Thresholds)
 
let ss_Thresholds=[...SS_Thresholds]
 
         {
         //Threshold.PositionY
         }
 
        POSITION:number
 
     else{
      setSS_Follow(true)
     }
     //setSS_SuperActivate(false)
 
 const [SS_Follow,setSS_Follow]=useState<boolean>(false)
 
 let Test_SS_SuperActivate=<h5>SS_SuperActivate: {SS_SuperActivate.toString()}</h5>
 
{Test_SS_SuperActivate} 
 
   if(SS_SuperActivate===false){setSS_MouseActivate(false)}

 
 const [SS_Follow,setSS_Follow]=useState<boolean>(false)
 
    /*
    requestAnimationFrame(() => {
      let let_MousePosition = event.clientY;
      let ss_ThisThreshold = SS_ThisThreshold;
      let ss_Thresholds = [...SS_Thresholds];
      let let_UpdateThresholds = ss_Thresholds;

      if (let_MaxY) {
        if (
          let_Delta + let_MousePosition - let_Mouse > 10 &&
          let_Delta + let_MousePosition - let_Mouse < let_MaxY
        ) {
          let_UpdateThresholds = U03_Position(
            ss_ThisThreshold,
            ss_Thresholds,
            let_Delta + let_MousePosition - let_Mouse
          );

          setSS_Delta(let_Delta);
          setSS_Mouse(let_Mouse);
          setSS_MousePosition(let_MousePosition);
        }
      }

      setSS_Thresholds(let_UpdateThresholds);
    });/**/
 
   /*if(SS_Follow===true){
    let let_Target=(document.getElementById('C04id_B'+SS_ThisThreshold.Key.toString()))
    if(SS_MouseActivate===true){
      let_Target?.addEventListener('mousemove',f_MouseFollow)
    }
    return ()=>{
      //setSS_DeltaMemory(false)
      setSS_Follow(false)
      let_Target?.removeEventListener('mousemove',f_MouseFollow)
    }
   }*/
 
      //let_Delta+let_MousePosition-let_Mouse);
 
   const f_MouseFollow = (event: MouseEvent) => {
     let let_MousePosition = 0
     let_MousePosition = event.clientY;
     let ss_ThisThreshold=SS_ThisThreshold
     let ss_Thresholds=[...SS_Thresholds]
     let let_UpdateThresholds = U03_Position(
      ss_ThisThreshold, 
      ss_Thresholds, 
      200);
      //let_Delta+let_MousePosition-let_Mouse);
     setSS_Thresholds(let_UpdateThresholds)
    };
 
Memory
 
+let_MousePosition
 
-let_Mouse
 
 = ss_Thresholds
     let_UpdateThresholds
 
     }}
 
     if(let_MaxY){
     if(let_Delta+let_MousePosition-let_Mouse>10 &&let_Delta+let_MousePosition-let_Mouse<let_MaxY){
 
    let let_MousePosition = 0
    let_MousePosition = event.clientY;
    let ss_ThisThreshold=SS_ThisThreshold
    let ss_Thresholds=[...SS_Thresholds]
    let let_UpdateThresholds = ss_Thresholds
    if(let_MaxY){
    if(let_Delta+let_MousePosition-let_Mouse>10 &&let_Delta+let_MousePosition-let_Mouse<let_MaxY){
    let_UpdateThresholds = U03_Position(ss_ThisThreshold, ss_Thresholds, let_Delta+let_MousePosition-let_Mouse);
    }}
    setSS_Thresholds(let_UpdateThresholds)
 
 debounce(
 
import debounce from 'lodash/debounce';
 
import { useState , useEffect } from 'react';
import TS_Threshold from '../../../T03_Threshold/An_Index'
import {C03_Create} from '../../../T03_Threshold/C03_Create'
import {D03_Delete} from '../../../T03_Threshold/D03_Delete'
import {U03_Position} from '../../../T03_Threshold/U03_Position';
//import {U03_Click} from '../../../T03_Threshold/U03_Click'
//import {U03_ThisThreshold} from '../../../T03_Threshold/U03_ThisThreshold'

/*
To Do Now
1. Fix SS_SuperActivate
2. Create boundary for JSX_Threshold
3. gray
4. 0-255 indicator
5. Post Request
*/

const U2_Threshold = (
//****************************************************************************
// INPUT
//****************************************************************************
{

}
:{

})=>{
//****************************************************************************
// HOOK
//****************************************************************************
  const [SS_Thresholds,setSS_Thresholds]=useState<TS_Threshold[]>([
    {Key:112,PositionY:300,IsDefault:false,Gray:112},
    {Key:121,PositionY:121,IsDefault:false,Gray:121},
    {Key:211,PositionY:211,IsDefault:false,Gray:211},
  ])
  const [SS_ThisThreshold,setSS_ThisThreshold]=useState<TS_Threshold>({Key:0,PositionY:0,IsDefault:false,Gray:0})

  // SS_Delta = P01id_Right.width - P01id_Resize.width
  // SS_DeltaMemory == false : Forget SS_Delta
  // SS_DeltaMemory == true  : Remember SS_Delta
  // We do this because we do not want to update SS_Delta during mouse moving event.
  const [SS_DeltaMemory,setSS_DeltaMemory]=useState<boolean>(false)
  // SS_InnerDown = Is Mouse Click down in let_Resize
  // SS_OuterDown = Is Mouse Click down in this components
  // SS_InnerMemory = Is Mouse Click start at let_Resize
  //const [SS_InnerDown,   setSS_InnerDown] = useState<boolean>(false);
  //const [SS_OuterDown,   setSS_OuterDown] = useState<boolean>(false);
  const [SS_MouseActivate,setSS_MouseActivate]=useState<boolean>(false)
  const [SS_SuperActivate,setSS_SuperActivate]=useState<boolean>(false)

//****************************************************************************
// USEEFFECT
//****************************************************************************
  useEffect(()=>{
    let let_Mouse=0
    let let_Delta=0
    if(SS_MouseActivate===true){
      document.onmousedown = (event) => {
        let let_MousePosition = 0
        let_MousePosition = event.clientY;
        if(SS_ThisThreshold.Key!==0){
          let_Mouse=let_MousePosition
        }
    }

    if(SS_DeltaMemory===false){
      setSS_DeltaMemory(true)
      let_Delta=SS_ThisThreshold.PositionY-let_Mouse
    }

    const f_MouseMove = (event: MouseEvent) => {
      let let_MousePosition = 0
      let_MousePosition = event.clientY;

      let ss_ThisThreshold=SS_ThisThreshold
      let ss_Thresholds=[...SS_Thresholds]
      let let_UpdateThresholds = U03_Position(ss_ThisThreshold, ss_Thresholds, let_Delta+let_MousePosition-let_Mouse);
      setSS_Thresholds(let_UpdateThresholds)
    };

    let let_Target=(document.getElementById('C04id_B'+SS_ThisThreshold.Key.toString()))
    if(SS_MouseActivate===true){
      let_Target?.addEventListener('mousemove',f_MouseMove)
    }

    return ()=>{
      setSS_DeltaMemory(false)
      let_Target?.removeEventListener('mousemove',f_MouseMove)
    }
  }
    
  },[SS_ThisThreshold,SS_MouseActivate])



//****************************************************************************
// FUNCTION_04: On Mouse Down
//****************************************************************************
    function f_OnMouseDown(ThisThreshold:TS_Threshold){
      setSS_ThisThreshold(ThisThreshold)
      setSS_MouseActivate(true)
    }

    function f_OnMouseUp(){
      setSS_ThisThreshold({Key:0,PositionY:0,IsDefault:false,Gray:0})
      setSS_MouseActivate(false)
      setSS_SuperActivate(false)
    }

    function f_OnMouseLeave(){
      setSS_ThisThreshold({Key:0,PositionY:0,IsDefault:false,Gray:0})
      setSS_MouseActivate(false)
      setSS_SuperActivate(false)
    }

//****************************************************************************
// FUNCTION_05: Create Threshold
//****************************************************************************
    function f_CreateThreshold(){
      let ss_Thresholds = [...SS_Thresholds]
      let let_UpdateThresholds = C03_Create(ss_Thresholds)
      setSS_Thresholds(let_UpdateThresholds)
    }

//****************************************************************************
// FUNCTION_06: Delete Threshold
//****************************************************************************
    function f_DeleteThreshold(ThisThreshold:TS_Threshold){
      let ss_Thresholds = [...SS_Thresholds]
      let let_UpdateThresholds = D03_Delete(ThisThreshold,ss_Thresholds)
      setSS_Thresholds(let_UpdateThresholds)
    }

//****************************************************************************
// JSX_00: Threshold
//****************************************************************************

  const let_Width='250px'
//****************************************************************************
  function JSX_Threshold(Threshold:TS_Threshold){
    let let_Color='darkred'
    if(Threshold.Key===SS_ThisThreshold.Key){let_Color='red'}
    return (<div 
      id={'C04id_Threshold'+Threshold.Key.toString()}
      style={{
        position:'absolute',
        marginLeft:'40px',
        backgroundColor:let_Color,marginTop:Threshold.PositionY.toString()+'px',width:'190px',height:'3px'}}>
      <div style={{display:'flex'}}>
        <h1 style={{fontSize:'13px',marginRight:'-20px',marginTop:'-10px',marginLeft:'-25px'}}>
          {Threshold.Key
          }
          {
          //Threshold.PositionY
          }
        </h1>
      <button style={{width:'25px',height:'25px',marginLeft:'115px',backgroundColor:'white'}} 
      id={'C04id_B'+Threshold.Key.toString()}
        onMouseDown={()=>{f_OnMouseDown(Threshold)}}
        onMouseUp   ={()=>{f_OnMouseUp()}}
        onMouseLeave={()=>{f_OnMouseLeave()}}
    >.</button>
      <button style={{width:'25px',height:'25px'}} >/</button>
      <input  style={{width:'25px',height:'25px'}} type="color" id="favcolor" name="favcolor" value="#ff0000"></input>
      <button style={{width:'25px',height:'25px'}} onClick={()=>{f_DeleteThreshold(Threshold)}}>X</button>
      </div>
    </div>)}
  const JSX_Thresholds=SS_Thresholds.map(Thresholds=>JSX_Threshold(Thresholds))

//****************************************************************************
// OUTPUT
//****************************************************************************
return(
<div 
onClick={()=>setSS_SuperActivate(true)}
onMouseLeave={()=>setSS_SuperActivate(false)}
onMouseUp={()=>setSS_SuperActivate(false)}

  style={{height:`calc(100vh - 40px - ${(143+20)}px )`,width:let_Width,backgroundColor:'lightblue',marginTop:'0px'}}>
  
  <div style={{display:'flex',marginTop:'10px'}}>
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Gray Threshold</h1>
    <button style={{marginTop:'10px',marginRight:'15px'}}>Ok</button>
    <button style={{marginTop:'10px',marginRight:'15px'}}>Reset</button>
  </div>
  <hr/>
  <div style={{display:'flex'}}>
    <h1 className='C04id_Zoom' style={{display:'flex',marginLeft:'20px',marginTop:'10px'}}>255</h1>
    <button style={{marginTop:'0px',marginRight:'15px'}} 
    onClick={f_CreateThreshold}>Add Threshold</button>
  </div>
  <div
  style={{
  display:'flex'
  }}
  >
{// Original Gray Scale Indicator  
}
    <div 
    style={{
    backgroundImage: 'linear-gradient(white, black)',
    marginTop:'10px',
    marginLeft:'40px',
    width:'40px',
    height:`calc(100vh - ${ (143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
    backgroundColor:'green',
    marginTop:'10px',
    width:'3px',
    height:`calc(100vh - ${ (143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
    backgroundImage: 'linear-gradient(white, black)',
    marginTop:'10px',
    marginLeft:'0px',
    width:'50px',
    height:`calc(100vh - ${ (143+20+200)}px )`
    }}>
    </div>
{// Gray Scale Setting
}

    {JSX_Thresholds  } 
  </div>  
  <h1 className='C04id_Zoom' style={{marginTop:'10px',display:'flex',marginLeft:'40px'}}>0</h1>
</div>
  )
}

export default U2_Threshold
 
      setSS_Mouse(null)
 
      setSS_Mouse(null)
 
      setSS_MouseMove(null)
      setSS_Derivative(null)
 
      setSS_Derivative(let_MousePosition-let_Mouse)
 
      let_MousePosition = event.clientY;
      setSS_Derivative(let_MousePosition-let_Mouse)
 
      setSS_Delta(SS_ThisThreshold.PositionY-let_Mouse)
 
  const [SS_Delta,setSS_Delta]=useState<number|null>()
 
  const [SS_Derivative,setSS_Derivative]=useState<number|null>()
 
      setSS_MouseMove(let_MousePosition);
 
          setSS_Mouse(let_MousePosition)
 
  const [SS_Mouse,setSS_Mouse]=useState<number|null>()
  const [SS_MouseMove,setSS_MouseMove]=useState<number|null>()
 
  let JSX_Mouse=<h5>SS_Mouse: {SS_Mouse ? SS_Mouse.toString() : ''}</h5>
  let JSX_MouseMove=<h5>SS_MouseMove: {SS_MouseMove ? SS_MouseMove.toString() : ''}</h5>
  let JSX_MarginTop=<h5>SS_MarginTop: {SS_ThisThreshold.PositionY}</h5>
  //let JSX_Delta=<h5>Delta: {SS_MarginTop && SS_Mouse ? SS_Mouse - SS_MarginTop : 0}</h5>
  let JSX_MouseActivate=<h5>SS_MouseActivate: {SS_MouseActivate.toString()}</h5>
  let JSX_ThisThreshold=<h5>SS_ThisThreshold: {SS_ThisThreshold.Key}</h5>
  let JSX_Derivative=<h5>SS_Derivative: {SS_Derivative}</h5>
 

{JSX_Mouse}
{JSX_MarginTop}
<h5>Delta: {SS_Mouse ? SS_ThisThreshold.PositionY-SS_Mouse : 0}</h5>
<h5>SS_Delta: {SS_Delta}</h5>
{JSX_MouseMove}
{JSX_Derivative}
{JSX_MouseActivate}
{JSX_ThisThreshold}
 
      
 
onClick={()}
 
//
 
    // <h5>Delta: {SS_Mouse ? SS_ThisThreshold.PositionY-SS_Mouse : 0}</h5>
    // 
 
let let_MousePosition = 0
 
let let_MousePosition = 0
 
      setSS_DeltaMemory(true)
 
-let_Mouse
 
      let let_MousePosition = 0
      let_MousePosition = event.clientY;
 
if(SS_DeltaMemory===false){
 
if(SS_DeltaMemory===false){
      setSS_DeltaMemory(true)
      let let_MousePosition = 0
      let_MousePosition = event.clientY;
      // <h5>Delta: {SS_Mouse ? SS_ThisThreshold.PositionY-SS_Mouse : 0}</h5>
      setSS_Delta(SS_ThisThreshold.PositionY-let_Mouse)
      }
 

      }
 
setSS_DeltaMemory(true)
 
//
 
-let_Mouse
 
  let prevSS_Mouse=0
 
      //let let_Target=document.getElementById('C04id_B'+SS_ThisThreshold.Key.toString())?.offsetTop
      // get position y of document.getElementById('C04id_B'+SS_ThisThreshold.Key.toString())
      //alert(let_Target)
      //let let_UpdateThresholds = U03_Position(
      //  ss_ThisThreshold, 
      //  ss_Thresholds, 
      //  let_MousePosition-190);
      //  let_Target? let_MousePosition-let_Target+200:0);
      
 
let_Target? 
 
let_Target? 
 
.style
 
position.y
 
marginTop
 
-document.getElementById('C04id_B'+SS_ThisThreshold.Key.toString())?.getAttribute('marginTop')?.replace('px','').
 
arseFloat
 
let ss_ThisThreshold=SS_ThisThreshold
      let ss_Thresholds=[...SS_Thresholds]
      let let_UpdateThresholds = U03_Position(ss_ThisThreshold, ss_Thresholds, SS_MouseMove - let_Mouse);
      setSS_Thresholds(let_UpdateThresholds)
 
      // Get the 
 
|null
 
|null
 
|null
 
        }
 
        if(SS_ThisThreshold.Key!==0){
 
      //let ss_ThisThreshold=SS_ThisThreshold
      //let ss_Thresholds=[...SS_Thresholds]
      //let let_UpdateThresholds = U03_Position(ss_ThisThreshold, ss_Thresholds, let_MouseMove - let_Mouse);
      //setSS_Thresholds(let_UpdateThresholds)
 
t become null before setSS_MouseMove and setSS_Derivative are a
 
I expect that SS_Mouse is always updated and no
 
      //if(SS_Mouse){
      //  setSS_Derivative(let_MousePosition-SS_Mouse)
      //}
      //else{
      //  setSS_Derivative(let_MousePosition)
      //}
      
      //alert('Too bad, it does not working at all!')
 

      //alert(SS_Mouse)
 
      let let_Mouse=0
      if(SS_Mouse){
        let_Mouse=SS_Mouse
      }
 
    /*if(SS_MouseActivate===true && SS_Mouse!==null && SS_MouseMove!==null && SS_ThisThreshold.Key!==0){
      let ss_ThisThreshold=SS_ThisThreshold
      let ss_Thresholds=[...SS_Thresholds]
      let let_UpdateThresholds: TS_Threshold[];
      if (SS_MouseMove !== undefined && SS_Mouse !== undefined) {
        let_UpdateThresholds = U03_Position(ss_ThisThreshold, ss_Thresholds, SS_MouseMove - SS_Mouse);
      } else {
        let_UpdateThresholds = ss_Thresholds
      }
      setSS_Thresholds(let_UpdateThresholds)
    }*/
    let let_Mouse=0
    if(SS_Mouse && SS_Mouse!==undefined && SS_Mouse!==null){
      let_Mouse=SS_Mouse
    }
    let let_MouseMove=0
    if(SS_MouseMove&& SS_MouseMove!==undefined && SS_MouseMove !==null){
      let_MouseMove=SS_MouseMove
    }
 
      let let_Mouse=0
      if(SS_Mouse){
        let_Mouse=SS_Mouse
      }
 
|null
 
 the mouse is moving and SS_MouseActivate===true
 
          // Update SS_Mouse everytime when
 
      setSS_MouseActivate(false)
 
      alert(SS_Mouse)
 
      let let_Mouse=0
 
setSS_Derivative(let_MousePosition-SS_Mouse)
 
  const [SS_Del]
 
else{
      let_Mouse=0
    }
 
      let let_Mouse=SS_Mouse
 
SS_Mouse!==null && 
 
: TS_Threshold[];
      if (SS_MouseMove !== null && SS_Mouse !== null) {
        let_UpdateThresholds
 
      } else {
        let_UpdateThresholds = ss_Thresholds
      }
 
        // Handle the case when either SS_MouseMove or SS_Mouse is undefined
        // You might want to set a default value or handle it based on your application logic.
 
setSS_MouseMove(null)
 
      // Update SS_Mouse when the mouse is moving and SS_MouseActivate is true

 
      }
 
      if (SS_ThisThreshold.Key !== 0) {
 
if(SS_MouseActivate===true){
 
let let_MousePosition = 0
 
      onMouseMove={()=>f_OnMouseMove()}
 
    function f_OnMouseMove(){
      let let_MousePosition = 0
      document.onmousedown = (event) => {
        let_MousePosition = event.clientY;
        if(SS_ThisThreshold.Key!==0){
          setSS_MouseMove(let_MousePosition)
        // Update SS_Mouse everytime when the mouse is moving and SS_MouseActivate===true
        }
      }
    }
 
*/
    const handleMouseDown = (event: MouseEvent) => {
      let_MousePosition = event.clientY;
      if (SS_ThisThreshold.Key !== 0) {
        setSS_Mouse(let_MousePosition);
        // Update SS_Mouse when the mouse is moving and SS_MouseActivate is true
      }
    };

    if (SS_MouseActivate) {
      document.addEventListener('mousedown', handleMouseDown);
    }

    // Cleanup function
    return () => {
      document.removeEventListener('mousedown', handleMouseDown);
    };
 
  let เราชาวไทย = 'สยาม'
  function เวรกรรม(){
    alert('Karma Police')
  }
 
let let_MousePosition = 0
 
{JSX_Delta}
 
  const [SS_MarginTop,setSS_MarginTop]=useState<number|null>()
 
      
 
    else{
  setSS_Mouse(null)
}
 
  const [SS_Mouse,setSS_Mouse]=useState<number>(0)
 
else{
 
[SS_InnerMemory,setSS_InnerMemory] = useState<boolean>(false);
 
      //setSS_Position(0)
      //setSS_MarginTop(null)
 
      
      //let ss_Thresholds = [...SS_Thresholds]
      //let let_UpdateThresholds = U03_Position(ThisThreshold,ss_Thresholds,10)
      //setSS_Thresholds(let_UpdateThresholds)
      //
 
      /*
      let let_MousePosition = 0
      document.onmousedown = (event) => {
      let_MousePosition = event.clientY;
      if(SS_ThisThreshold.Key!==0){
        setSS_Position(let_MousePosition)
      }else{
        setSS_Position(0)
      }
      };
      let ss_Thresholds= [...SS_Thresholds]
      let ss_ThisThreshold=SS_ThisThreshold
      setSS_MarginTop(SS_ThisThreshold.PositionY)
      //let let_UpdatePosition=0
      //if(SS_MarginTop===null){
      //  let_UpdatePosition=SS_Position
      //}
      //else{
      //  let_UpdatePosition=SS_Position-(SS_MarginTop ?? 0)
      //}
      let let_UpdateThresholds=U03_Position(ss_ThisThreshold,ss_Thresholds,SS_Position)
      setSS_Thresholds(let_UpdateThresholds)*/

      //let ss_Thresholds = [...SS_Thresholds]
      //let let_UpdateThresholds = U03_Position(SS_ThisThreshold,ss_Thresholds,10)
      //setSS_Thresholds(let_UpdateThresholds)

      //alert(SS_ThisThreshold.Key)
      
      // By ChatGPT
      //if(SS_InnerMemory){
      //  document.onmousedown = (event) => {
      //  let let_Y=event.clientY
      //  if(SS_DeltaMemory===false){
      //    setSS_Delta(let_Y-SS_ThisThreshold.PositionY)
      //    setSS_DeltaMemory(true)
      //  }
      //  setSS_Position(let_Y-SS_Delta)
      //  };
      //}
      //let ss_Thresholds=[...SS_Thresholds]
      //let ss_ThisThreshold=SS_ThisThreshold
      //let let_UpdateThresholds=U03_Position(ss_ThisThreshold,ss_Thresholds,SS_Position)
      //setSS_Thresholds(let_UpdateThresholds)

      /* Update Width of Left Panel
        if(SS_InnerMemory){
            if(SS_Position<10){
              //let_Left!.setAttribute("style","width:"+let_MinimumWidth.toString()+"px");
            }
            else{
              //alert(SS_Position)
              //let_ThisThreshold!.setAttribute("style","margin-top:"+SS_Position.toString()+"px");
            }
        }
        else{
            setSS_DeltaMemory(false)
        }*/
 
        //onMouseDown ={()=>{f_InnerDown ()}}
        //onClick={()=>{f_ClickThreshold(Threshold)}}
 
SS_Position)//-
 
SS_Position
 
      //alert(`Mouse Position: ${let_MousePosition}`);
 
      // Update the mouse position
 
      //f_CreateThreshold()
 
.x}, ${let_MousePosition.y
 
{ x: event.clientX, y: 
 

      /* Update Width of Left Panel
        if(SS_InnerMemory){
            if(SS_Position<10){
              //let_Left!.setAttribute("style","width:"+let_MinimumWidth.toString()+"px");
            }
            else{
              //alert(SS_Position)
              //let_ThisThreshold!.setAttribute("style","margin-top:"+SS_Position.toString()+"px");
            }
        }
        else{
            setSS_DeltaMemory(false)
        }*/
 
This
 
onMouseUp={()=>{f_OnMouseUp()}} 
 
/****************************************************************************
// FUNCTION_00: Detect Mouse Click in P01id_Resize
//****************************************************************************
    function f_InnerDown():void{
        setSS_InnerDown(true);
        setSS_InnerMemory(true)
    };

    function f_InnerUp():void{
        setSS_InnerDown(false);
        setSS_InnerMemory(false)
        setSS_DeltaMemory(false)
    };

//****************************************************************************
// FUNCTION_01: Detect Mouse Click outside P01id_Resize
//****************************************************************************
    function f_OuterDown():void{
        setSS_OuterDown(true);
    };

    function f_OuterUp():void{
        setSS_OuterDown(false);
        setSS_InnerMemory(false)
        setSS_DeltaMemory(false)
    };

//****************************************************************************
// FUNCTION_02: Detect Mouse Move
//****************************************************************************
    function f_MouseMove(e: React.MouseEvent<HTMLDivElement>):void{
        let let_X:number = e.clientX;
        if(SS_DeltaMemory===false){
            let let_LeftWidth:number=document.getElementById('P01id_Left')!.offsetWidth
            setSS_Delta(let_X-let_LeftWidth)
            setSS_DeltaMemory(true)
        }
        //setSS_Position(let_X-SS_Delta)
    };

//****************************************************************************
// FUNCTION_03: Detect Mouse Move outside of P01id_Resize
//****************************************************************************
    function f_InnerLeave():void{
        if(SS_InnerMemory===false){
            setSS_InnerDown(false)
        }
    }*/
 
//
 
//
 
'darkred'
 
dark
 

  //const [SS_GetId,setSS_GetId]=useState<number|null>()
 
        
 
// By ChatGPT
      document.onmousedown = (event) => {
      let let_Y=event.clientY
      if(SS_DeltaMemory===false){
        setSS_Delta(let_Y-ThisThreshold.PositionY)
        setSS_DeltaMemory(true)
      }
      setSS_Position(let_Y-SS_Delta)
      };
 
      alert(ThisThreshold.Key)
 
alert(SS_ThisThreshold.Key)
 
      alert(SS_ThisThreshold.Key)
 
IsClick
 
                IsClick:false
 
    IsClick:boolean
 
old,ss_Thresholds)
 
      let let_UpdateThresholds = U03_Click(ThisThresh
 
      setSS_ThisThreshold(U03_ThisThreshold(SS_Thresholds))
 
, useRef
 
        THISTHRESHOLD:TS_Threshold,
 
let let_EmptyYhreshold:TS_Threshold={Key:0,PositionY:0,IsDefault:false,Gray:0,IsClick:false}
 
{Key:0,PositionY:0,IsDefault:false,Gray:0,IsClick:false}
 
    return THRESHOLDS
 
let let_ThisThreshold=document.getElementById('C04id_Threshold'+SS_ThisThreshold.Key.toString())
 
  const [SS_ThisThreshold,setSS_ThisThreshold]=useState<TS_Threshold>({Key:0,PositionY:0,IsDefault:false,Gray:0,IsClick:false})

 
  const [SS_ThisThreshold,setSS_ThisThreshold]=useState<TS_Threshold>({Key:0,PositionY:0,IsDefault:false,Gray:0,IsClick:false})

 
        STATE:0|1|2|3,
 
              
 
      let let_Y=event.clientY
 
    
 
      //setSS_ThisThreshold(ThisThreshold)
      //alert(ThisThreshold.Key)
      //alert(SS_ThisThreshold.Key)
 
      setSS_ThisThreshold(ThisThreshold)
      alert(ThisThreshold.Key)
      alert(SS_ThisThreshold.Key)
 
alert(ThisThreshold.Key)
 
setSS_ThisThreshold(ThisThreshold)
 
      let let_ThisThreshold=document.getElementById('C04id_Threshold'+ThisThreshold.Key.toString())
      //alert(let_ThisThreshold!.getAttribute('marginTop'))
      // ThisThreshold.PositionY = marginTop:Threshold.PositionY.toString()+'px'
      
      //let let_Y:number = e.clientY;
      //alert(let_Y)

 
      // Update the mouse position
      //let_MousePosition = { x: event.clientX, y: event.clientY };
      //alert(let_MousePosition.y)

 
      //let let_MousePosition: { x: number; y: number } = { x: 0, y: 0 };
 
      let_MousePosition=event.clientY
 
      let let_MousePosition:number=0;
      //alert(event.clientY)
 
let let_MousePosition:number=0;
 
};
 
      alert(let_MousePosition)
 
          
 
      
 
          //e: React.MouseEvent<HTMLDivElement>
 
        onMouseMove={f_MouseMove}
 
      alert(SS_Position)
 

<div style={{marginTop:'40px'}}></div>
 

<div>
<li>Key: { }</li>
<li>Position:</li>
</div>
 

  let  :string='Mouse Up'
  if(SS_InnerMemory){
    if(SS_InnerDown){
       ='Click '+SS_ThisThreshold.Key.toString()
    }
  }
 

      //alert(ThisThreshold.Key)
 
U02_UpdateDisplay
 
 {U03_Position} from '../../../T03_Threshold/U03_Position'
 
        STATE:0|1|2|3,
 
        else{
            continue
        }
 
      }
 
      if(SS_ThisThreshold){
 
|null
 
if(SS_InnerMemory){
 
        
        
 
         // DEFAULT: Math.random()
                    // Unique Key
 
Key:let_NewKey,
 
        // New Column Name
        NEWTHRESHOLD:number
 
        }
        return THRESHOLDS
 
    // Check duplicate Column Name
    if(NEWTHRESHOLD.toString().length>0 
            && NEWTHRESHOLD.toString().length<30
            && THRESHOLDS.map(ROW=>ROW.Name).includes(NEWTHRESHOLD)===false)
 

  const [SS_TestGetId,setSS_TestGetId]=useState<number>
 
      setSS_TestGetId(ThisThreshold)
 
        setSS_InnerMemory(false)
 
        }
 
        if(SS_InnerMemory===false){
 
        SS_InnerMemory
 
      }
 
      if(SS_InnerMemory===true){
 
  }
 
  if(SS_InnerMemory){
 
    }
 
  if(SS_InnerMemory){
 
//****************************************************************************
// FUNCTION_04: Get Id
//****************************************************************************
    function f_GetId(ThisThreshold:TS_Threshold){
      setSS_ThisThreshold(ThisThreshold)
    }
 
  let let_GetPosition:number|null=null
 
.Key
 
//
 
{JSX_Thresholds}
 
    
 

//****************************************************************************
  let JSX_Y02=150
  let JSX_Threshold02=<div 
  id='C04id_'
      style={{position:'absolute',marginLeft:'40px',backgroundColor:'darkred',marginTop:JSX_Y02.toString()+'px',width:'190px',height:'3px'}}>
      <div style={{display:'flex'}}>
        <h1 style={{fontSize:'13px',marginRight:'-20px',marginTop:'-10px',marginLeft:'-25px'}}>112</h1>
      <button style={{width:'25px',height:'25px',marginLeft:'115px'}} 
      id='C04id_B27182818284'
        onMouseDown ={f_InnerDown}
        onMouseUp   ={f_InnerUp}
        onMouseLeave={f_InnerLeave}
    >.</button>
      <button style={{width:'25px',height:'25px'}} >/</button>
      <input  style={{width:'25px',height:'25px'}} type="color" id="favcolor" name="favcolor" value="#ff0000"></input>
      <button style={{width:'25px',height:'25px'}}>X</button>
      </div>
    </div>
 
  
  let JSX_Y01=200
  let JSX_Key01=1100401071674
  
 
112
 
JSX_Y0
 
    {
 
  }  
 
.toString()
 
// Type Script Column
 
27182818284
 
JSX_Key01
 
1100401071674
 
let JSX_Y02=150
 
200
 
Threshold
 
 59045 23536
 
        if(SS_InnerDown===false){
        //alert('MouseUp')
        }
 
    else if(SS_InnerDown===false){
      let_AddThreshold='Mouse Up'
    }
 
      alert('MouseUp')
 
    useEffect(()=>{
 
        // let_Resize is in between Left and Right Panels.
        let let_Resize=document.getElementById('P01id_Resize')
        
        // Left Panel
        let let_Left=document.getElementById('P01id_Left')
        // Right Panel
        let let_Right=document.getElementById('P01id_Right')  

        // Minimum Width of Both Panels
        let let_MinimumWidth=100

//****************************************************************************
        // Setting Minimum Width of P01id_Left and P01id_Right
        if(let_Left!.offsetWidth<let_MinimumWidth || let_Right!.offsetWidth<let_MinimumWidth){
            let let_LW:number
            let let_RW:number
            if(let_Left!.offsetWidth<let_Right!.offsetWidth){
                let_LW=let_MinimumWidth
                let_RW=let_Right!.offsetWidth
            }
            else {
                let_LW=let_Left!.offsetWidth
                let_RW=let_MinimumWidth
            }
            let_Left!.setAttribute("style" ,"width:"+let_LW.toString()+'px');
            let_Right!.setAttribute("style","width:"+let_RW.toString()+'px');
            setSS_DeltaMemory(false)
            setSS_InnerDown(false)
            setSS_OuterDown(false)
        }

//****************************************************************************
        // Update Width of Left Panel
        if(SS_InnerMemory){
            if(SS_Width<let_MinimumWidth){
                let_Left!.setAttribute("style","width:"+let_MinimumWidth.toString()+"px");
            }
            else{
                let_Left!.setAttribute("style","width:"+SS_Width.toString()+"px");
            }
        }
        else{
            setSS_DeltaMemory(false)
        }
        }
//****************************************************************************
    },[SS_Width,SS_InnerDown,SS_OuterDown]
    )
//****************************************************************************
*/
 
//****************************************************************************
        // Initialize width of Both Panels
        if(SS_IsFirst===true){
            let_Left!.setAttribute("style","width:400px");
            let_Right!.setAttribute("style", "flex: 1");
            setSS_IsFirst(false)
        }
        // Update width of Right Panel By ChatGPT
        else{
            let_Right!.setAttribute("style", "flex: 1");
        }
 
        if(SS_Is2Panels===true){
 
useEffect(()=>{
 
  const Ref_DragThreshold=useRef<number>(0)
 
Over
 
Name
 
className={class}
 
{class:string}
 
string
 
:string
 
,marginBottom:'30px'
 
<hr style={{marginTop:'27px',width:'90%'}}/>
 
    <button style={{marginTop:'10px',marginRight:'10px',marginLeft:'10px'}}>Save</button>
    <button style={{marginTop:'10px',marginRight:'5px'}}>Reset</button>
 
    <button style={{marginTop:'10px',marginRight:'10px',marginLeft:'10px'}}>Save</button>
    <button style={{marginTop:'10px',marginRight:'5px'}}>Reset</button>
 
              //alert(ss_2DTable[i])
 
parseFloat(
 
===false
 
          //alert(SS_2DMatrix)
 
          //alert(SS_2DMatrix)
 
              
              let ss_2DMatrix=[...SS_2DMatrix];
              ss_2DMatrix[i]=parseFloat(let_input);
              setSS_2DMatrix(ss_2DMatrix);
              (document.getElementById('C04id_2DMatrix'+i.toString()) as HTMLInputElement).value = let_input;
 
ss_2DMatrix[i]=parseFloat(ss_2DTable[i])
 
ing()) as HTMLInputElement).value.toString();
 
            let let_input=(document.getElementById('C04id_2DMatrix'+i.toStr
 
        /*
        if(isNaN(parseFloat(let_input))===false){
          let ss_2DMatrix=[...SS_2DMatrix];
          ss_2DMatrix[id]=parseFloat(let_input);
          setSS_2DMatrix(ss_2DMatrix);
          (document.getElementById('C04id_2DMatrix'+id.toString()) as HTMLInputElement).value = let_input;
        }*/
 
        //alert(let_input);
        //(document.getElementById('C04id_2DMatrix'+id.toString()) as HTMLInputElement).value = let_input;
 
DMatrix
 
1,0,0,1
 
(document.getElementById('C04id_2DMatrix'+id.toString()) as HTMLInputElement).value = let_input;
 
parseFloat(
 
                  // Convert the matched group to a number and return it
 

              // Check if there is a match
 
          // Use the exec method to extract the matched groups
 
        else if(isNaN(parseFloat(let_input.split('.')[0]))===false && isNaN(parseFloat(let_input.split('.')[])))
 
{
          alert('This is not a number!')
        }
        else{
 
let ss_2DMatrix=[...SS_2DMatrix];
 
        ss_2DMatrix[id]=let_input;
 
let ss_2DMatrix=[...SS_2DMatrix]
 
let ss_2DMatrix=[...SS_2DMatrix]
 
        alert(let_input)
 
                    
 
React, 
 
 , useEffect, useRef , useLayoutEffect
 
ChangeEvent, 
 
, backgroundColor:'#33AAAA'
 
style={{width:let_Width}}
 
.C04id_Convolution div{
    height: 100%;
    overflow-y: auto;
    overflow-x: auto;
}
 
    width:100%;
 
</div>
 
className='C04id_Convolution'
 
,marginTop:'0px'
 
    JSX_Kernals.map(jj=>{return (jj)}
 
    JSX_Kernals=[]
 
    JSX_Con.push(JSX_Kernals)
 
    JSX_Con.push(';')
 
JSX_Kernals.map((jj)=>{return (<tr>{jj}</tr>)})
 
JSX_Kernals
 
{JSX_Kernals}
 
ee
 
{ee}
 
let JSX_Convolution=[]
 
volution
 
volution
 
{JSX_Kernal('112')}
 
s:string
 
let let_i=0
 
,
 
.C04id_Zoom{
    margin:auto;
    padding:auto;
    font-size: var(--C04_FontSize01);
}
 

#C04id_Convolution{
    background-color: rgb(145, 18, 136);
    height: 100%;
}
 
    function f_Gray(){
      setSS_UseEffect(true)
      setSS_IsRGB(false)
    }

    function f_RGB(){
      setSS_UseEffect(true)
      setSS_IsRGB(true)
    }
 
setSS_UseEffect,
setSS_IsRGB
 
setSS_UseEffect:(S:boolean)=>void
setSS_IsRGB:(S:boolean)=>void
 
<div>
  <table>
    <tr>
      <td><input></input></td>
      <td><input></input></td>
    </tr>
    <tr>
      <td><input></input></td>
      <td><input></input></td>
    </tr>
  </table>
  </div>
  <div style={{display:'flex'}}>
    <button>Ok</button>
    <button>Reset</button>
  </div>
 
</div>
 
</div>
 

etting,setSS_EditSetting]=useState<0|1>(0)
 

  //const [SS_IsShapeS
 
/*
Note
* SS_IsShapeSetting = Edit Image Setting
Shape
* Attribute
* 1. Type 
* 2. Line Color
* 3. Line Width
* 4. Shape Color
* Type
* 1. Rectangle
* 2. Circle
* 3. Line
* 4. X Line
* 5. Y Line

Text
* Attribute
* 1. Font Name
* 2. Font Size
* 3. Color
* 4. Utility
*/
 
<div style={{display:'inline-block', backgroundColor:'#33AAAA',marginLeft:'10px',margin:'auto'}}>
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Color</h1>
    <button onClick={f_Gray} className='C04id_Button'>Gray</button>
    <button onClick={f_RGB}  className='C04id_Button'>RGB</button>
    </div>
 
<div style={{display:'inline-block', backgroundColor:'#33AAAA',marginLeft:'10px',margin:'auto'}}>
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Color</h1>
    <button onClick={f_Gray} className='C04id_Button'>Gray</button>
    <button onClick={f_RGB}  className='C04id_Button'>RGB</button>
    </div>
 
  
  useEffect(()=>{
  },[])
 
  
    function f_Gray(){
      setSS_UseEffect(true)
      setSS_IsRGB(false)
    }

    function f_RGB(){
      setSS_UseEffect(true)
      setSS_IsRGB(true)
    }
 
(fal
 
    <hr/>
 
<hr/>
 
import U2_Threshold from './Coms/U2_Threshold';
import U2_Convolution from './Coms/U2_Convolution';
 
Toolbar
 
    {//****************************************************************************
    // Zoom Image
    //****************************************************************************
    }
    <div style={{display:'inline-block',margin:'auto'}}>
      <h1 className='C04id_Zoom' style={{marginTop:'0px'}}>Zoom: {SS_Zoom}</h1>
      <div style={{display:'flex',marginTop:'0px'}}>
    <button onClick={f_PosZoom} className='C04id_Zoom' style={{width:'28px'}}>+</button>
    <button onClick={f_NegZoom} className='C04id_Zoom' style={{width:'28px'}}>-</button>
      </div>
    <button onClick={f_ResetZoom} className='C04id_Button' >Reset</button>
    </div>

    <div style={{borderLeft:'3px solid #ffffff',height:'110px'}}>
    </div>

 
    {//****************************************************************************
    // Zoom Image
    //****************************************************************************
    }
    
 
<div style={{display:'inline-block',margin:'auto'}}>
      <h1 className='C04id_Zoom' style={{marginTop:'0px'}}>Zoom: {SS_Zoom}</h1>
      <div style={{display:'flex',marginTop:'0px'}}>
    <button onClick={f_PosZoom} className='C04id_Zoom' style={{width:'28px'}}>+</button>
    <button onClick={f_NegZoom} className='C04id_Zoom' style={{width:'28px'}}>-</button>
      </div>
    <button onClick={f_ResetZoom} className='C04id_Button' >Reset</button>
    </div>

    <div style={{borderLeft:'3px solid #ffffff',height:'110px'}}>
    </div>
 
//****************************************************************************
// FUNCTION_00: Zoom setting
//****************************************************************************
    function f_PosZoom(){
      if(SS_Zoom<10){
        let ss_Zoom=SS_Zoom 
        let let_Zoom = parseFloat((ss_Zoom+0.1).toFixed(1));
        setSS_Zoom(let_Zoom)
      }
    }
    function f_NegZoom(){
        if(SS_Zoom>0.1){
        let ss_Zoom=SS_Zoom 
        let let_Zoom = parseFloat((ss_Zoom-0.1).toFixed(1));
        setSS_Zoom(let_Zoom)
    }}
    function f_ResetZoom(){
        setSS_Zoom(1)
    }
 
setSS_IsRGB:(S:boolean)=>void
setSS_UseEffect:(S:boolean)=>void
SS_OpenPanel:0|1|2
TotalWidth:number
 
setSS_IsRGB,
setSS_UseEffect,
SS_OpenPanel,
TotalWidth,
 
SS_Zoom:number,
setSS_Zoom:(S:number)=>void
setSS_IsRGB:(S:boolean)=>void
setSS_UseEffect:(S:boolean)=>void
SS_OpenPanel:0|1|2
TotalWidth:number
 
SS_Zoom,
setSS_Zoom,
setSS_IsRGB,
setSS_UseEffect,
SS_OpenPanel,
TotalWidth,
 
    function f_PosZoom(){
      if(SS_Zoom<10){
        let ss_Zoom=SS_Zoom 
        let let_Zoom = parseFloat((ss_Zoom+0.1).toFixed(1));
        setSS_Zoom(let_Zoom)
      }
    }
    function f_NegZoom(){
        if(SS_Zoom>0.1){
        let ss_Zoom=SS_Zoom 
        let let_Zoom = parseFloat((ss_Zoom-0.1).toFixed(1));
        setSS_Zoom(let_Zoom)
    }}
    function f_ResetZoom(){
        setSS_Zoom(1)
    }

 
<hr/>
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Edit Image</h1>
    <div className='C04id_EditImage'>
    <button onClick={f_Gray} className='C04id_Button'><img  src={logo_Crop} style={{width:'100%',height:'100%'}} alt="fireSpot"/></button>
    <button onClick={f_Gray} className='C04id_Button'><img  src={logo_Shape} style={{width:'100%',height:'100%'}} alt="fireSpot"/></button>
    <button onClick={f_Gray} className='C04id_Button'><img  src={logo_UpsideDown} style={{width:'100%',height:'100%'}} alt="fireSpot"/></button>
    <button onClick={f_Gray} className='C04id_Button'>Text</button>
    <button className='C04id_Button'>Ok</button>
    <button className='C04id_Button' style={{fontSize:'16px',paddingLeft:'0px'}}>Reset</button>
    </div>
 
import logo_Crop from './logo_Crop.png'
// https://stackoverflow.com/questions/43823289/how-to-import-image-svg-png-in-a-react-component
// https://www.flaticon.com/free-icon/crop_4818201?term=crop&page=1&position=4&origin=tag&related_id=4818201
import logo_Shape from './logo_Shape.png'
import logo_UpsideDown from './logo_UpsideDown.png'
 
      {JSX_Ok}
 
      {JSX_Ok}
 
      {JSX_Ok}
 
      {JSX_Ok}
 
      {JSX_Ok}
 
      {JSX_Ok}
 
      {JSX_Ok}
 
      {JSX_Ok}
 

  let JSX_Ok=<div className='C04id_EditOk'> <button style={{marginLeft:'10px'}}>Ok</button> <button>Reset</button> </div>

 
        <h1>112</h1>
 
<h1>{s}</h1>
 
<table>
<tr>
  <td>3</td>
  <td>3</td>
</tr>
</table>
 
  <div style={{display:'flex'}}>
    <h1 className='C04id_Zoom' style={{display:'flex',marginLeft:'20px',marginTop:'10px'}}>255</h1>
    <button style={{marginTop:'0px',marginRight:'15px'}}>Add Threshold</button>
  </div>
 

  let JSX_Threshold=<div style={{position:'absolute',marginLeft:'40px',backgroundColor:'darkred',marginTop:'200px',width:'190px',height:'3px'}}>
      <div style={{display:'flex'}}>
        <h1 style={{fontSize:'13px',marginRight:'-20px',marginTop:'-10px',marginLeft:'-25px'}}>112</h1>
      <button style={{width:'25px',height:'25px',marginLeft:'115px'}} >.</button>
      <button style={{width:'25px',height:'25px'}} >/</button>
      <input  style={{width:'25px',height:'25px'}} type="color" id="favcolor" name="favcolor" value="#ff0000"></input>
      <button style={{width:'25px',height:'25px'}}>X</button>
      </div>
    </div>
 
  

  <h1 className='C04id_Zoom' style={{marginTop:'10px',display:'flex',marginLeft:'40px'}}>0</h1>
 
{// Original Gray Scale Indicator  
}
    <div 
    style={{
    backgroundImage: 'linear-gradient(white, black)',
    marginTop:'10px',
    marginLeft:'40px',
    width:'40px',
    height:`calc(100vh - ${ (143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
    backgroundColor:'green',
    marginTop:'10px',
    width:'3px',
    height:`calc(100vh - ${ (143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
    backgroundImage: 'linear-gradient(white, black)',
    marginTop:'10px',
    marginLeft:'0px',
    width:'50px',
    height:`calc(100vh - ${ (143+20+200)}px )`
    }}>
    </div>
{// Gray Scale Setting
}
    {JSX_Threshold}    
  </div>  
 
<div
  style={{
  display:'flex'
  }}
  >
 
,paddingLeft:'0px'
 
export default U_Threshold
 
const U_Threshold = (
 
 - 40px
 
 - 40px
 
 - 40px
 
,marginTop:'10px'
 
 className='C04id_EditOkSet'
 
React, 
 
, useRef 
 
React, 
 

import 'react-image-crop/dist/ReactCrop.css';
 
import ReactCrop, { Crop } from 'react-image-crop';
 
import React, { useState , useEffect} from 'react';
 
import React, { useState , useEffect} from 'react';
 
import React, { useState , useEffect} from 'react';

import logo_Crop from './logo_Crop.png'
// https://stackoverflow.com/questions/43823289/how-to-import-image-svg-png-in-a-react-component
// https://www.flaticon.com/free-icon/crop_4818201?term=crop&page=1&position=4&origin=tag&related_id=4818201
import logo_Shape from './logo_Shape.png'
import logo_UpsideDown from './logo_UpsideDown.png'
 
 TotalWidth={TotalWidth}
 
 TotalWidth={TotalWidth}
 
TotalWidth,
 
TotalWidth:number
 
  let let_Width01=100
  let let_Width02=TotalWidth-let_Width01
 
TotalWidth,
 
TotalWidth:number
 
  let let_Width01=500
  let let_Width02=TotalWidth-let_Width01
 
 
 
 || SS_OpenPanel===2
 
    JSX_Threshold=<div style={{position:'absolute',marginLeft:'40px',backgroundColor:'darkred',marginTop:'200px',width:'230px',height:'3px'}}>
      <div style={{display:'flex'}}>
        <h1 style={{fontSize:'13px',marginRight:'-20px',marginTop:'-10px',marginLeft:'-25px'}}>112</h1>

      <button style={{width:'25px',height:'25px',marginLeft:'155px'}} >.</button>
      <button style={{width:'25px',height:'25px'}} >/</button>
      <input  style={{width:'25px',height:'25px'}} type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      <button style={{width:'25px',height:'25px'}}>X</button>
      </div>
    </div>
 
<div style={{display:'grid'}}>
    <div style={{display:'flex',height:'40px'}}>
      <button>Threshold</button>
      <button>Convolution</button>
    </div>
  {JSX_ImageProcessing}
  </div>
 
  let let_Width01=100
  let let_Width02=TotalWidth-let_Width01
 
<div style={{display:'grid'}}>
    <div style={{display:'flex',height:'40px'}}>
      <button>Threshold</button>
      <button>Convolution</button>
    </div>
  {JSX_ImageProcessing}
  </div>
 
</div>
 
</div>
 
  </div>
 
  <div style={{display:'inline-block'}}>
  <div style={{height:'40px',backgroundColor:'red',marginTop:'0px',borderBottom:'0px'}}><h1>H3ll0</h1></div>
 
  </div>
 
  <div style={{display:'inline-block'}}>
 
,marginTop:'auto'
 
</div>
 
<div id='C04id_Convolution' style={{width:`${let_Width02}px`}}>
{//****************************************************************************
// Gray Threshold
//****************************************************************************
}
 
  
 


    
 
  
 
    
 
</div>
 
    </div>
 
  <div id='C04id_Convolution' style={{width:`${let_Width02}px`}}>
 
id='C04id_Convolution'
 
    </div>
 
  <div id='C04id_Convolution' style={{width:`${let_Width02}px`}}>
 
  </div>
 
  <div style={{display:'inline-block'}}>
  <div style={{height:'0px'}}><h1>H3ll0</h1></div>
 
  <div style={{height:'0px'}}><h1>H3ll0</h1></div>
 
</div>
 

    {//****************************************************************************
    // Convolution
    //****************************************************************************
    }
 
    <div style={{height:`calc(50vh - ${ (143+20)}px )`,backgroundColor:'greenyellow'}}>
    <h1 className='C04id_Zoom' style={{paddingTop:'10px'}}>Convolution</h1>
    </div>
 
0.5*
 
    <div style={{height:`calc(100vh - ${ (143+20)}px )`,backgroundColor:'greenyellow'}}>
    <h1 className='C04id_Zoom' style={{paddingTop:'10px'}}>Convolution</h1>
    </div>
 
//****************************************************************************
// FUNCTION_00: Zoom setting
//****************************************************************************

 
tru
 
  { }
 
let_Width01,
 
  let_Width01:number
 
  let  =<></>
  if(let_Width02==0){
     =<></>
  }
  else{
     =<div id='C04id_Convolution' style={{width:`${let_Width02}px`}}>
    {//****************************************************************************
    // Gray Threshold
    //****************************************************************************
    }
    <div style={{height:`calc(50vh - ${0.5*(143+20)}px )`,backgroundColor:'lightblue'}}>
    <div style={{display:'flex'}}>
    <h1 className='C04id_Zoom' style={{paddingTop:'10px'}}>Gray Threshold</h1>
    <button style={{marginTop:'10px',marginRight:'15px'}}>Save</button>
    <button style={{marginTop:'10px',marginRight:'15px'}}>Reset</button>
    </div>

    <hr/>
    
    <div style={{display:'flex'}}>
    <h1 className='C04id_Zoom' style={{display:'flex',marginLeft:'20px',marginTop:'3px'}}>255</h1>
    <button style={{marginTop:'0px',marginRight:'15px'}}>Add Threshold</button>
    </div>
    <div
    style={{
      display:'flex'
    }}
    >
    {// Original Gray Scale Indicator  
    }
    <div 
    style={{
      backgroundImage: 'linear-gradient(white, black)',
      marginTop:'3px',
      marginLeft:'40px',
      width:'50px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
      backgroundColor:'green',
      marginTop:'3px',
      width:'3px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
      backgroundImage: 'linear-gradient(white, black)',
      marginTop:'3px',
      marginLeft:'0px',
      width:'50px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>

    {/* Transformed Gray Scale Indicator  
    }
    <div style={{display:'inline-block'}}>
    <div 
    style={{
      backgroundColor:'white',
      marginTop:'3px',
      marginLeft:'-50px',
      width:'50px',
      position:'relative',
      height:`${100}px`,
    }}>
    </div>
  </div>*/}

  {// Gray Scale Setting
    }
    {JSX_Threshold}
    
  </div>
  
  <h1 className='C04id_Zoom' style={{marginTop:'3px',display:'flex',marginLeft:'40px'}}>0</h1>
  </div>

    {//****************************************************************************
    // Convolution
    //****************************************************************************
    }
    <div style={{height:`calc(50vh - ${0.5*(143+20)}px )`,backgroundColor:'greenyellow'}}>
    <h1 className='C04id_Zoom' style={{paddingTop:'10px'}}>Convolution</h1>
    </div>

    </div>
  }
 

  {// Gray Scale Setting
    }
 

    {/* Transformed Gray Scale Indicator  
    }
    <div style={{display:'inline-block'}}>
    <div 
    style={{
      backgroundColor:'white',
      marginTop:'3px',
      marginLeft:'-50px',
      width:'50px',
      position:'relative',
      height:`${100}px`,
    }}>
    </div>
  </div>*/}
 
  let let_Width01=100
 
  
  //useEffect(()=>{
  //},[])

 
  //  JSX_Threshold=<div style={{position:'absolute',marginLeft:'40px',backgroundColor:'darkred',marginTop:'200px',width:'230px',height:'3px'}}>
  //    <div style={{display:'flex'}}>
  //      <h1 style={{fontSize:'13px',marginRight:'-20px',marginTop:'-10px',marginLeft:'-25px'}}>112</h1>
//
  //    <button style={{width:'25px',height:'25px',marginLeft:'155px'}} >.</button>
  //    <button style={{width:'25px',height:'25px'}} >/</button>
  //    <input  style={{width:'25px',height:'25px'}} type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
  //    <button style={{width:'25px',height:'25px'}}>X</button>
  //    </div>
  //  </div>
 
    {
    /*<input type="color" id="favcolor" name="favcolor" value="#ff0000"></input>
    <input></input>*/
    }
 
    {/*
    Attribute
    1. Font Name
    2. Font Size
    3. Color
    4. Utility
    */}
 
    {/*
    Attribute
    1. Type 
    2. Line Color
    3. Line Width
    4. Shape Color
    Type
    1. Rectangle
    2. Circle
    3. Line
    4. X Line
    5. Y Line
    */}
 
  // 0 = Shape
  // 1 = Text
  
 

  const [SS_EditSetting,setSS_EditSetting]=useState<0|1>(0)
 
<0|1>
 
  TotalWidth={TotalWidth}
 
TotalWidth,
 
TotalWidth:number,
 
  //let JSX_Setting=<div className='C04id_EditBody'>{JSX_SubSetting}</div>
  

  let let_Width01=100
  let let_Width02=TotalWidth-let_Width01
 

  }
 
  {JSX_Convolution}
 
 if(let_Width02==0){
    JSX_Convolution=<></>
  }
  else{
    JSX_Convolution=<div id='C04id_Convolution' style={{width:`${let_Width02}px`}}>
    {//****************************************************************************
    // Gray Threshold
    //****************************************************************************
    }
    <div style={{height:`calc(50vh - ${0.5*(143+20)}px )`,backgroundColor:'lightblue'}}>
    <div style={{display:'flex'}}>
    <h1 className='C04id_Zoom' style={{paddingTop:'10px'}}>Gray Threshold</h1>
    <button style={{marginTop:'10px',marginRight:'15px'}}>Save</button>
    <button style={{marginTop:'10px',marginRight:'15px'}}>Reset</button>
    </div>

    <hr/>
    
    <div style={{display:'flex'}}>
    <h1 className='C04id_Zoom' style={{display:'flex',marginLeft:'20px',marginTop:'3px'}}>255</h1>
    <button style={{marginTop:'0px',marginRight:'15px'}}>Add Threshold</button>
    </div>
    <div
    style={{
      display:'flex'
    }}
    >
    {// Original Gray Scale Indicator  
    }
    <div 
    style={{
      backgroundImage: 'linear-gradient(white, black)',
      marginTop:'3px',
      marginLeft:'40px',
      width:'50px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
      backgroundColor:'green',
      marginTop:'3px',
      width:'3px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
      backgroundImage: 'linear-gradient(white, black)',
      marginTop:'3px',
      marginLeft:'0px',
      width:'50px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>

    {/* Transformed Gray Scale Indicator  
    }
    <div style={{display:'inline-block'}}>
    <div 
    style={{
      backgroundColor:'white',
      marginTop:'3px',
      marginLeft:'-50px',
      width:'50px',
      position:'relative',
      height:`${100}px`,
    }}>
    </div>
  </div>*/}

  {// Gray Scale Setting
    }
    
  </div>
  
  <h1 className='C04id_Zoom' style={{marginTop:'3px',display:'flex',marginLeft:'40px'}}>0</h1>
  </div>

    {//****************************************************************************
    // Convolution
    //****************************************************************************
    }
    <div style={{height:`calc(50vh - ${0.5*(143+20)}px )`,backgroundColor:'greenyellow'}}>
    <h1 className='C04id_Zoom' style={{paddingTop:'10px'}}>Convolution</h1>
    </div>

    </div>
 
  let JSX_Convolution=<></>
 
//import './U_Toolbar.css'
 
  {JSX_Convolution}
 


  {// Gray Scale Setting
    }
    
  </div>
  
  <h1 className='C04id_Zoom' style={{marginTop:'3px',display:'flex',marginLeft:'40px'}}>0</h1>
  </div>

    {//****************************************************************************
    // Convolution
    //****************************************************************************
    }
    <div style={{height:`calc(50vh - ${0.5*(143+20)}px )`,backgroundColor:'greenyellow'}}>
    <h1 className='C04id_Zoom' style={{paddingTop:'10px'}}>Convolution</h1>
    </div>

    </div>
  }
 
  let JSX_Convolution=<></>
  if(let_Width02==0){
    JSX_Convolution=<></>
  }
  else{
    JSX_Convolution=<div id='C04id_Convolution' style={{width:`${let_Width02}px`}}>
    {//****************************************************************************
    // Gray Threshold
    //****************************************************************************
    }
    <div style={{height:`calc(50vh - ${0.5*(143+20)}px )`,backgroundColor:'lightblue'}}>
    <div style={{display:'flex'}}>
    <h1 className='C04id_Zoom' style={{paddingTop:'10px'}}>Gray Threshold</h1>
    <button style={{marginTop:'10px',marginRight:'15px'}}>Save</button>
    <button style={{marginTop:'10px',marginRight:'15px'}}>Reset</button>
    </div>

    <hr/>
    
    <div style={{display:'flex'}}>
    <h1 className='C04id_Zoom' style={{display:'flex',marginLeft:'20px',marginTop:'3px'}}>255</h1>
    <button style={{marginTop:'0px',marginRight:'15px'}}>Add Threshold</button>
    </div>
    <div
    style={{
      display:'flex'
    }}
    >
    {// Original Gray Scale Indicator  
    }
    <div 
    style={{
      backgroundImage: 'linear-gradient(white, black)',
      marginTop:'3px',
      marginLeft:'40px',
      width:'50px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
      backgroundColor:'green',
      marginTop:'3px',
      width:'3px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
      backgroundImage: 'linear-gradient(white, black)',
      marginTop:'3px',
      marginLeft:'0px',
      width:'50px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>

    {/* Transformed Gray Scale Indicator  
    }
    <div style={{display:'inline-block'}}>
    <div 
    style={{
      backgroundColor:'white',
      marginTop:'3px',
      marginLeft:'-50px',
      width:'50px',
      position:'relative',
      height:`${100}px`,
    }}>
    </div>
  </div>*/}
 
  let JSX_Ok=<div className='C04id_EditOk'> <button style={{marginLeft:'10px'}}>Ok</button> <button>Reset</button> </div>

 

  //let JSX_Setting=<div className='C04id_EditBody'>{JSX_SubSetting}</div>
  

 

  let JSX_Setting=<></>
  // 0 = Shape
  // 1 = Text
  
  if(SS_EditSetting===0){
    JSX_Setting=<div className='C04id_EditBody'>
      <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Type        </h1>
      <select id="cars" name="cars" className='C04id_EditOkSet'>
        <option value="volvo">Rectangle</option>
        <option value="volvo">Rectangle frame</option>
        <option value="saab">Circle</option>
        <option value="volvo">Circle frame</option>
        <option value="mercedes">Arrow</option>
        <option value="mercedes">2 Ways Arrow</option>
        <option value="audi">Line</option>
        <option value="audi">LineX</option>
        <option value="audi">LineY</option>
      </select>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Line Color  </h1>
      <input type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Line Width  </h1>
      <input className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Shape Color </h1>
      <input type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    </div>
  }
  else{
    JSX_Setting=<div className='C04id_EditBody'>
      <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'> 
      <h1>Font Name</h1>
      <select id="cars" name="cars" className='C04id_EditOkSet'>
        <option value="volvo">Arial</option>
      </select>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Font Size</h1>
      <input className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'> 
      <h1>Color</h1>
      <input type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Utility</h1>
      <select id="cars" name="cars" className='C04id_EditOkSet'>
        <option value="volvo">B</option>
        <option value="saab">I</option>
        <option value="mercedes">None</option>
        <option value="mercedes">Line</option>
      </select>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    </div>
  }
 
  {/****************************************************************************
    }
    <hr/>
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Edit Image Setting</h1>
    <div className='C04id_EditSetting'>
    <button className='C04id_Button' style={{marginLeft:'15px'}} onClick={()=>{setSS_EditSetting(0)}}>Shape</button>
    <button className='C04id_Button' style={{marginLeft:'20px'}} onClick={()=>{setSS_EditSetting(1)}}>Text</button>
    </div>
  {JSX_Setting*/}
 
//import './U_Toolbar.css'
 
//****************************************************************************
// FUNCTION_00: Zoom setting
//****************************************************************************
    function f_PosZoom(){
      if(SS_Zoom<10){
        let ss_Zoom=SS_Zoom 
        let let_Zoom = parseFloat((ss_Zoom+0.1).toFixed(1));
        setSS_Zoom(let_Zoom)
      }
    }
    function f_NegZoom(){
        if(SS_Zoom>0.1){
        let ss_Zoom=SS_Zoom 
        let let_Zoom = parseFloat((ss_Zoom-0.1).toFixed(1));
        setSS_Zoom(let_Zoom)
    }}
    function f_ResetZoom(){
        setSS_Zoom(1)
    }

    function f_Gray(){
      setSS_UseEffect(true)
      setSS_IsRGB(false)
    }

    function f_RGB(){
      setSS_UseEffect(true)
      setSS_IsRGB(true)
    }
 
TotalWidth
 

  const [SS_EditSetting,setSS_EditSetting]=useState<0|1>(0)
 
    {
    /*<input type="color" id="favcolor" name="favcolor" value="#ff0000"></input>
    <input></input>*/
    }
 
    {/*
    Attribute
    1. Type 
    2. Line Color
    3. Line Width
    4. Shape Color
    Type
    1. Rectangle
    2. Circle
    3. Line
    4. X Line
    5. Y Line
    */}
 
    {/*
    Attribute
    1. Font Name
    2. Font Size
    3. Color
    4. Utility
    */}
 
    <div style={{display:'flex',height:'100px'}}>
 
    {//****************************************************************************
    // Zoom Image
    //****************************************************************************
    }
    <div style={{display:'inline-block',margin:'auto'}}>
      <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Zoom: {SS_Zoom}</h1>
      <div style={{display:'flex',marginTop:'10px'}}>
    <button onClick={f_PosZoom} className='C04id_Zoom' style={{width:'28px'}}>+</button>
    <button onClick={f_NegZoom} className='C04id_Zoom' style={{width:'28px'}}>-</button>
      </div>
    <button onClick={f_ResetZoom} className='C04id_Button' >Reset</button>
    </div>

    <div style={{borderLeft:'3px solid #ffffff',height:'110px'}}>
    </div>

    {//****************************************************************************
    // RGB or Gray
    //****************************************************************************
    }
    <div style={{display:'inline-block', backgroundColor:'#33AAAA',marginLeft:'10px',margin:'auto'}}>
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Color</h1>
    <button onClick={f_Gray} className='C04id_Button'>Gray</button>
    <button onClick={f_RGB}  className='C04id_Button'>RGB</button>
    </div>
    </div>

    {//****************************************************************************
    // Edit Image
    //****************************************************************************
    }
    <hr/>
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Edit Image</h1>
    <div className='C04id_EditImage'>
    <button onClick={f_Gray} className='C04id_Button'><img  src={logo_Crop} style={{width:'100%',height:'100%'}} alt="fireSpot"/></button>
    <button onClick={f_Gray} className='C04id_Button'><img  src={logo_Shape} style={{width:'100%',height:'100%'}} alt="fireSpot"/></button>
    <button onClick={f_Gray} className='C04id_Button'><img  src={logo_UpsideDown} style={{width:'100%',height:'100%'}} alt="fireSpot"/></button>
    <button onClick={f_Gray} className='C04id_Button'>Text</button>
    <button className='C04id_Button'>Ok</button>
    <button className='C04id_Button' style={{fontSize:'16px',paddingLeft:'0px'}}>Reset</button>
    </div>
 
    {JSX_Threshold}
 

  const [SS_EditSetting,setSS_EditSetting]=useState<0|1>(0)
 

  
  useEffect(()=>{
    JSX_Threshold=<div style={{position:'absolute',marginLeft:'40px',backgroundColor:'darkred',marginTop:'200px',width:'230px',height:'3px'}}>
      <div style={{display:'flex'}}>
        <h1 style={{fontSize:'13px',marginRight:'-20px',marginTop:'-10px',marginLeft:'-25px'}}>112</h1>

      <button style={{width:'25px',height:'25px',marginLeft:'155px'}} >.</button>
      <button style={{width:'25px',height:'25px'}} >/</button>
      <input  style={{width:'25px',height:'25px'}} type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      <button style={{width:'25px',height:'25px'}}>X</button>
      </div>
    </div>
  },[])
 
  let JSX_Threshold=<div style={{position:'absolute',marginLeft:'40px',backgroundColor:'darkred',marginTop:'200px',width:'230px',height:'3px'}}>
      <div style={{display:'flex'}}>
        <h1 style={{fontSize:'13px',marginRight:'-20px',marginTop:'-10px',marginLeft:'-25px'}}>112</h1>

      <button style={{width:'25px',height:'25px',marginLeft:'155px'}} >.</button>
      <button style={{width:'25px',height:'25px'}} >/</button>
      <input  style={{width:'25px',height:'25px'}} type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      <button style={{width:'25px',height:'25px'}}>X</button>
      </div>
    </div>
 

import './U_Toolbar.css'
import logo_Crop from './logo_Crop.png'
// https://stackoverflow.com/questions/43823289/how-to-import-image-svg-png-in-a-react-component
// https://www.flaticon.com/free-icon/crop_4818201?term=crop&page=1&position=4&origin=tag&related_id=4818201
import logo_Shape from './logo_Shape.png'
import logo_UpsideDown from './logo_UpsideDown.png'
 
SS_Zoom:number,
setSS_Zoom:(S:number)=>void
setSS_IsRGB:(S:boolean)=>void
setSS_UseEffect:(S:boolean)=>void
 
SS_Zoom,
setSS_Zoom,
setSS_IsRGB,
setSS_UseEffect,
 

/*
Note
* SS_EditSetting = Edit Image Setting
Shape
* Attribute
* 1. Type 
* 2. Line Color
* 3. Line Width
* 4. Shape Color
* Type
* 1. Rectangle
* 2. Circle
* 3. Line
* 4. X Line
* 5. Y Line

Text
* Attribute
* 1. Font Name
* 2. Font Size
* 3. Color
* 4. Utility
*/
 
  let JSX_Ok=<div className='C04id_EditOk'> <button style={{marginLeft:'10px'}}>Ok</button> <button>Reset</button> </div>

  let JSX_Setting=<></>
  // 0 = Shape
  // 1 = Text
  

 
if(SS_EditSetting===0){
    JSX_Setting=<div className='C04id_EditBody'>
      <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Type        </h1>
      <select id="cars" name="cars" className='C04id_EditOkSet'>
        <option value="volvo">Rectangle</option>
        <option value="volvo">Rectangle frame</option>
        <option value="saab">Circle</option>
        <option value="volvo">Circle frame</option>
        <option value="mercedes">Arrow</option>
        <option value="mercedes">2 Ways Arrow</option>
        <option value="audi">Line</option>
        <option value="audi">LineX</option>
        <option value="audi">LineY</option>
      </select>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Line Color  </h1>
      <input type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Line Width  </h1>
      <input className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Shape Color </h1>
      <input type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    </div>
  }
  else{
    JSX_Setting=<div className='C04id_EditBody'>
      <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'> 
      <h1>Font Name</h1>
      <select id="cars" name="cars" className='C04id_EditOkSet'>
        <option value="volvo">Arial</option>
      </select>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Font Size</h1>
      <input className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'> 
      <h1>Color</h1>
      <input type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Utility</h1>
      <select id="cars" name="cars" className='C04id_EditOkSet'>
        <option value="volvo">B</option>
        <option value="saab">I</option>
        <option value="mercedes">None</option>
        <option value="mercedes">Line</option>
      </select>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    </div>
  }
 
  const [SS_EditSetting,setSS_EditSetting]=useState<0|1>(0)
 
  //let JSX_Setting=<div className='C04id_EditBody'>{JSX_SubSetting}</div>
 
  let JSX_Convolution=<></>
  if(let_Width02==0){
    JSX_Convolution=<></>
  }
  else{
    JSX_Convolution=<></>
  }
 
    function f_PosZoom(){
      if(SS_Zoom<10){
        let ss_Zoom=SS_Zoom 
        let let_Zoom = parseFloat((ss_Zoom+0.1).toFixed(1));
        setSS_Zoom(let_Zoom)
      }
    }
    function f_NegZoom(){
        if(SS_Zoom>0.1){
        let ss_Zoom=SS_Zoom 
        let let_Zoom = parseFloat((ss_Zoom-0.1).toFixed(1));
        setSS_Zoom(let_Zoom)
    }}
    function f_ResetZoom(){
        setSS_Zoom(1)
    }

    function f_Gray(){
      setSS_UseEffect(true)
      setSS_IsRGB(false)
    }

    function f_RGB(){
      setSS_UseEffect(true)
      setSS_IsRGB(true)
    }
 
<div id='C04id_Convolution' style={{width:`${let_Width02}px`}}>
    {//****************************************************************************
    // Gray Threshold
    //****************************************************************************
    }
    <div style={{height:`calc(50vh - ${0.5*(143+20)}px )`,backgroundColor:'lightblue'}}>
    <div style={{display:'flex'}}>
    <h1 className='C04id_Zoom' style={{paddingTop:'10px'}}>Gray Threshold</h1>
    <button style={{marginTop:'10px',marginRight:'15px'}}>Save</button>
    <button style={{marginTop:'10px',marginRight:'15px'}}>Reset</button>
    </div>

    <hr/>
    
    <div style={{display:'flex'}}>
    <h1 className='C04id_Zoom' style={{display:'flex',marginLeft:'20px',marginTop:'3px'}}>255</h1>
    <button style={{marginTop:'0px',marginRight:'15px'}}>Add Threshold</button>
    </div>
    <div
    style={{
      display:'flex'
    }}
    >
    {// Original Gray Scale Indicator  
    }
    <div 
    style={{
      backgroundImage: 'linear-gradient(white, black)',
      marginTop:'3px',
      marginLeft:'40px',
      width:'50px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
      backgroundColor:'green',
      marginTop:'3px',
      width:'3px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
      backgroundImage: 'linear-gradient(white, black)',
      marginTop:'3px',
      marginLeft:'0px',
      width:'50px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>

    {/* Transformed Gray Scale Indicator  
    }
    <div style={{display:'inline-block'}}>
    <div 
    style={{
      backgroundColor:'white',
      marginTop:'3px',
      marginLeft:'-50px',
      width:'50px',
      position:'relative',
      height:`${100}px`,
    }}>
    </div>
  </div>*/}

  {// Gray Scale Setting
    }
    {JSX_Threshold}
    
  </div>
  
  <h1 className='C04id_Zoom' style={{marginTop:'3px',display:'flex',marginLeft:'40px'}}>0</h1>
  </div>

    {//****************************************************************************
    // Convolution
    //****************************************************************************
    }
    <div style={{height:`calc(50vh - ${0.5*(143+20)}px )`,backgroundColor:'greenyellow'}}>
    <h1 className='C04id_Zoom' style={{paddingTop:'10px'}}>Convolution</h1>
    </div>

    </div>
 

  let JSX_Setting=<></>
  // 0 = Shape
  // 1 = Text
 
  
  if(SS_EditSetting===0){
    JSX_Setting=
  }
 
<div className='C04id_EditBody'>
      <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Type        </h1>
      <select id="cars" name="cars" className='C04id_EditOkSet'>
        <option value="volvo">Rectangle</option>
        <option value="volvo">Rectangle frame</option>
        <option value="saab">Circle</option>
        <option value="volvo">Circle frame</option>
        <option value="mercedes">Arrow</option>
        <option value="mercedes">2 Ways Arrow</option>
        <option value="audi">Line</option>
        <option value="audi">LineX</option>
        <option value="audi">LineY</option>
      </select>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Line Color  </h1>
      <input type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Line Width  </h1>
      <input className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Shape Color </h1>
      <input type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    </div>
  }
  else{
    JSX_Setting=<div className='C04id_EditBody'>
      <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'> 
      <h1>Font Name</h1>
      <select id="cars" name="cars" className='C04id_EditOkSet'>
        <option value="volvo">Arial</option>
      </select>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Font Size</h1>
      <input className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'> 
      <h1>Color</h1>
      <input type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    <div className='C04id_EditSettingRow'>
      <h1>Utility</h1>
      <select id="cars" name="cars" className='C04id_EditOkSet'>
        <option value="volvo">B</option>
        <option value="saab">I</option>
        <option value="mercedes">None</option>
        <option value="mercedes">Line</option>
      </select>
      {JSX_Ok}
    </div>
    <hr className='C04id_EditSetting'/>
    </div>
  }
  //let JSX_Setting=<div className='C04id_EditBody'>{JSX_SubSetting}</div>
  

  let let_Width01=100
  let let_Width02=TotalWidth-let_Width01
  let JSX_Convolution=<></>
  if(let_Width02==0){
    JSX_Convolution=<></>
  }
  else{
    JSX_Convolution=<div id='C04id_Convolution' style={{width:`${let_Width02}px`}}>
    {//****************************************************************************
    // Gray Threshold
    //****************************************************************************
    }
    <div style={{height:`calc(50vh - ${0.5*(143+20)}px )`,backgroundColor:'lightblue'}}>
    <div style={{display:'flex'}}>
    <h1 className='C04id_Zoom' style={{paddingTop:'10px'}}>Gray Threshold</h1>
    <button style={{marginTop:'10px',marginRight:'15px'}}>Save</button>
    <button style={{marginTop:'10px',marginRight:'15px'}}>Reset</button>
    </div>

    <hr/>
    
    <div style={{display:'flex'}}>
    <h1 className='C04id_Zoom' style={{display:'flex',marginLeft:'20px',marginTop:'3px'}}>255</h1>
    <button style={{marginTop:'0px',marginRight:'15px'}}>Add Threshold</button>
    </div>
    <div
    style={{
      display:'flex'
    }}
    >
    {// Original Gray Scale Indicator  
    }
    <div 
    style={{
      backgroundImage: 'linear-gradient(white, black)',
      marginTop:'3px',
      marginLeft:'40px',
      width:'50px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
      backgroundColor:'green',
      marginTop:'3px',
      width:'3px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>
    <div 
    style={{
      backgroundImage: 'linear-gradient(white, black)',
      marginTop:'3px',
      marginLeft:'0px',
      width:'50px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`
    }}>
    </div>

    {/* Transformed Gray Scale Indicator  
    }
    <div style={{display:'inline-block'}}>
    <div 
    style={{
      backgroundColor:'white',
      marginTop:'3px',
      marginLeft:'-50px',
      width:'50px',
      position:'relative',
      height:`${100}px`,
    }}>
    </div>
  </div>*/}

  {// Gray Scale Setting
    }
    {JSX_Threshold}
    
  </div>
  
  <h1 className='C04id_Zoom' style={{marginTop:'3px',display:'flex',marginLeft:'40px'}}>0</h1>
  </div>

    {//****************************************************************************
    // Convolution
    //****************************************************************************
    }
    <div style={{height:`calc(50vh - ${0.5*(143+20)}px )`,backgroundColor:'greenyellow'}}>
    <h1 className='C04id_Zoom' style={{paddingTop:'10px'}}>Convolution</h1>
    </div>

    </div>
 
  </>
 
  <>
 
  
    {JSX_Setting}
  </div>
 
<div className='C04id_Toolbar'
    style={{
      width:`${200}px`,
      height:`calc(100vh - ${143+20}px)`,
      }}>
    
    <div style={{display:'flex',height:'100px'}}>
    {//****************************************************************************
    // Zoom Image
    //****************************************************************************
    }
    <div style={{display:'inline-block',margin:'auto'}}>
      <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Zoom: {SS_Zoom}</h1>
      <div style={{display:'flex',marginTop:'10px'}}>
    <button onClick={f_PosZoom} className='C04id_Zoom' style={{width:'28px'}}>+</button>
    <button onClick={f_NegZoom} className='C04id_Zoom' style={{width:'28px'}}>-</button>
      </div>
    <button onClick={f_ResetZoom} className='C04id_Button' >Reset</button>
    </div>

    <div style={{borderLeft:'3px solid #ffffff',height:'110px'}}>
    </div>

    {//****************************************************************************
    // RGB or Gray
    //****************************************************************************
    }
    <div style={{display:'inline-block', backgroundColor:'#33AAAA',marginLeft:'10px',margin:'auto'}}>
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Color</h1>
    <button onClick={f_Gray} className='C04id_Button'>Gray</button>
    <button onClick={f_RGB}  className='C04id_Button'>RGB</button>
    </div>
    </div>

    {//****************************************************************************
    // Edit Image
    //****************************************************************************
    }
    <hr/>
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Edit Image</h1>
    <div className='C04id_EditImage'>
    <button onClick={f_Gray} className='C04id_Button'><img  src={logo_Crop} style={{width:'100%',height:'100%'}} alt="fireSpot"/></button>
    <button onClick={f_Gray} className='C04id_Button'><img  src={logo_Shape} style={{width:'100%',height:'100%'}} alt="fireSpot"/></button>
    <button onClick={f_Gray} className='C04id_Button'><img  src={logo_UpsideDown} style={{width:'100%',height:'100%'}} alt="fireSpot"/></button>
    <button onClick={f_Gray} className='C04id_Button'>Text</button>
    <button className='C04id_Button'>Ok</button>
    <button className='C04id_Button' style={{fontSize:'16px',paddingLeft:'0px'}}>Reset</button>
    </div>

    {//****************************************************************************
    // Edit Image Setting
    //****************************************************************************
    }
    <hr/>
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Edit Image Setting</h1>
    <div className='C04id_EditSetting'>
    {
    /*<input type="color" id="favcolor" name="favcolor" value="#ff0000"></input>
    <input></input>*/
    }
    <button className='C04id_Button' style={{marginLeft:'15px'}} onClick={()=>{setSS_EditSetting(0)}}>Shape</button>
    {/*
    Attribute
    1. Type 
    2. Line Color
    3. Line Width
    4. Shape Color
    Type
    1. Rectangle
    2. Circle
    3. Line
    4. X Line
    5. Y Line
    */}
    <button className='C04id_Button' style={{marginLeft:'20px'}} onClick={()=>{setSS_EditSetting(1)}}>Text</button>
    {/*
    Attribute
    1. Font Name
    2. Font Size
    3. Color
    4. Utility
    */}
    </div>
 
<div style={{position:'absolute',marginLeft:'40px',backgroundColor:'darkred',marginTop:'200px',width:'230px',height:'3px'}}>
      <div style={{display:'flex'}}>
        <h1 style={{fontSize:'13px',marginRight:'-20px',marginTop:'-10px',marginLeft:'-25px'}}>112</h1>

      <button style={{width:'25px',height:'25px',marginLeft:'155px'}} >.</button>
      <button style={{width:'25px',height:'25px'}} >/</button>
      <input  style={{width:'25px',height:'25px'}} type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      <button style={{width:'25px',height:'25px'}}>X</button>
      </div>
    </div>
 
<div style={{position:'absolute',marginLeft:'40px',backgroundColor:'darkred',marginTop:'200px',width:'230px',height:'3px'}}>
      <div style={{display:'flex'}}>
        <h1 style={{fontSize:'13px',marginRight:'-20px',marginTop:'-10px',marginLeft:'-25px'}}>112</h1>

      <button style={{width:'25px',height:'25px',marginLeft:'155px'}} >.</button>
      <button style={{width:'25px',height:'25px'}} >/</button>
      <input  style={{width:'25px',height:'25px'}} type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      <button style={{width:'25px',height:'25px'}}>X</button>
      </div>
    </div>
 
<div style={{position:'absolute',marginLeft:'40px',backgroundColor:'darkred',marginTop:'200px',width:'230px',height:'3px'}}>
      <div style={{display:'flex'}}>
        <h1 style={{fontSize:'13px',marginRight:'-20px',marginTop:'-10px',marginLeft:'-25px'}}>112</h1>

      <button style={{width:'25px',height:'25px',marginLeft:'155px'}} >.</button>
      <button style={{width:'25px',height:'25px'}} >/</button>
      <input  style={{width:'25px',height:'25px'}} type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      <button style={{width:'25px',height:'25px'}}>X</button>
      </div>
    </div>
  </div>
 
<div style={{position:'absolute',marginLeft:'40px',backgroundColor:'darkred',marginTop:'100px',width:'230px',height:'3px'}}>
      <div style={{display:'flex'}}>
        <h1 style={{fontSize:'13px',marginRight:'-20px',marginTop:'-10px',marginLeft:'-25px'}}>112</h1>
      <button style={{width:'25px',height:'25px',marginLeft:'155px'}} >.</button>
      <button style={{width:'25px',height:'25px'}} >/</button>
      <input  style={{width:'25px',height:'25px'}} type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      <button style={{width:'25px',height:'25px'}}>X</button>
      </div>
    </div>
 
let JSX_Threshold=<div style={{position:'absolute',marginLeft:'40px',backgroundColor:'darkred',marginTop:'100px',width:'230px',height:'3px'}}>
      <div style={{display:'flex'}}>
        <h1 style={{fontSize:'13px',marginRight:'-20px',marginTop:'-10px',marginLeft:'-25px'}}>112</h1>
      <button style={{width:'25px',height:'25px',marginLeft:'155px'}} >.</button>
      <button style={{width:'25px',height:'25px'}} >/</button>
      <input  style={{width:'25px',height:'25px'}} type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      <button style={{width:'25px',height:'25px'}}>X</button>
      </div>
    </div>
 
<div style={{position:'absolute',marginLeft:'40px',backgroundColor:'darkred',marginTop:'100px',width:'230px',height:'3px'}}>
      <div style={{display:'flex'}}>
        <h1 style={{fontSize:'13px',marginRight:'-20px',marginTop:'-10px',marginLeft:'-25px'}}>112</h1>
      <button style={{width:'25px',height:'25px',marginLeft:'155px'}} >.</button>
      <button style={{width:'25px',height:'25px'}} >/</button>
      <input  style={{width:'25px',height:'25px'}} type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      <button style={{width:'25px',height:'25px'}}>X</button>
      </div>
    </div>
 
      //height:`calc( 50vh - ${0.5*(143+20+200)}px - ${100}px )`,
 
    {/*<div 
    style={{
      backgroundColor:'gray',
      marginTop:`calc( 3px + ${(100)}px)`,
      marginLeft:'0px',
      width:'50px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`,
    }}>
  </div>*/}
 
<h1 style={{fontSize:'13px'}}>112</h1>
 
<h1 style={{fontSize:'13px'}}>112</h1>
 
</div>
 
<button style={{marginTop:'10px',marginRight:'15px'}}>Add Threshold</button>
 
white, 
 
,marginLeft:'175px'
 
,marginLeft:'175px'
 
calc( 50vh - ${0.5*(143+20+200)}px - 
 
50vh - ${0.5*(143+20+200)}px - () 50vh - ${0.5*(143+20+200)}px - 
 
0.5*
 
(50vh + 
 
+(103)
 
*/}
 
</div>
 
{// Gray Scale Setting
    }
 
    {/*

    <div 
    style={{
      backgroundColor:'white',
      marginTop:'3px',
      marginLeft:'70px',
      width:'50px',
      height:`calc(50vh - ${0.5*(143+20+200)}px )`,
    }}>
  </div>*/}
 
<div style={{marginLeft:'20px',backgroundColor:'black',marginTop:'100px',width:'250px',height:'5px'}}>
      <div style={{display:'flex'}}>
      <button style={{width:'30px',height:'30px',marginLeft:'160px'}} >.</button>
      <input style={{width:'30px' ,height:'30px'}} type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      <button style={{width:'30px',height:'30px'}}>X</button>
      </div>
    </div>
 
    <div style={{marginLeft:'20px',backgroundColor:'black',marginTop:'100px',width:'250px',height:'5px'}}>
      <div style={{display:'flex'}}>
      <button style={{width:'30px',height:'30px',marginLeft:'160px'}} >.</button>
      <input style={{width:'30px' ,height:'30px'}} type="color" id="favcolor" name="favcolor" value="#ff0000" className='C04id_EditOkSet'></input>
      <button style={{width:'30px',height:'30px'}}>X</button>
      </div>
      </div>
 
      // position:'absolute',
 
      // position:'absolute'
 
 style={{marginLeft:'10px'}}
 
marginLeft:'10px'
 
    <div></div>
 
className='C04id_EditOkSet' 
 
style={{marginLeft:'100px'}}
 
</div>
 
,display:'grid'
 
Lef
 
</div>
 
<h1>hii</h1>
 
</div>
 
    <button>add</button>
 
  style={{marginTop:'10px'}}
 
    style={{marginTop:'10px'}}
 
paddingTop:'20px'
 
paddingTop:'20px'
 
    <button>add</button>
    <h1 className='C04id_Zoom'  style={{marginTop:'10px'}}>255</h1>
    <div style={{marginLeft:'20px',backgroundColor:'#33FFFF',width:'5px',height:`calc(50vh - ${0.5*(143+20+200)}px )`}}></div>
    <h1 className='C04id_Zoom'    style={{marginTop:'10px'}}>0</h1>
 
    <hr/>
 
</div>
 
+150+100
 
+100+150+100
 
    <hr/>
 
{/****************************************************************************
    // Gray Threshold
    //****************************************************************************
    }
    <hr/>
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Gray Threshold</h1>
    <button>add</button>
    <h1 className='C04id_Zoom'  style={{marginTop:'10px'}}>255</h1>
    <div style={{marginLeft:'20px',backgroundColor:'#33FFFF',width:'5px',height:`calc(100vh - ${143+20+100+150+100}px)`}}></div>
    <h1 className='C04id_Zoom'    style={{marginTop:'10px'}}>0</h1>
 
        <option value="saab">Saab 95</option>
        <option value="mercedes">Mercedes SLK</option>
        <option value="audi">Audi TT</option>
 
        <option value="audi">Audi TT</option>
 
style={{marginLeft:'10px'}}
 
    margin-left: auto;
 
    margin-left: calc(auto + 5px)
 
tr style={{marginTop:'-10px'}}
 
tr style={{marginTop:'-10px'}}
 
style={{marginTop:'-50px'}}
 
  const JSX_InputNumber=(Id:string)=>{return(<input className='C04id_EditOk' id={'C04id_'+Id}></input>)}
  const JSX_InputColor=(Id:string)=>{return(<input className='C04id_EditOk' id={'C04id_'+Id}></input>)}
  const JSX_InputOption=(Id:string)=>{return(<input className='C04id_EditOk' id={'C04id_'+Id}></input>)}
 

  let let_SettingShape=[
    {title:'Type'       ,input:JSX_InputNumber('44'),},
    {title:'Line Color' ,input:JSX_InputNumber('44'),},
    {title:'Shape Color',input:JSX_InputNumber('44'),},
    {title:'Line Width' ,input:JSX_InputNumber('44'),},
  ]
  let let_SettingText=[
    {title:'Font Name'},
    {title:'Font Size'},
    {title:'Color'    },
    {title:'Font Mode'},
  ]
 
    /*
    JSX_SubSetting=let_SettingShape.map((setting)=>{
      return(
      <tr> 
        <td> 
          <h1>{setting.title}</h1> 
          <input className='C04id_EditOk'></input> 
          <div className='C04id_EditOk' style={{marginTop:'5px'}}> <button>Ok</button> <button style={{marginLeft:'10px'}}>Reset</button> </div>
        </td>
      </tr>
      )})
      */
 
    /*
    JSX_SubSetting=let_SettingText.map((setting)=>{
      return(
        
      <tr> 
        <td> 
          <h1>{setting.title}</h1> 
          <input className='C04id_EditOk'></input> 
          <div className='C04id_EditOk' style={{marginTop:'5px'}}> <button>Ok</button> <button style={{marginLeft:'10px'}}>Reset</button> </div>
        </td>
      </tr>
      )})
    */
 
    /*
    JSX_Setting=<div className='C04id_EditBody'>
    <tr> <td> <h1>Type        </h1> <input></input> {JSX_Ok}</td></tr>
    <tr> <td> <h1>Line Color  </h1> <input></input> {JSX_Ok}</td></tr>
    <tr> <td> <h1>Line Width  </h1> <input></input> {JSX_Ok}</td></tr>
    <tr> <td> <h1>Shape Color </h1> <input></input> {JSX_Ok}</td></tr>
    </div>*/
 
    /*
    JSX_Setting=<div className='C04id_EditBody'>
    <tr> <td><h1>Font Name</h1><input></input>{JSX_Ok}</td></tr>
    <tr> <td><h1>Font Size</h1><input></input>{JSX_Ok}</td></tr>
    <tr> <td><h1>Color</h1><input></input>    {JSX_Ok}</td></tr>
    <tr> <td><h1>Utility</h1><input></input>  {JSX_Ok}</td></tr>
    </div>*/
 
       
 
{title:'Shape Color'}
 
    width:35px
 
let JSX_Setting=
 
Type        
 
{JSX_Setting}
 
Type
 
</td>
 
  // SS_EditSetting = Edit Image Setting

 
    
 
    
 
  <button className='C04id_Button' style={{marginLeft:'10px'}}>Shape</button>
 
    */}
 
    {/*
 
/I/None
 
 style={nbStyle.logo} 
 
    <button onClick={f_Gray} className='C04id_Button'>Font</button>
 
    <button onClick={f_Gray} className='C04id_Button'>Rectangle</button>
    <button onClick={f_Gray} className='C04id_Button'>Upside</button>
 
    <input></input>
 
    <input type="color" id="favcolor" name="favcolor" value="#ff0000"></input>
 
<button onClick={f_Gray} className='C04id_Button'>Upside</button>
 
<button onClick={f_Gray} className='C04id_Button'>Crop</button>
 
<button onClick={f_Gray} className='C04id_Button'>Color</button>
 
<button onClick={f_Gray} className='C04id_Button'>Upside</button>
 
<h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Edit Image</h1>
 
 style={{display:'inline-block', backgroundColor:'#33AAAA',marginLeft:'10px',margin:'auto'}}
 
    <button onClick={f_RGB}  className='C04id_Button'>RGB</button>
 
?IsRGB=
 
IsRGB=
 
.file['file']#
 
          //formData.append('IsRGB', SS_IsRGB ? 'true' : 'false');
          alert(JSON.stringify(formData))
          alert(SS_IsRGB.toString())
 
setSS_IsRGB(false)
 
,port=5001)
 
          formData.append('IsRGB', SS_IsRGB);
 
    //const res = await fetch('/def_TheGreatestShowMustGoOn');
    //const imageBlob = await res.blob();
    //const imageObjectURL = URL.createObjectURL(imageBlob);
    //setSS_Image(imageObjectURL);
 
SS_Image,SS_ImageFile,SS_IsRGB
 
      if(SS_ImageFile!==null){

      }
 
        setSS_ImageFile(file)
        /*
 
    const formData = new FormData();
        formData.append('file', SS_ImageFile);

        fetch('/def_OpenCV', {
            method: 'POST',
            body: formData,
        })
        .then((response) => {
            return response.blob();
        })
        .then((data) => {
            const imageURL = URL.createObjectURL(data);
            setSS_Image(imageURL);
        })
        .catch((error) => {
            console.error('Error uploading file:', error);
        });
 
Image
 
Image
 
  const Ref_C04 = useRef<HTMLDivElement | null>(null);
  let let_RightToolW=100
 
  //let JSX_HelloPy=SS_HelloPy!.map(name=><h1>{name}</h1>)
 
    //alert(JSON.stringify(event.target.files))
 
            // Assuming the response is an image
 
            // Create a Data URL from the blob and set it as the source for an image element
 
    /*
    if (file) {
      const let_ImageURL = URL.createObjectURL(file);
      let let_path = file.name || "Path information not available";
      alert(let_path)
      setSS_Image(let_ImageURL);
    }
    */
  
    /*
    fetch('/def_TheGreatestShowMustGoOn')
        .then((res) => res.json())
        .then((data) => {
            //alert(JSON.stringify(data));
            const base64 = btoa(new Uint8Array(data).reduce((data, byte) => data + String.fromCharCode(byte), ''));
            const let_ImageURL = `data:image/png;base64,${base64}`;
            setSS_Image(let_ImageURL);
            //setSS_Image(data);
        })
        .catch((error) => {
            console.error('Error fetching image:', error);
            // Handle the error appropriately
        })
  */
    // by ChatGPT
    /*
    const file = event.target.files?.[0];
    alert(JSON.stringify(event.target.files))
    if (file) {
      const let_ImageURL = URL.createObjectURL(file);
      //setSS_Image(let_ImageURL);
      try {
        //alert('Bam')
        fetch("/Image/"+let_ImageURL.toString())
            .then((res) => res.json())
            .then((data) => {
                setSS_Image(data.py);
            });
        } catch (error) {
        console.error("Error fetching data:", error);
        }
    }
  */
 
//style={SS_WidthImage>0 ? {width:SS_WidthImage.toString()+'px'} : {width:'100%'}}
 
      //marginTop:`calc(100vh - ${(143+20)}px - 100vh + ${(143+40)}px )`,
      //height:`calc(${SS_Zoom} * 100vh - ${SS_Zoom*(143+40)}px)`,
 
    
    //{
    //  // W
    //  width: `calc( ${SS_Zoom} * ${SS_CropImage[0]}%)`,
    //  // H
    //  height:`${SS_CropImage[1]}%`,
    //  // X
    //  objectPosition:`${SS_CropImage[2]}% 0%`,
    //  // Y
    //  marginTop:`calc( ${SS_Zoom} * 100 - ${SS_Zoom} * ${SS_CropImage[3]}% )`,
    //  // Utility
    //  objectFit: 'cover',
    //}
    
 
  const Ref_C04 = useRef<HTMLDivElement | null>(null);
  let let_RightToolW=100
 
+100
 
    <div style={{display:'inline-block', backgroundColor:'#33AAAA'}}>
 
    </div>
 
    <hr/>
 
    function f_Relu(x:number):number{
      if(x>1){
        return x
      }
      else{
        return 1
      }
    }
 
,margin:'auto'
 
style={{marginTop:'10px'}}
 
      some other content
 
e
 
,marginRight:'10px'
 
,marginRight:'2px'
 
,marginLeft:'2px'
 
    <div style={{display:'flex',backgroundColor:'black',borderLeft:'6px solid green'}}></div>

 
<div style={{display:'inline-block', backgroundColor:'#33AAAA',marginLeft:'10px'}}>
    <h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Color</h1>
    <button onClick={f_ResetZoom} className='C04id_Button'>Gray</button>
    <button onClick={f_ResetZoom} className='C04id_Button'>RGB</button>
    </div>
 
<h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Zoom: {SS_Zoom}</h1>
 
    <div style={{display:'flex',borderLeft: '6px solid green'}}></div>
 
  
 
  height: 500px;
 
    <hr/>
 
</div>
 
display:'inline-block',
 
<h1 className='C04id_Zoom' style={{marginTop:'10px'}}>Gray Threshold</h1>
    <h1 className='C04id_Button'>0-100</h1>
    <h1>100</h1>
 
 = 100<
 
<div style={{backgroundColor:'red'}}></div>
 
 Setting
 
    margin: auto;
    padding: auto;
 
    padding: auto;
 
</div>
 
style={{width:'60px',marginTop:'5px',fontSize:'15px'}}
 

    margin:auto;
    padding:auto;
 
    width:22px; 
    height:20px;
 
    /*
    width:  var(--C04_ZoomButton);
    height: var(--C04_ZoomButton);
    */
    
 
font-size: var(--C04_FintSize);
 
marginTop:'10px'
 
    font-size:20px;
 
      backgroundColor:'greenyellow'
 
backgroundColor:'greenyellow'}
 
style={{width:'70px',marginTop:'5px'}}
 
    font-size:20px;
 
*0.5
 
0.5*
 
*f_Relu(SS_Zoom)
 
*0.5
 
0.5*
 
0.5*
 
0.5*
 
      height:`100%`,
      width:`100%`,
 
      overflowX:'scroll'
 
            // Handle the error appropriately
 
        .then((response) => response.json())
        .then((data) => {
            // Process the response data as needed
            setSS_Image(data.py);
        })
        .catch((error) => {
            alert('Error uploading file:'+JSON.stringify(error));
            // Handle the error appropriately
        });
 
  }
 
      
    /*
    
 
const file = event.target.files?.[0];
    //alert(JSON.stringify(event.target.files))
    if (file) {
      const let_ImageURL = URL.createObjectURL(file);
      //setSS_Image(let_ImageURL);
    }
 

.C04id_Image {
    /*width: calc(100% - var(--C04_RightToolW));*/

}

 
Reverse
 
Reverse
 
    /*
    const file = event.target.files?.[0];
    //alert(JSON.stringify(event.target.files))
    if (file) {
      const let_ImageURL = URL.createObjectURL(file);
      //setSS_Image(let_ImageURL);
    }
  */
 
    overflow-y: scroll;
    overflow-x: scroll;
 
    function f_ReverseRelu(x:number):number{
      if(x>1){
        return x
      }
      else{
        return 1
      }
    }
 
0.5*
 
${0.5} *
 
 ${0.5}*
 
SS_Zoom*
 
*SS_Zoom
 
*f_ReverseRelu(SS_Zoom)
 
*f_ReverseRelu(SS_Zoom)
 
${SS_Zoom} * 
 
overflow-x: scroll;
 
overflow-x: scroll;
 
  // Dynamic CSS Setting for Image Width
 
const imageUrl = "https://i.imgur.com/fHyEMsl.jpg";
 
const imageUrl = "https://i.imgur.com/fHyEMsl.jpg";
 
fetch('/def_TheGreatestShowMustGoOn')
        .then((res) => res.json())
        .then((data) => {
            //alert(JSON.stringify(data));
            setSS_Image(data);
        });
 
/*
 
  };
 
      //try {
      //  //alert('Bam')
      //  fetch("/Image/"+let_ImageURL.toString())
      //      .then((res) => res.json())
      //      .then((data) => {
      //          setSS_Image(data.py);
      //      });
      //  } catch (error) {
      //  console.error("Error fetching data:", error);
      //  }
 
    
    # Set appropriate content type in response headers
 
    
    # Convert the processed image to bytes
 
    
    # Apply grayscale conversion
 
    
    # Read the original image
 

    #response = Response(img)# content_type='image/png')

 

    return jsonify({'py':img})

 
  useEffect(() => { 
    
  },[SS_Image])
 
ment.getElementById('C04id_Canvas')as HTMLElement)
 
      const let_CurrentWidthC04 = Ref_C04.current;
      let let_WidthC04=(docu
 
if(typeof SS_Image === 'string')       
    {try {
    fetch("/Image/"+SS_Image.toString())
        .then((res) => res.json())
        .then((data) => {
            setSS_Image(data.py);
        });
    } catch (error) {
    console.error("Error fetching data:", error);
    }}
 
      
      //fetch("/cnn").then((res) =>
      //      res.json().then((data) => {
      //          setSS_HelloPy(data);
      //      })
      //  )
        
    try {
    fetch("/cnn")
        .then((res) => res.json())
        .then((data) => {
            //alert(JSON.stringify(data));
            setSS_HelloPy(data.py);
        });
} catch (error) {
    console.error("Error fetching data:", error);
}
 
from PIL import Image
import cv2
from kernel import canny,get_grayscale,sharpen,erode,dilate,opening,ShowMustGoOn,WhiteBackGround

 
            //alert(JSON.stringify(data));
 
if(typeof SS_Image !== 'null')
 
  const [SS_HelloPy,setSS_HelloPy]=useState<string>('')
 
'''
@app.route("/def_YSquare", method=["GET","POST"])#, strict_slashes=False)
def def_YSquare():
   if request.method == 'POST':
        input = request.form['input']
        return redirect(url_for('/'+str(int(input)**2)))
   else:
        return redirect(url_for('/0'))
'''
 
        headers: {'Content-Type': 'application/json'},
 
JSON.stringify(
 
'success',name = user
 
'success',name = user
 
        user = request.args.get('nm')
 
,strict_slashes=False)#
 
'input'
 
input:
 
        }
 
          
 
          'Accept': 'application/json',
 
            //alert(JSON.stringify(data));
 
      
 
def_Update
 
      }
 
      catch (error) {
      alert(error);
      }
 
      try{
 
let let_Response = 
 
.toString()
 
'Error:', 
 
+SS_HelloPy.toString()
 
 catch (error) {
    console.error("Error fetching data:", error);
    }
 
    var=Input
 
Input
 
    if request.method == 'POST':
 
    else:
 
      //setSS_HelloPy(SS_HelloPy)
 
            //alert(JSON.stringify(data));
 
    }
 
 catch (error) {
    console.error("Error fetching data:", error);
    }
 
SS_HelloPy
 
        return "<h1>Write Input<h1>"
 
        print(Input)
 
 // body data type must match "Content-Type" header
 
Output**2
 
{'py':
 

@app.route('/api')
def api():
    response = {'message': 'Hello, World!'}
    return jsonify(response)

 
def_OutPut
 
|string
 
name='C04id_CropImageX1'
 
parseFloat(
 
parseFloat(
 
    catch{
      alert('This is not a number!')
    }
 
import APIService from '../Components/APIService'
 
{/*<div className='C04id_EditCrop'>
      <h1>Left X</h1>
      <input id='C04id_CropImageX1'></input>
      <h1>Right X</h1>
      <input id='C04id_CropImageX2'></input>
      </div>
      <div className='C04id_EditCrop'>
      <h1>Up Y</h1>
      <input id='C04id_CropImageY1'></input>
      <h1>Down Y</h1>
      <input id='C04id_CropImageY2'></input>
      </div>
      <div className='C04id_EditCrop'>
      {JSX_Crop}
      </div>*/}
      
      {/*<button>Word</button>
      <button>Marker</button>
      <button>Line-Width</button>
      <button>Line-Color</button>
      <button>Rectangle</button>
      <button>Circle</button>
      <button>Elaser</button>
      <button>Reset</button>
*/}
 

    article = Articles(
        title=title,
        body=body
        )

    db.session.add(article)
    db.session.commit()
 
    body = request.json['body']
 
ww
 
      const let_CurrentWidthC04 = Ref_C04.current;
      let let_WidthC04=(document.getElementById('C04id_Canvas')as HTMLElement)
      
      //fetch("/cnn").then((res) =>
      //      res.json().then((data) => {
      //          setSS_HelloPy(data);
      //      })
      //  )
 
*/}
 
import cv2
 
path[0]
 
sage
 
                alert(data)
 
{SS_HelloPy}
 
<p>{SS_HelloPy}</p>
 
<p>{SS_HelloPy}</p>
 
['']
 
[]
 
                alert(data)
 
                // Setting a data from api
 
'Heeh'#
 
.name
 
      <p>{SS_HelloPy.age}</p>
      <p>{SS_HelloPy.programming}</p>
 
{
        name: "Errror",
        age: "Errror",
        programming: "Errror",
    }
 
'''
 
http:/localhost:5000
 
            
 
.message
 
.then((res) =>
            res.json()
 
'''
 
'''
 
CORS(app)
 
from flask_cors import CORS
 
"justdoit":"cd flask && venv/bin/flask run && cd .. && react-scripts start",
 
react-scripts start
 
                {/* Calling a data from setdata for showing */}
 
                <p>{data.age}</p>
                <p>{data.programming}</p>
 
                
 
// Setting a data from api
                setdata({
                    name: data.Name,
                    age: data.Age,
                    programming: data.programming,
                });
 
pythonscript
 
  "comment":[
    "'start': 'react-scripts start'"
  ]
 
'/api',method=['Get'])
 
"proxy": "http://localhost:5001",
 
    "server": "python3 hello00.py"
 
"start": "react-scripts start"
 
*
 
"server": "python3 hello00.py"
 
,port=5001
 
/
 
import "./Example01.css";
 
                <p>{data.date}</p>
 
                    date: data.Date,
 
        date: "",
 
        "Date":x, 
 
import datetime
 
x = datetime.datetime.now()
 
 
{
  "/auth/google": {
    "target": 
 
  }
}
 
http://127.0.0.1:5000
 
  /*
  "proxy":"http://127.0.0.1:5000",
  */
 
http://127.0.0.1:5000
 
console.erro
 
:{
    "target"
 
    "secure": false},
 
.programming
 
    }, []);
 
                    date: data.Date,
 
        "Date":x, 
 
import datetime
 
x = datetime.datetime.now()
 
    }

 
                    age: data.Age,
 
      <p>{SS_HelloPy.age}</p>
 
                    age: data.Age,
 
        age: 0,
 
        "Date":x, 
 
import datetime
 
x = datetime.datetime.now()
 
.name
 
alert(JSON.stringify(res))
 
{}
 
.name
 
.name
 
<string[]>
 
['Filip']
 
JSX_HelloPy
 
API00
 
API00/
 
fetch('/API00').then(
        res=>res.json()
      ).then(
        data => {
          setSS_HelloPy(data)
          //alert(JSON.stringify(data))
        }
      )
 
fetch('/API00').then(
        res=>res.json()
      ).then(
        data => {
          setSS_HelloPy(data)
          //alert(JSON.stringify(data))
        }
 
'Jojo'
 
1,2,3,'infty'
 
('CheChe')
 
,w=1,b=0
 
    s=str(type(x))
 
def ReLU(x,w=1,b=0):
    z=x*w+b
    if(z>0):
        return z
    else:
        return 0

 
mem
 
/*
 
,marginRight:'2px'
 
style={{marginRight:'2px'}}
 
',backgroundColor:'green'
 
backgroundColor:'darkblue'
 
    
 
<h1 style={{width:'150px'}}>Do you want to crop the image?</h1>
 
      <button>Reset</button>
 
</>
 
SS_
 
SS_
 
      <button>Show</button>
 
*/
 
/*
 
<button>Crop</button>
      <button>Reset</button>
 
      <button>Crop</button>
 
<button>Ok</button>
      <button>Reset</button>
 
</div>
 
<button>Ok</button>
      <button>Reset</button>
 
<button>Ok</button>
      <button>Reset</button>
 
</div>
 
.C04id_Editor {
    display: 'flex';
}
 
.C04id_Editor{
    display: 'flex';
}

 
<td><button>{let_undo}</button></td>
        <td><button>{let_cando}</button></td>
 
{'\u2264'}
 
      //marginTop:'calc(- 150% + 100%)',
 
( *
 
 ${SS_Zoom}
 
 ${1/SS_Zoom}
 
 * 0.5
 
 * 0.5
 

      // Y
      borderBottom:'300px',
 
objectFit: 'cover',
 
 50% 0%
 
className='C04id_GreenBox' 
 
      let let_x=0
 
*SS_Zoom
 
*SS_Zoom
 
  </div>
 
  <div style={{height:'100%'}}>
 
</div>
 
      display:'inline-grid',
 
 * 100% 
 
marginTop:`calc( ${0.5*SS_Zoom}*100vh - ${0.5*(143+20)*SS_Zoom}px - ${0.5*SS_Zoom} * 100vh + ${SS_Zoom*0.5*(143+40)}px )`,
 
  </div>
 
  <div style={{
    height:'100%',
    }}>
 
</div>
 
*0.5
 
</div>
 
'100%'
 
  </div>
 
    <div style={{
      height:'100%'
    }}>
 
  </div>
 
    <div style={{
      height:'1'
    }}>
 
      height:'100%',
 
</div>
 
      /*
 
  */
      {
          width: '100%',
          height: '100%',
          objectFit: 'cover',
          objectPosition: '100% 50%', // Adjust this to control the crop position
    }
 
style={{
 
    */
 
    /*
 
*1.5
 
100% - 
 
100% - 
 
      marginTop:`calc( ${SS_Zoom} * 200px)`,
 
      //objectFit: 'cover',
      //objectPosition:'0% 100%',
      
 
      height:'100%',
 
      transform:'scaleY(1.5)',
 
      marginTop:'auto',
 
`calc(100% - ${SS_Zoom*100}px)`
 
  </div>
 
    <div style={{height:'100%'}}>
 
      marginTop:`${SS_Zoom*100}px`,
 
</div>
 
      height:'100%',
 
`calc( ${SS_Zoom}*200px)`
 
100% - 
 
calc(100% - 
 
marginTop:`calc( ${0.5}*100vh - ${0.5*(143+20)}px - ${0.5*SS_Zoom} * 100vh + ${SS_Zoom*0.5*(143+40)}px )`,
      height:`calc(${SS_Zoom} * 100vh - ${SS_Zoom*(143+40)}px)`,
 
</div>
 
10
 
      marginLeft:'auto',
 
      objectPosition: '10% 0'
 
  </div>
 
  <div style={{
    marginTop:`calc( ${0.5}*100vh - ${0.5*(143+20)}px - ${0.5*SS_Zoom} * 100vh + ${SS_Zoom*0.5*(143+40)}px )`,
    height:`calc(${SS_Zoom} * 100vh - ${SS_Zoom*(143+40)}px)`,
  }}>
 
height:'100%',
 
  </div>
 
  <div style={{height:'100%'}}>
 
height:'500px'
 
height:'80px',margin:'-75px 0 0 -100px'
 
  </div>
 
  <div style={{height:'100%'}}>
 
      height:'100%',
      margin: '-75px 0 0 -100px'
 
</div>
 
      marginLeft:'500px'
 
      width:'100%',
 
</div>
 
const [SS_IsCrop,setSS_IsCrop]=useState<boolean>(false)
 
      <button>Color to Black and White</button>
 
import ReactCrop, { Crop } from 'react-image-crop';
import 'react-image-crop/dist/ReactCrop.css';
import React, { useState, useRef } from 'react';
 
  const [crop, setCrop] = useState<Crop>({ aspect: 16 / 9 });
 
</div>
 
      <div style={{display:'flex'}}>
 
    </div>
 
style={{marginLeft:'auto'}}
 
style={{marginRight:'auto'}}
 
</div>
 
 className='C04id_Zoom'
 
style={{display:'flex'}}
 
</div>
 
    -ms-transform: translateY(-50%);
        transform: translateY(-50%);
 
      //width:SS_Zoom.toString()+'px',
      borderColor:'white',
 
      display:'block',
 
0.5*(143+40)}px )`,
 
      marginTop:`calc( ${0.5}*100vh - ${0.5*(143+20)}px - ${0.5*SS_Zoom} * 100vh - ${SS_Zoom*
 
0.5*(143+40)}px )`,
 
      marginTop:`calc( ${0.5}*100vh - ${0.5*(143+20)}px - ${0.5*SS_Zoom} * 100vh - ${SS_Zoom*
 
100vh - ${(143+40)}px - 
 
 - ${SS_Zoom} * 100vh - ${SS_Zoom*(143+40)}px
 
`calc(${SS_Zoom} * 100vh - ${SS_Zoom*(143+40)}px)`
 
${SS_Zoom} * 
 
SS_Zoom*
 
argin
 
Top
 
display:'block',
      margin: 'auto',
 
Left
 
      marginRight: 'auto',
 
      display:     'block',
 
    width: 100%;
 
<h1 style={{color:'white'}}>Hello Convolution Neural Network</h1>
 
</>
 
SS_OpenPanel
 
  if(SS_OpenTool)
 
  const [SS_OpenTool,setSS_OpenTool]=useState<boolean>(false)
 
:root{
    --C04_RightToolW:500px;
}

 
    --C04_RightToolW: 500px;
 
style={{width:'100%'}}
 
    width:200px
 
Small
 

#C01id_SmallTable{
    width:1000px;
}
 
*/
    width:100px
 
    --let_DivWidth:500px;
 
    --let_DivWidth:500px;
 
        if(SS_Zoom>0){
 
        // I donot want this 0.7000000000000001 in JSX object
        // I want this 0.7 in JSX object
        // How can I do that
 
        if(SS_Zoom>0){
        let ss_Zoom=SS_Zoom
 
    
 
2*
 
  const
 
'C04id_Image'
 
Ref_Image
 
      const let_ObsImageHeight = new ResizeObserver(() => { 
        setSS_WidthImage(let_C04!.offsetWidth-1)
      })

 
//****************************************************************************
// FUNCTION_03: Resize
//****************************************************************************

 
    function f_Resize(){
      let let_C04=(document.getElementById('C04id_Canvas')as HTMLElement)
      let let_C04Width=let_C04!.offsetWidth
      setSS_WidthImage(let_C04Width)
    }
 
 onResize={f_Resize}
 
'C04id_Image'
 
    display: inline-block;
 
Right
 
Right
 
.C04id_RightToolbar{
    width:var(--C04_RightToolW);
    background-color: blueviolet;
}
 
    <h1>Hello There</h1>
 
1000
 
        setSS_OuterWidth(window.outerWidth-1)
        setSS_InnerWidth(window.innerWidth-1)
 
<U_Toolbar/>
 
<div className='C04id_Editor'>
      <h1>SS_OuterWidth:{SS_OuterWidth}</h1>
      <h1>SS_InnerWidth:{SS_InnerWidth}</h1>
      <h1>Marker</h1>
      <h1>Convolution</h1>
    </div>
 
 => {
 
: React.FC<IN_C04>
 
SS_OpenPanel,
setSS_OpenPanel,
 
SS_OpenPanel:0|1|2,
setSS_OpenPanel:(S:0|1|2)=>void
 
  <div className='C04id_RightToolbar'
    style={{height:`calc(100vh - ${143+20}px)`}}>
    <button>Hello</button>
    <h1>Hello There</h1>
  </div>
 
      let let_C01MinWidth=300//-100
 
          //let_setNarrow.disconnect();
 
      //let_setNarrow.observe(let_CurrentC04);
 

      //const let_setNarrow = new ResizeObserver(() => {
      //      if(let_C04!.offsetWidth>let_C01MinWidth){
      //          setSS_IsNarrow(false)
      //      }
      //});
 

    const Ref_C01 = useRef<HTMLDivElement | null>(null);


 
',gridTemplateColumns: 'repeat(2, 1fr)' } : {}
 
style={SS_OpenPanel === 2 ? { display:'grid
 
//style={{width:let_Width}}
 
SS_IsNarrow===true ? {width:let_C01MinWidth} : 
 
SS_IsNarrow===true ? {width:let_C01MinWidth} : 
 
 : {}
 
SS_IsNarrow===true ? 
 
ref={Ref_C01}
 
    const Ref_C01 = useRef<HTMLDivElement | null>(null);
 
    useEffect(() => {
        const let_CurrentC01 = Ref_C01.current;
        if (let_CurrentC01) {
        // Close C02_Input when the width of C01_Table is less than 175
        const let_ObsResize = new ResizeObserver(() => {
            let let_C01Width=(document.getElementById('HeaderLeft')as HTMLElement)!.offsetWidth
            let let_C04Width=(document.getElementById('HeaderRight')as HTMLElement)!.offsetWidth
            //if(let_C01Width!==let_C04Width){
            //    setSS_IsNarrow(true)
            //}
            //else if(let_C04Width>480){
            //    setSS_IsNarrow(false)
            //}
        });
        let_ObsResize.observe(let_CurrentC01);
        return () => {
            let_ObsResize.disconnect();
        };
    }
    }, []);
 
display:grid;
 
ref={Ref_C01}
 
            //let_setNarrow.disconnect();
 
        //let_setNarrow.observe(let_CurrentC01);
 


        //const let_setNarrow = new ResizeObserver(() => {
        //    let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
        //    if(SS_C02===true && let_C02Width+let_C01Width<let_C01MinWidth){
        //        setSS_OpenPanel(1)
        //    }
        //    else if(SS_C02===false && let_C01Width<let_C01MinWidth){
        //        setSS_OpenPanel(1)
        //    }
        //});
 
        let let_C02Width=275
        let let_C01MinWidth=300//-100
 
SS_IsNarrow===true ? {width:let_C01MinWidth} : 
 
    let SS_IsNarrow=false
 
setSS_C02:(S:boolean)=>void;
 
setSS_C02
 
SS_IsNarrow:boolean;
setSS_IsNarrow:(S:boolean)=>void;
 
          //let_setNarrow.disconnect();
 
      let let_C01MinWidth=300//-100
 
    SS_IsNarrow:boolean
 
    SS_IsNarrow
 
SS_IsNarrow:boolean;
setSS_IsNarrow:(S:boolean)=>void;
 
      <h1>SS_IsNarrow: {SS_IsNarrow.toString()}</h1>
 
SS_IsNarrow,
setSS_IsNarrow,
 
SS_IsNarrow:boolean;
setSS_IsNarrow:(S:boolean)=>void;
 
    let SS_IsNarrow=false
 
        SS_IsNarrow={SS_IsNarrow}
        setSS_IsNarrow={setSS_IsNarrow}
 
        SS_IsNarrow={SS_IsNarrow}
 

    const [SS_IsNarrow,setSS_IsNarrow]=useState<boolean>(false)
 
SS_OpenPanel:0|1|2,
 
SS_OpenPanel,
 
        //else{
        //  setSS_OpenPanel(0)
        //}
 
           // else{
           //     setSS_IsNarrow(false)
           //     //alert(let_C01Width)
           // }
 
  //width:'100%'
 
  //width:'100%
 
+100
 
+100
 
-100
 
//  940/2
 
        }
 
        if(SS_IsNarrow===false){
 
let let_C01MinWidth=480
 
  let let_C04MinWidth=900
 
            else if(let_C01MaxWidth){

            }
 
        let let_C01MaxWidth=490
 
        let let_C01MinW=480
 
let_C02Width+
 
MLElement)!.offsetWidth
 
            let let_C01Width=(document.getElementById('C01id_H')as HT
 
            else if(SS_C02===false && let_C01Width<let_C01MinWidth){
                setSS_IsNarrow(true)
            }
 
setSS_IsNarrow,
SS_IsNarrow,
 
setSS_IsNarrow:(S:boolean)=>void;
SS_IsNarrow:boolean;
 
            //else if(SS_C02===true && let_C02Width+let_C01Width+1>let_C01MinWidth){
            //    setSS_IsNarrow(false)
            //}
            //else if(SS_C02===false && let_C01Width+1>let_C01MinWidth){
            //    setSS_IsNarrow(false)
            //}
 
        /*
 
let_C02Width+
 
let_C02Width+
 
ru
 
275
 
// Close C02_Input when the width of C01_Table is less than 175
 
                //setSS_IsNarrow(true)
 
// Close C02_Input when the width of C01_Table is less than 175
 

            else{
                alert('Turing Machine')
                //setSS_IsNarrow(false)
            }
 
        
 
alert('Machine Learning')
 

//****************************************************************************
// USEEFFECT HOOK
//****************************************************************************
    const Ref_Index = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        const let_Current = Ref_Index.current;
        if (let_Current) {
        const let_ResizeObs = new ResizeObserver(() => {
            let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
            if(let_C01Width<175){
                setSS_C02(false)
            }
        });
        let_ResizeObs.observe(let_Current);
        return () => {
            let_ResizeObs.disconnect();
        };
    }

    }, []);
 
ARIABLE
 
//****************************************************************************
// VARIABLE
//****************************************************************************
    const Ref_C01 = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        const let_CurrentC01 = Ref_C01.current;
        if (let_CurrentC01) {
        const let_ResizeObs = new ResizeObserver(() => {
            let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
            if(let_C01Width<175){
                setSS_C02(false)
            }
        });
        let_ResizeObs.observe(let_CurrentC01);
        return () => {
            let_ResizeObs.disconnect();
        };
    }

    }, []);
 
        SS_IsNarrow={SS_IsNarrow}
 
            else{
            }
 
                setSS_IsNarrow(false)
 
                setSS_IsNarrow(true)
 
            else{
                setSS_IsNarrow(false)
            }
 
                setSS_IsNarrow(true)
                //alert(SS_IsNarrow.toString())
 
                setSS_C02(false)
 
                //alert(SS_IsNarrow.toString())
 
set
 
                setSS_IsNarrow(true)
 
                setSS_IsNarrow(true)
 
          alert('Alone')
 
        alert(SS_IsNarrow)
 
 style={SS_IsNarrow?{}:{}}
 
px'

 
width:'200px'
 
width:'100px'
 
style={{display: 'grid'}} 
 
  //width:'calc('+(SS_WidthImage).toString()+' - 100px)'
 
  //width:'400px'
  //width:'100vh'
 
-100
 
Oute
 
alert(window.outerWidth)
 
        //alert(let_C04Width)

        //if(SS_WidthImage>=let_C04Width){
        //  //
        //}
        //else{
        //  setSS_WidthImage(let_C04Width)
        //}
 
        //alert(SS_WidthImage)
 
      let let_C04Width=let_C04!.offsetWidth
 
          let_ObsResize.disconnect();
 
      
      let_ObsResize.observe(let_CurrentC04);
 
      const let_ObsResize = new ResizeObserver(() => {
          if(let_C04Width<500){
              setSS_IsNarrow(true)
              setSS_C02(false)
          }
          else{
              setSS_IsNarrow(false)
          }
      });
 
          let_ObsResize.disconnect();
 
      
      let_ObsResize.observe(let_CurrentC04);
 
      const let_ObsResize = new ResizeObserver(() => {
          if(let_C04Width<500){
              setSS_IsNarrow(true)
              setSS_C02(false)
          }
          else{
              setSS_IsNarrow(false)
          }
      });
 
            alert(let_C04Width)
 
  */
 
  /*
 
        
 
Obs
 
        let let_C04=(document.getElementById('C04id_Canvas')as HTMLElement)
        let let_C04Width=let_C04!.offsetWidth
 
let let_C04=(document.getElementById('C04id_Canvas')as HTMLElement)
      let let_C04Width=let_C04!.offsetWidth
 
        alert('hii') 
 
        if(let_C04Width<500){
 
        }
        else{
          setSS_WidthImage(300)
        }
 
setSS_WidthImage(let_C04Width)
 
setSS_WidthImage(let_C04Width)
 
 new =
 
      setSS_WidthImage(let_C04Width)
 
          let_ResizeObs.disconnect();
 
  onClick={f_Resize}
 
onClick={f_Resize}
 
      if (let_CurrentC04) {
 

      //
 
              //if(let_C04Width<350){
              //setSS_OpenPanel(1)
              //}
 

  useLayoutEffect(() => {
    const let_CurrentC04 = Ref_C04.current;
    let let_C04=(document.getElementById('C04id_Canvas')as HTMLElement)
    let let_C04Width=let_C04!.offsetWidth
    //if (let_CurrentC04) {
    //    setSS_WidthImage(let_C04Width)
    //}
    if (let_CurrentC04) {
    //alert(let_CurrentC04.getBoundingClientRect())
    setSS_WidthImage(let_C04Width)
    }
  }
  ,[])
 
.current
 
        setSS_WidthImage(let_C04Width)
 
      //
      function f_Resize(){
        alert('Resizing')
      }
      //
      let_C04.addEventListener("resize", f_Resize);
 
SS_Image
 
      // https://stackoverflow.com/questions/71457792/resize-event-in-react
      //function f_Resize() {
      //    setSS_WidthImage(let_C04Width);
      //}
      //window.addEventListener("resize", f_Resize);
      //f_Resize()
      //return () => window.removeEventListener("resize", f_Resize);

 
      f_Resize()
      return () => let_C04.removeEventListener("resize", f_Resize);
 
function f_Resize(){
        alert('Resizing')
      }
      //
      let_C04.addEventListener("resize", f_Resize);
      f_Resize()
      return () => let_C04.removeEventListener("resize", f_Resize);
 
      let let
 
(document.getElementById('C04id_Canvas')as HTMLElement)
 
setSS_WidthImage(let_C04Width)
 
SS_WidthImage
 
  //width:'400px'
  //width:'100vh'
  //width:'100%'
 
''+
 
calc(
 
 - 100
 
position:'fixed',
marginTop:'143px',
 
paddingRight:'100px'
 
*/
 
/*
 
      width:'calc('+SS_WidthImage.toString()+' - 100px)'
 
      width:'calc('+SS_WidthImage.toString()+' - 100px)'
 
  </div>
 
  <div className='C04id_Image' 
    style={{
      height:`calc(100vh - ${143+20}px)`,
      width:'calc('+SS_WidthImage.toString()+' - 100px)'
    }}
  >
 
50vh
 
(SS_WidthImage).toString()+'px'
 
    handleResize();
    // Remove event listener on cleanup
 
    // Call handler right away so state gets updated with initial window size
 
    // Add event listener
 
      // Set window width/height to state
 
let let_C04Width=(document.getElementById('C04id_Canvas')as HTMLElement)!.offsetWidth
 
    width:100%
 
              setSS_OpenPanel(1)
 
      <h1>RGB2Black&White</h1>
      <h1>Crop</h1>
      <h1>Gray2Black</h1>
      <h1>Marker</h1>
      <h1>Convolution</h1>
 
display: 'grid';
 
 style={{display: 'grid'}}
 
    overflow: 'auto';
 
//style={{width:SS_WidthImage.toString()+'px'}}
 
width:'100%'
 
(document.getElementById('C04id_Body')as HTMLElement)!.style.width=let_C04Width.toString()+'px;'
 
(document.getElementById('C04id_Body')as HTMLElement)!.style.width=let_C04Width.toString()+'px;'
 
:number
 
    width:500px;
 
style={{width:'500px'}}
 
let_ImageWidth.toString()+'px'
 
          let_ImageWidth=let_C04Width
 
          alert(let_ImageWidth)
 
      overflowX: 'scroll',
      overflowY: 'scroll',
 
    overflow: auto;
 
    overflow: auto;
 
    */
 
    /*
 
      overflow: 'auto',
 
,width:'100px'
 
    margin-left:auto
 
let_ImageWidth.toString()+'px'
 
let_ImageWidth.toString()+'
 
let_ImageWidth.toString()+'
 
l
 
:string=''
 
<div className='C04id_RightToolbar'
    style={{height:`calc(100vh - ${143+20}px)`}}>
    <button>Hello</button>
    <h1>Hello There</h1>
  </div>
 
{/*
 
  {
    SS_Image && 
 
  }
 
    margin-left:auto;
 
              if(let_C04Width<300){
                alert('Narrow')
              }
 
  const [SS_IsRightTool,setSS_IsRightTool]=useState<boolean>(true)
 
    margin-top:142px;
 
display:flex;
 
*/
 

.C04id_Canvas {
    background-color: black
}
 
.C04id_Canvas{
    background-color: black
}
 

.C04id_Body{
    background-color:black
}

 
style={SS_OpenPanel === 2
      ? { width: '50%' }
      : { width: '100%' },
    backgroundColor: 'black'}
 
,backgroundColor:'black'
 
style={{
 
style={{backgroundColor:'black'}}
 
 +10px
 
.C04id_RightToolbar{
    margin-left:auto;
    position:
}
 
bsolute
 
set
 
set
 
              setSS_C02(false)
 
,SS_OpenPanel
 
 && SS_OpenPanel===2
 
const [SS_IsNarrow,setSS_IsNarrow]=useState<boolean>(false)
 
style={{
    width:let_Width
    //width:'500px'
    }}
 
//
 
<div>

</div>
 
{JSX_C02}
 
50%
 
{
/*
 
{
/*
 
*/}
 
style={{backgroundColor:'greenyellow'}}
 
width:'500px',height:'500px',
 
id='HeaderRight'
 
    let let_WidthPanel

    if(SS_OpenPanel===2){
        let_WidthPanel={gridTemplateColumns: 'repeat(2, 1fr)'}
    }
    else{
        let_WidthPanel={}
    }
 
    grid-template-columns: repeat(2, 1fr);
 

interface IN_C04 {
  SS_OpenPanel:0|1|2,
  setSS_OpenPanel:(S:0|1|2)=>void
}

 
  additionalStyles?: React.CSSProperties;
 
            
 
            SS_OpenPanel={SS_OpenPanel}
            setSS_OpenPanel={setSS_OpenPanel}
 
{
    // PARAMETER
    // HOOK: setState()
    SS_OpenPanel,
    setSS_OpenPanel
}:{
    // TYPE
    // HOOK: setState() 
    SS_OpenPanel:1|2,
    setSS_OpenPanel:(S:0|1|2)=>void
}

 
    // PARAMETER
    // HOOK: setState()
    SS_OpenPanel,
    setSS_OpenPanel
}:{
    // TYPE
    // HOOK: setState() 
 
    // PARAMETER
    // HOOK: setState()
    SS_OpenPanel,
    setSS_OpenPanel
}:{
 
    SS_Row,
    SS_Columns,
    SS_C02,
    setSS_C02,
 
    SS_Row:TS_Row[],
    SS_Columns:TS_Column[],
    SS_C02:boolean,
    setSS_C02:(S:boolean)=>void,
 
SS_OpenPanel = 
 
SS_OpenPanel===0
 
<td><button className='C03id_Header'>X</button></td>
 
<C04_Canvas
/>
 
        JSX_C03=<></>
 
    let JSX_C03=<></>
 
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
 
<td><button className='C03id_Header'>+</button></td>
 
<td><button className='C03id_Header'>+</button></td>
 
<td><button className='C03id_Header'>+</button></td>
 
 onClick={()=>setSS_Open(true)}
 
    margin-bottom:auto;
 
calc(
 
 - var(--C04_RightToolW)
 
width:100%;
 
 className='Index_Canvas'
 
 style={{marginLeft:'auto'}}
 
,width:'70px'
 
 style={{width:'500px'}}
 
{JSX_C02}
<div id='BodyLeft' style={{width:let_Width}}>
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
</div>
 
</div>
 
<div>
 
    border: 1px solid #000000;
 
    max-width: calc(100% - var(--C04_RightToolW));
 
</div>
 
    <button>Hello</button>
      <h1>Hello There</h1>
 
    position: relative;
    margin-left:auto;
 
.C04id_Image{
    width:90%;
    overflow-y: scroll;
    overflow-x: scroll;
}

 
marginRight:'auto'
 
style={{marginRight:'auto'}}
 
style={{marginRight:'auto'}}
 
  const Ref_C0 = useRef<HTMLDivElement | null>(null);
 
    height:100%;
 
        margin-top: var(--let_MarginTop);
        margin-bottom: var(--let_MarginTop);
 
inline-
 
className='C04id_Image'
 
</div>
 
onClick={()=>setSS_Open(true)}
 
</>
 
{
      SS_Image && <img src={SS_Image} alt="Uploaded" className='C04id_Image'/>
      }
 
 id='HeaderRight'
 
{
      SS_Image && <img src={SS_Image} alt="Uploaded" className='C04id_Image'/>
      }
 
.C03id_Header {
 
      */}
 
    margin-top:     var(--let_MarginTop);
    margin-bottom:  var(--let_MarginTop);
 

.C04id_DivHeader input {
    font-size: 16px;
    height: 40px;
}
 
.C04id_DivHeader input{
    height:40px;
}
 
<td>
 
</td>
 
{SS_Image && <img src={SS_Image} alt="Uploaded" />}
 
/*
 
*/
 
// React
import React, { ChangeEvent, useState } from 'react';

// Components
//import R_FilterColumn from './Coms/R_FilterColumn';

// Type
import TS_Row from '../T01_Row/An_Index';

// CSS
import './index00.css'
import './index01.css'

const ImageUpload: React.FC = () => {
  const [SS_Image, setSS_Image] = useState<string | null>(null);

  const f_ImageChange = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];

    if (file) {
      const let_ImageURL = URL.createObjectURL(file);
      setSS_Image(let_ImageURL);
    }
  };

  return (
    <div>
      <input type="file" accept="image/*" onChange={f_ImageChange} />
      {SS_Image && <img src={SS_Image} alt="Uploaded" />}
    </div>
  );
};

export default ImageUpload;
 
SS_C02={SS_C02}
setSS_C02={setSS_C02}
 
    const [SS_100Width,setSS_100Width]=useState<boolean>(false)
 
    if(SS_Columns.length<2){
        setSS_100Width(true)
    }
 
.C01id_BreakWord{
    word-wrap: 'break-word';
    width:'240px';
}
 
    const [SS_100Width,setSS_100Width]=useState<boolean>(false)
 
    if(SS_Columns.length<2){
        setSS_100Width(true)
    }
 
SS_Columns
 
    let let_100Width='100%'
    if(SS_100Width){
        let_100Width='100%'
    }
    else{
        
    }
 

    //(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
 
 // The empty dependency array ensures that the effect runs only once, similar to componentDidMount
    /*
    useEffect(()=>{
        const let_CurrentC01 = Ref_C01.current;
        if (let_CurrentC01) {
            let let_C01_TH=(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
            let let_C01_BodyHeight=(document.getElementById('C02id_Height') as HTMLElement)!
            let_C01_BodyHeight.style.height="calc(100vh - 50px -"+let_C01_TH.toString()+"px)"
        }
    },[]);
    */

 
let ss_Columns=[...SS_Columns]
 
let ss_Rows=[...SS_Row]
        let let_UpdateRow=U01_DeleteColumn(ss_Rows,R02_ReturnIndex(THISCOLUMN,ss_Columns))
 
JSON.stringify(
 
ROWS[i].Array.splice(COLUMNINDEX,1)
 
        }
 
        if(ROWS[i].Display!==4){
 
        }
 
        if(ROWS[i].Display!==4){
 
'Tally Hall',"Marvin's Marvelous Mechanical Museum",'The Ruler of Everything','Indie Rock'
 
        {Key:4 ,Next:5  , Array:['Que, The Human Editor','Ddd','010']},
        {Key:5 ,Next:6  , Array:['Human Centipede'      ,'Eee','011']},
 
'Tally Hall'           ,'Ccc','002'
 
               ,'Bbb','001'
 
เพลงโดย เรดิโอเฮด

 
'Xedni Wor'            ,'Aaa','000'
 
           
 
        {Key:6 ,Next:7  , Array:["Chonny's Charming Chaos Compendium",'Chonny','012']},
        {Key:7 ,Next:8  , Array:["Chonny'sCharmingChaosCompendium",'Chonny','020']}
 
style={{marginLeft:C02_MarginLeft,marginBottom:'-10px'}}
 
            continue
        }
        else{
 
setSS_Columns(let_UpdateColumn)
 
        //alert(JSON.stringify(SS_Columns))
 
            alert('Hii')
 
            ,'Aaa','000'
 
.C01id_BreakWord{
    word-wrap: 'break-word';
    width:'240px';
}
 
</div>
 
style={{wordWrap: 'break-word'}}
 
style={{wordWrap: 'break-word'}}
 
style={{wordWrap: 'break-word'}}
 
 
 
 style={{whiteSpace: 'nowrap'}}
 
 style={{whiteSpace: 'nowrap'}}
 
 overflow: 'hidden', 
 
 overflow: 'hidden', 
 
, width: '100px' 
 
width: '100px' 
 
    height: 40px;
 
    height: 30px;
 

#C01id_Table {
    /*
    https: //stackoverflow.com/questions/5671098/how-can-i-force-all-rows-in-a-table-to-have-the-same-height
    */

}
 
    height: 25px;
    max-height: 20px;
 

#C01id_Table td {
}

 
    height: 0px;
 

#C01id_Table th:not(#C01id_Table th:first-child, #C01id_Table th:last-child) {
    white-space: normal;
    justify-content: flex-start;
}

#C01id_Table td:not(#C01id_Table td:first-child, #C01id_Table td:last-child) {
    white-space: normal;
    justify-content: flex-start;
}
 
pace-around
 
#C01id_Table th:not(#C01id_Table th:first-child, #C01id_Table th:last-child) {
    white-space: nowrap;
    justify-content: space-around;
}

#C01id_Table td:not(#C01id_Table td:first-child, #C01id_Table td:last-child) {
    white-space: nowrap;
    justify-content: space-around;
}
 
    white-space: nowrap;
    justify-content: space-around;
 
    white-space: nowrap;
    justify-content: space-around;
 
import TS_Column from '../T02_Column/An_Index';
 
            <button className='C03id_Header' onClick={()=>setSS_Open(false)}>X</button>
 
 File Name
 
//****************************************************************************
// JSX_00: Open C02
//****************************************************************************
    let JSX_Button=<></>
    if(SS_C02===false){
        JSX_Button=<td><button className='C03id_Header' onClick={f_Open}>Open Input Tab</button></td>
    }
    else{
        JSX_Button=<td><button className='C03id_Header' onClick={f_Close}>Close Input Tab</button></td>
    }
 
    function f_FileName(){
        let let_Word=(document.getElementById('C03id_FileName') as HTMLInputElement).value.toString()
        setSS_FileName(let_Word)
    }
 
    function f_Click(){
        
    }

 
onChange={f_FileName}
 
        alert('Change')
 
            */
            }
 
{
            /*
 
{(document.getElementById('C03id_FileName')as HTMLInputElement).value.toString()}
 
            {/*
 
*/
            }
 
 , CSVDownload
 
<CSVLink data={SS_Row} filename={"my-data.csv"}>
        Download CSV
</CSVLink>
 
{/*
    <CSVLink data={SS_Row} filename={"my-data.csv"}>
        Download CSV
</CSVLink>
*/}
 
,marginTop:'-10px'
 
<td><button className='C03id_Header'>Export Data</button></td>
 
onClick={f_Open}
 
SS_Row={SS_Row}
 
<CSVLink data={SS_Row} filename={"my-data.csv"}>
        Download CSV
      </CSVLink>
 
import { CSVLink } from "react-csv";
 
import { CSVLink } from "react-csv";
 
<CSVLink data={SS_Row} filename={"my-data.csv"}>
        Download CSV
      </CSVLink>
 
={SS_Row}
 
SS_C02,
setSS_C02
 
        {Key:6 ,Next:7  , Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:7 ,Next:8  , Array:['Weezer'               ,'Bbb','001']},
        {Key:8 ,Next:9  , Array:['Tally Hall'           ,'Ccc','002']},
        {Key:9 ,Next:10 , Array:['Que, The Human Editor','Ddd','010']},
        {Key:10,Next:11 , Array:['Human Centipede'      ,'Eee','011']},
        {Key:11,Next:12 , Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:12,Next:13 , Array:['Weezer'               ,'Bbb','001']},
        {Key:13,Next:14 , Array:['Tally Hall'           ,'Ccc','002']},
        {Key:14,Next:15 , Array:['Que, The Human Editor','Ddd','010']},
        {Key:15,Next:16 , Array:['Human Centipede'      ,'Eee','011']},
        {Key:16,Next:17 , Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:17,Next:18 , Array:['Weezer'               ,'Bbb','001']},
        {Key:18,Next:19 , Array:['Tally Hall'           ,'Ccc','002']},
        {Key:19,Next:20 , Array:['Que, The Human Editor','Ddd','010']},
        {Key:20,Next:21 , Array:['Human Centipede'      ,'Eee','011']},
        {Key:21,Next:22 , Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:22,Next:23 , Array:['Weezer'               ,'Bbb','001']},
        {Key:23,Next:24 , Array:['Tally Hall'           ,'Ccc','002']},
        {Key:24,Next:25 , Array:['Que, The Human Editor','Ddd','010']},
        {Key:25,Next:26 , Array:['Human Centipede'      ,'Eee','011']},
        {Key:26,Next:27 , Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:27,Next:28 , Array:['Weezer'               ,'Bbb','001']},
        {Key:28,Next:29 , Array:['Tally Hall'           ,'Ccc','002']},
        {Key:29,Next:30 , Array:['Que, The Human Editor','Ddd','010']},
        {Key:30,Next:30 , Array:['Human Centipede'      ,'Eee','011']},
 
    const [SS_Num,setSS_Num]=useState<number>(SS_Row.length)
 
            SS_Num={SS_Num}
            setSS_Num={setSS_Num}
 
SS_Num={SS_Num}
setSS_Num={setSS_Num}
 
const [SS_Num,setSS_Num]=useState<number>()
 
    // Generate New Key
    let let_NewKey:number = Math.random()
    while(ROWS.map(ROW=>ROW.Key).includes(let_NewKey)===true){
        let_NewKey = Math.random()
    }
 
let_NewROW
 
let_NewROW
 
        // for(let i=0;i<ss_Rows.length;i++){
        //     if(i<ss_Rows.length-1 && i>0){
        //     for(let j=0;j<ss_Rows.length-1;j++){
        //         if(ss_Rows[i].Next==ss_Rows[j+1].Key && j<ss_Rows.length-1){
        //             let_UpdateRows.push(ss_Rows[j+1])
        //             break
        //         }
        //     }}
        // }
 
        alert(JSON.stringify(let_UpdateRows[0]))
 
[-1].Next
 
                //if(let_UpdateRows[-1].Next==let_Push[i].Key){
                //    alert(JSON.stringify(let_UpdateRows[-1]))
                //    alert(JSON.stringify(let_Push[i]))
                //    //let_UpdateRows.push(let_Push[i])
                //    //let_Push.splice(i,1)
                //    //break
                //}
 
                //if(let_UpdateRows[-1].Next==let_Push[i].Key){
                //    alert(JSON.stringify(let_UpdateRows[-1]))
                //    alert(JSON.stringify(let_Push[i]))
                //    //let_UpdateRows.push(let_Push[i])
                //    //let_Push.splice(i,1)
                //    //break
                //}
 
            alert(JSON.stringify(let_UpdateRows[-1]))
 
{
                    
                }
 
            if(ss_Rows.length==1){
                let_UpdateRows.push(ss_Rows[0])
                break
            }
 
            if(j==ss_Rows.length-1){
            }
            }
 
                for(let i=0;i<let_Push.length;i++){
                if(let_UpdateRows[-1].Next==let_Push[i].Key){
                    let_UpdateRows.push(let_Push[i])
                    //let_Push.splice(i,1)
                    //break
                }
 
                for(let i=0;i<let_Push.length;i++){
 
            }
 
                if(let_UpdateRows[-1].Next==let_Push[i].Key){
 
                    //let_Push.splice(i,1)
                    //break
                }
                break
 
            if(j==)
 
'Xedni Wor'            ,'Aaa','000'
 
.splice(0,1)
 
        //alert(JSON.stringify(let_UpdateRows))
 
        let iii=0
 
                    ss_Rows.splice(j+1,1)
 
                    //let_UpdateRows.push(ss_Rows[j+1])
 
                    //let_UpdateRows.push(ss_Rows[j+1])
                    //ss_Rows.splice(j+1,1)
 
.Next
 
                    //ss_Rows.splice(j,1)
                    //break
 
                    //ss_Rows.splice(j,1)
                    //break
 
            let ii=i+1
 
ss_Rows[i].Next
 
9
 
        Ls=Memory(Ls)
 
Ls=Memory(Ls)
 
    

    def Memory(ls):
        if(len(ls)<2):
            return [ls[0],[]]
        Lss=ls[:-1]
        Mid=ls[-1]
        Less=[]
        More=[]
        for i in Lss:
            if(i<Mid):
                Less.append(i)
            elif(i>Mid):
                More.append(i)
        return [Less,More,Mid]
    
 
,Ls[0]
 
,Ls[0]
 
,[]
 
,[]
 
[0]
 
Less=Memory(Ls)
        More=Memory(Ls)
 
'''
 
'''
 
    def Sort(ls):
 
    Loop=True

 
        // https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value
        // https://www.w3schools.com/jsref/jsref_sort.asp
        // https://stackoverflow.com/questions/39583327/javascript-sort-array-of-arrays-by-second-element-in-each-inner-array
 
            setSS_Row(ss_Rows.reverse())
 
            setSS_Row(ss_Rows)
 
ss_Rows.sort((a,b) => a.Array[index].toUpperCase().localeCompare(b.Array[index].toUpperCase()));
 
[1,2],[2,3],XXXXX
 
            else if(i===ROWS.length-1){
// [0,1],[1,2],[2,3],[3,3]
// [0,1],XXXXX,[2,3],[3,3]
// [0,2],XXXXX,[2,3],[3,3]

// [0,1],[1,2],[2,3],[3,3]
// XXXXX,[1,2],[2,3],[3,3]

// [0,1],[1,2],[2,3],[3,3]
// [0,1],
 
i>0 && 
 
        RowIndex: ROWS.length,
 
    
    const [SS_LastRow,setLastRow]
 
    // We might check the length of the element inside array later.

    /*
    // Check duplicate Column Name
    if(NEWROW.toString().length>0 
            && NEWROW.toString().length<30 
            && ROWS.map(ROW=>ROW.Name).includes(NEWROW.Name)===false){
            // https://stackoverflow.com/questions/43846531/check-if-dictionary-object-in-array-contains-certain-value-in-javascript

            // Generate New Key
            let let_NewKey:number = Math.random()
            while(ROWS.map(ROW=>ROW.Key).includes(let_NewKey)===true){
                let_NewKey = Math.random()
            }
            
            // Add New Column in List of All Columns
            // https://stackoverflow.com/questions/31048953/what-are-these-three-dots-in-react-doing
            const let_NewROW:TS_Row={
                Key: let_NewKey,    
                Name: NEWROW.Name,
                }
            return [let_NewROW,...ROWS]
        }
        return ROWS
    */
 
 by index
 
 C01id_SortButton
 
onClick={()=>f_Open(Column,1)}
 
ontSize
 
style={{whiteSpace: 'normal'}}
 
,marginRight:'auto'
 
marginRight:'auto'
 

#C02id_Div h1 {
}
 
    margin-left: 5px;
 
marginBottom:'-10px'
 
style={{marginBottom:'-10px'}}
 
,marginBottom:'10px'
 
marginLeft:'auto'
 
style={{marginLeft:'auto'}}
 
.C02id_DeleteColumn{
    margi
}
 
    table-layout: fixed;
 

#C02id_RenameColumn {
    background-color: #c794e3;
}

 
.C02id_DeleteColumn {
    display: 'grid';
}

 
C02id_DeleteColumn
 
    float: 'left';
 
className='C02id_DeleteColumn'
 
</h1>
                <h1>
 

.C02id_DeleteColumn button{
    margin-left:auto
}
 
    margin-left: 0;
 
.C02id_DeleteColumn0{
    line-height:2px;
}
.C02id_DeleteColumn1 {
    line-height: 2px;
    margin-top:-20px;
}
.C02id_DeleteColumn2 {
    line-height: 2px;
}
 
{Column.Name}?
 
            <>
 

            </>
 

            <tr className='C02id_HeightLightRow C02id_DeleteColumn1'>
                
            </tr>
 
<div className='C02id_0443'>
                <button onClick={()=>f_Delete(Column)}>Ok</button>
                <button onClick={()=>f_Open(Column,0)}>Cancel</button>
                </div>
 

            <tr className='C02id_HeightLightRow C02id_DeleteColumn1' ><td>
            <div className='C02id_CreateRowDiv'>
                <h1>to delete {Column.Name}?</h1>
            </div>
            </td></tr>
 
#C02id_Div table tr.C02id_HeightLightRow {
    background-color: rgb(100, 100, 200);
}
 
#C02id_Div table tr.C02id_HeightLightRow{
    background-color: rgb(100, 100, 200);
}
 
#C02id_Div table tr:.C02id_HeightLightRow{}
 


#C02id_Div table tr:.C02id_HeightLightRow{
    
}
 
#C02id_Table tr:nth-child(even):not(.C02id_HeightLightRow) {
    background-color: #f2f2f2;
}
 

#C02id_Table tr:nth-child(even):not(.C02id_HeightLightRow) {
    background-color: #f2f2f2;
}
 
#C02id_Div table tr ,
#C02id_Div table td{
    width: 100%;
}

#C02id_Div table{
    border-top: 1px solid #000000;
    border-bottom: 1px solid #000000;
    background-color: rgb(0, 0, 0);
}
 
    padding: 0px;
 
#C02id_Div table tr:nth-child(even){
    background-color: rgb(95, 160, 120);
}

#C02id_Div table tr:nth-child(odd) {
    background-color: rgb(125, 213, 18);
}
 
.C02id_CreateColumnDiv input {
    vertical-align: middle;
    margin-bottom:5px;
}
 

.C02id_CreateColumnDiv button{
}

 
#C02id_Header{
    border-top:1px solid #000000;
    border-bottom: 2px solid chocolate;
    height:var(--let_HeaderHeight);
    background-color: chocolate;
    display:grid;
}

 
/*
//////////////////////////////////////////////////////////////////////////////////
*/
 
.C02id_0443 {
    display: 'flex;';
    float: 'left';
    margin-left: 10px;
}

.C02id_3342 {
    margin-left: 5px
}

#C02id_B2133 {
    margin-left: 5px
}

.C02id_6677{
    display: 'flex';
    margin-right: 'auto';
    margin-top:5px
}
 
</div>
 
</table>
 
<div >
 
    margin-left: 3px;
 
    margin-bottom: 5px;
 
    border: 1px solid #ffffff;
 
.C02id_DeleteColumn1 {
    line-height: 2px;
    margin-top:-20px;
}
 

#C02id_Div input{
    margin-top:-10px;
    margin-bottom:10px;
}
 

#C02id_Header input{
    margin-top:50px;
}
 
    margin-left: 3px;
 
    margin-left: 10px;
 
    padding-top: 5px;
    padding-bottom: 5px;
 
#C02id_Div table tr{
border: 1px solid #000000;
padding: 1px;
}
 
</div>
 

#C02id_Header input,
#C02id_Header button{
    display:inline-flex;
}
 
.C02id_CreateColumnDiv button{
    margin-left: 3px;
}
 
    margin-left: 10px;
    margin-top: -1px
 
#C02id_DivHeader
 
#C02id_DivHeader{
    
}
 
className='C02is_Table'
 

.C02is_Table input{
    margin-top:-22px;
}
 
    margin-top:10px;
 
.C01id_TR td{
    height:0px;
}
 
 tr
 
.C01id_SortButton tr{
    height:80px;
}
 
    padding:-10px;
 
<button onClick={()=>f_Open(Column,2)}>X</button>
 

.C02id_Header{
    height: 100px
}
 
.C02id_Header{
    height: 00px
}
 
.C02id_Header{
    height: 500px
}
 
width:300px;
 


#C02id_Table {
    margin-bottom: 10px;
}
 
#C02id_Div tbody{
    width:300px;
}
 
#C02id_Table tr {
    width:100%;
    height: 60px;
    background-color: #c794e3;
}
 
{JSX_C02}
 
</tbody>
 
<tbody>
 
inline-
 
    display: inline-block;
 
        width: 100%;
 
    width:100%;
    height: 60px;
 
#C02id_Div td{
    width:100%
}
 
:not(:last-child)
 
id='C02id_Table'
 
    width:100%
 
#C02id_Div tbody{
    width:300px;
}
 

#C02id_Div hr {
    color: red;
    background-color: red;
    height: 2px;
    border: none;
    width: 100%;
}
 

#C02id_Div tbody,
#C02id_Table tr{
    width:100%
}
 
#C02id_Div tbody,
#C02id_Table tr 
 
    overflow-x: scroll;
 
#C02id_Table tr{
    height: 60px;
    background-color: #c794e3;
}

#C02id_Div button {
    border: 2px solid rgb(0, 0, 0);
    background-color: rgb(255, 255, 255);
    margin-right: 3px;
}
 

#C02id_Table tr:first-child{
    height:60px;
    background-color: #c794e3;
}
 

#tbody{
    width: 300px;
    display:block
}
 
    
 
    margin-bottom:auto;
 
</tbody>
 

#C02id_Table {
}
 
    margin-bottom: auto;
 
:first-child 
 
    border-spacing: 0;
    border-collapse: collapse;
 
    /* Removes the cell spacing via CSS */
 
    cellSpacing="0"
 
    margin-bottom:auto;
 
    vertical-align: text-top;
 
    position:relative;
 
    display:inline-block;
 
    margin:0px;
    border:0px;
    padding:0px;
 
#C02id_DivButton {
}
 
height:'300px'
 
auto
 
#C02id_Div table {
    height: 100%;
    width: 100%;
    /* Optional: Ensure the table takes the full width */
}

 
style={{maxHeight:'calc(100vh - 240px)'}}
 
style={{display:'flex;',marginRight: 'auto',marginTop:'5px'}}
 
    style= {
                {
                
 
            }
        }
 
style={{marginTop:'15px'}}
 
    position:absolute;
    display:inline-block;
 
    overflow-y: auto;
 
scrol
 
    position: relative;
 
    display: grid;
 
    position: fixed;
 
position:fixed;
 
    margin-bottom: 10px;
 
    scroll-snap-type: none;
 
,scroll
 
style={{maxHeight:'calc(100vh - 240px)'}}
 
    overflow-y: scroll;
 
overflow-y: scroll;
 
#C02id_Table{
    margin-bottom:10px;
}
 
    position:fixed;
 
    position:absolute;
 
style={{maxHeight:'calc(100vh - 240px)'}}
 
<div id='C02id_Table'>
 
    margin-top:10px;
    display: block;
 
    margin-left: 0%;
 
#C02id_B2133{
    margin-left: 5px
}
 
.C02id_0443{
    display: 'flex;';
    float:'left';
    margin-left:'10px';
}
.C02id_3342{
    margin-left: '5px'
}

 

#C02id_DivButton {
}
 
    margin-top: 15px;
 
#C02id_DivButton button{
}

 
 id='C02id_ColumnTable'
 
    margin-top:5px;
 
style={{lineHeight: css_LineHeight, marginTop: '-20px' 
 
style={{lineHeight: css_LineHeight, marginTop: '-20px' }}
 
style={{ lineHeight: css_LineHeight, marginTop: '-20px' }}
 
style={{lineHeight: css_LineHeight}}
 
 style={{display:'flex;',float:'left',marginLeft:'10px'}}
 
 style={{
    marginLeft:'3px'
    }}
 
style={{
    marginTop:'-1px'
    }}
 
style={{marginLeft:'5px'}}
 
ivButton
 

#C02id_DivButton{
    margin-top:15px;
}
 
    overflow-x: auto;
 

#C02id_DivHeader td:last-child{
    background-color: #000000;
}
 
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
 
    background-color: burlywood;
 
    height:'20px'
 
    height:'20px'
 
</h1>
 
border-bottom: 2px solid chocolate;
 
-top
 
    border-top: 1px solid #000000;
 
<hr />
 
    margin-top:0px;
 

<hr/>
 
<hr/>
 

</div>
 
<div >
 
</div>
 
style={}
 
height:100px
 
<hr />
 
<hr/>
 
<hr/>
 
<hr />
 
<hr/>
 
<hr/>
 
    //height:'70vh'
 
Insertion
 
let_C01_BodyHeight.style.height="calc(100vh - 50px -"+let_C01idTH.toString()+"px)"
 
let let_C01idTH=(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
            let let_C01_BodyHeight=(document.getElementById('C02id_Height') as HTMLElement)!
 
            alert(let_C01idTH.toString())
 
    let let_C01idTH:number=0
 
        const let_CurrentTH = Ref_C01idTH.current;
 
(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
 
            //alert(let_C01Height)
            //alert(window.innerHeight)
 
            //if(let_C01Height>window.innerHeight){
            //    alert(let_C01Height)
            //}
 
let_C01idTH=(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
 
        alert(let_C01idTH)
 
{
            let_C01idTH = (document.getElementById('C01id_TH') as HTMLElement)!.offsetHeight;
            let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
            if(let_C01Width<175){
                setSS_C02(false)
            }
        }
 
        const updateSizes = () => {
            let_C01idTH = (document.getElementById('C01id_TH') as HTMLElement)!.offsetHeight;
            let let_C01Width = (document.getElementById('C01id_H') as HTMLElement)!.offsetWidth;

            if (let_C01Width < 175) {
                setSS_C02(false);
            }
        };
 
            //alert(let_C01Height)
            //alert(window.innerHeight)
 
            //if(let_C01Height>window.innerHeight){
            //    alert(let_C01Height)
            //}
 
+
 
Resize
 
,toString
 
+'
 
        {Key:20, Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:21, Array:['Weezer'               ,'Bbb','001']},
        {Key:22, Array:['Tally Hall'           ,'Ccc','002']},
        {Key:23, Array:['Que, The Human Editor','Ddd','010']},
        {Key:24, Array:['Human Centipede'      ,'Eee','011']},
 
56
    7
 
    height:'70vh'
 
<div id='BodyLeft' style={{width:let_Width}}>
{JSX_C02}
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
</div>
 
#C02id_Div {
    background-color: cadetblue;
}

 
height: calc(100vh - 40px);
 
    //height:'calc(100vh-52px-'+{let_C01idTH}+'px)'
    height:'70vh'
 
    
 
=(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
 
.toString()
 
    height:80vh;
 
let let_C01idTH=(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
 
        alert(window.innerHeight)
 
alert(let_CurrentC01)
 
alert(let_CurrentC01)
 
    display:flex;
 
    display: flex;
 
    display: inline-flex;
 
    display:grid;
 
    width:  50%;
 
    display: flex;
 
    width: 50%;
 
<div id='BodyLeft' style={{width:let_Width}}>
{JSX_C02}
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
</div>
 
    display:flex;
 

<C04_Header
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
 
<div id='HeaderRight'>
 
</div>
 
<div id='HeaderRight'>
<C04_Header
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
</div>
 
<C04_Header
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
 
    display: flex;
 
    width: 50%;
 
    margin-right:auto;
 
<div id='BodyLeft' style={{width:let_Width}}>
{JSX_C02}
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
</div>
 
<div id='BodyLeft' style={{width:let_Width}}>
{JSX_C02}
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
</div>
 
    height: 100vh;
 
    height:100%
 
    margin-left: 5px;
    margin-top:     5px;
    margin-bottom:  5px;
 
height:100%;
 
    margin-top:     5px;
    margin-bottom:  5px;
 
    height: 30px;
 
.C03id_Header button{

}
 
    height:25px;
 
    margin
 
    margin-top:10px;

 
    margin-bottom: 10px;
 
.C03id_Header {
    font-size: 16px;
    margin-left: 5px;
    height:40px;
}
 

{
// Body Right = Image Processing and Tesseract Setting
}
 
{
// Header = Import/Export Files
}
 
</div>
 
    background-color: rgb(130, 45, 45);
 
SS_Row={SS_Row}
 
    SS_Row,
 
    SS_Row:TS_Row[],
 
    SS_Row,
    SS_C02,
 
    SS_Row:TS_Row[],
    SS_C02:boolean,
 
#Header{
    
}
 
import C_TopButton from './Coms/C_TopButton'
 
<hr />

<C_TopButton
// Export Data
// Rename Table
    SS_Row    = {SS_Row}
    SS_C02    = {SS_C02}
    setSS_C02 = {setSS_C02}
/>
<hr />
 
../
 
{
// Body Left = CSV Table
}
 
</>
 
    box-sizing: border-box;
 
{JSX_C02}
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
 

//****************************************************************************
// JSX: C01_Table
//****************************************************************************
    let JSX_C01=<></>
 
    const Ref_Div = useRef<HTMLDivElement | null>(null);
 
let let_C01=(document.getElementById('C01id_H')as HTMLAreaElement)!
        if(let_C01.offsetWidth<175){
            setSS_C02(false)
        }
 
        else{
            setSS_C02
        }
 
        // function f_Resize() {
        //     setSS_Width(let_C01.offsetWidth)}
        // let_C01.addEventListener("resize", f_Resize);
        // f_Resize();
        // return () => let_C01.removeEventListener("resize", f_Resize);
 
    // https://stackoverflow.com/questions/71457792/resize-event-in-react
    const [SS_Width, setSS_Width] = useState(0);
 
            //let_C01.style.display='none'
 
            //let_C01.style.display='block'
 
 onResize={f_Resize}
 
 // Empty array ensures that effect is only run on mount
 
        // Remove event listener on cleanup
 
        // Call handler right away so state gets updated with initial window size
 
        // Add event listener
 
        // Handler to call on window resize
 
            // Set window width/height to state
 
        
 
{
            width: 
 
,
          }
 
            height: window.innerHeight,
 
    return windowSize;}
 
        
 
    useEffect(() => {
        let let_C01H = (document.getElementById('C01id_H') as HTMLInputElement);
        let let_WidthC01=let_C01H!.clientWidth
        if(let_WidthC01<175){
            let_C01H.style.display = 'none';
        }
        else{
            let_C01H.style.display = 'block';
        }
    }, []);
 
(document.getElementById('C01id_H') as HTMLInputElement)!.clientWidth
 
alert(
 
    if()
 
    const JSX_Input=ss_Columns.map((Column)=>{
        return (
            <td>{Column.Name}</td>
        )
    })
 
    height:74vh;
 
    position:absolute;
 
8px
 
    height:70vh;
 
    height:70vh;
 
    position:absolute;
    margin-top:30px;
 
    position:absolute;
    margin-top:30px;
 
    position:absolute;
 
height:let_tBodyHeight.toString()+'px'
 
    let let_tBodyHeight:number=0
 
        const tbody = document.getElementById('C02id_Height')
        const windowHeight = window.innerHeight;
        const divTableHeight = (document.querySelector('#C01id_Div')as HTMLInputElement)?.offsetHeight;
        const tbodyHeight = windowHeight - divTableHeight;

        if (tbody) {
            alert(divTableHeight)
            tbody.setAttribute("height", tbodyHeight.toString()+'px;');
            //tbody.style.height = tbodyHeight.toString()+'px;'
        }
 
 tbody
 
        let_tBodyHeight=(document.getElementById('C01id_Table')as HTMLInputElement).offsetHeight;
        alert(let_tBodyHeight)
        /*
 
100px
 
    height:100px;
 
    height:100px;
 
    height:100vh;
 
    height:70vh;
 
flex: 1;
 
    flex:1;
 
    height:760px;
 
#C01id_Table 
 
</div>
 
<div style={{overflowY:'auto'}}>
 
</div>
 
{
// Data
JSX_TH_Rows}
 
style={{overflowY:'auto'}}
 
overflow-y: auto;
 
    max-height:100vh;
    overflow-y: auto;
 
calc(50% - 450px);
 
    let let_Width:string='50%'
 
 style={{width:let_Width}}
 
        let_Width='50%'
 
        let_Width='calc(50% - 450px);'
 
    max-width: 50%;
 
calc(50% - 450px);
 
:string
 
width:
 
width:calc(50% - 450px);
 
    max-width: 50%;
 
    box-sizing: border-box;
 
        /* Limit the width to 50% of the window */
 
 style={{width:'450px'}}
 
    display: flex;
 
    border-color: red;
 
</div>
 
/*
 
*/
 
0
 
#C02id_Div {
    width: 450px;
}
 
<C02_Input
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
 
{JSX_Button}
 
/*onClick={()=>f_DSort(true)}*/
 
/*
 
<td><button className='C01id_Header' /*onClick={()=>f_DSort(true)}*/>Close Input Tab</button></td>
 
    /*
    function f_Rename():void{
        let let_NewName:string= (document.getElementById(C01id_Rename)as HTMLInputElement).value 
        let ss_Row:TS_Row[]=[...SS_Row]
        let let_UpdateColumns:TS_Row[]=U01_EditRow(THISROW,ss_Row,let_NewName)
        setSS_Row(let_UpdateColumns);
        // https://stackoverflow.com/questions/11688692/how-to-create-a-list-of-unique-items-in-javascript
    }

//****************************************************************************
// FUNCTION_02: Delete Column
//****************************************************************************
    function f_OpenDelete():void{
        f_Display(2)
    }
    function f_Delete():void{
        // https://youtu.be/XtS14dXwvwE?si=rYQOe_tJbxmSnDWE
        let ss_IndexColumns:number[] = SS_IndexColumns
        for(let i:number=0;i<ss_IndexColumns.length;i++){
            if(ss_IndexColumns[i]===THISROW.Key){
                ss_IndexColumns.splice(i, 1);
            }
        }

        let ss_Row:TS_Row[] = [...SS_Row];
        let let_UpdateColumns:TS_Row[]=D01_DeleteColumnName(THISROW,ss_Row)
        setSS_Row(let_UpdateColumns);
        setSS_IndexColumns(ss_IndexColumns);
    }
*/
 
:bool
 
const [SS_C02,setSS_C02]=useState<boolean>(false)
 
<C02_Input
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
 
    margin-left: auto;
 
, useEffect
 
//
 
    function f_Sort(property:any):any{
        // https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value
        let let_SortOrder:number = 1;
        if(property[0] === "-") {
            let_SortOrder = -1;
            property = property.substr(1);
        }
        return function(a:any,b:any){
            let let_Result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;
            return let_Result * let_SortOrder;
        }
    }
    /*
    function f_DSort(IsD:boolean):void{
        // Get the Alphabet Name Order of SS_Row
        let ss_Row:TS_Row[] = [...SS_Row]
        SS_Row.sort(f_Sort("Name"));
        if(IsD===true){SS_Row.reverse();}
        // https://www.w3schools.com/jsref/jsref_sort.asp
        // https://stackoverflow.com/questions/11182924/how-to-check-if-javascript-object-is-json
        
        // Update SS_IndexColumns
        setSS_IndexColumns(SS_Row.map((Column)=>Column.Key))
    }
    */
 
    margin-left: auto;
 
<C02_Input
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
 
    float: right;
    position: relative;
 
float:right;
 
#C01id_DivTable{
}
 
    overflow: auto;
 
    height: 300px;
 
#C02id_Div1 table {
    height: 300px;
}
 
    height:100vh
 
    height: 100vh;
 
    position:absolute
 
.C01id_EditRowButton button {
    height: 30px;
    width: 100vh;
    font-size: 16px;
    margin-right: 1px;
    margin-left: 1px;
}
 
.C01id_EditRowButton button {
    height: 30px;
    width: 100vh;
    font-size: 16px;
    margin-right: 1px;
    margin-left: 1px;
}
 
.C01id_SortButton input {
    height: 30px;
    font-size: 16px;
}
 

/************************************************************************************************
// C_ColumnButton.tsx
************************************************************************************************/
.C01id_SortButton {
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
}

.C01id_SortButton button,
.C01id_SortButton button {
    width: 100%;
    height: 100%;
}

.C01id_SortButton input {
    height: 30px;
    font-size: 16px;
}
 
.C01id_SortButton input{
    height:30px;
    font-size:16px;
}
 
}

tbody {
 
    --let_DivHeight: 500px;
 
tbody {
    height: var(--let_DivHeight);
}
 

#C01id_Table table{
    height:100vh
}
 
#C01id_Table table
 
import './index02.css'; // | index.jsx    | 0 |
 
#C01id_Div {
    display: flex;
    background-color: #c794e3;
    height:500px;
}

#C01id_H{
background-color:#555555;
}
 
-----------------------------+--------------+
 

</div>
 
<div id='C01id_Div'>
{/*
// Input tab
<C_Input
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
*/}
 
//import './C_Row.css'
 
import './index03.css'; // | C_input.jsx  | 1 | Row input                   | C01ids  
 
import C_Input from './Coms/C_Input';
 
{
// Image
}
<div
style={{
    width:'600px',
    height:'100vh',
    backgroundColor:'blue',
}}
>cec</div>
 
<C02_Input
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
 
={setSS_EditColumn}

 
={SS_EditColumn}
 
 [SS_Reset,setSS_Reset]=useState<number>(0)
 
    // Reset Column List after Update Column List (Create, Rename, Delete, Filter and Sort)
    // https://stackoverflow.com/questions/56649094/how-to-reload-a-component-part-of-page-in-reactjs
    // const
 
//****************************************************************************
// HOOK
//****************************************************************************
    const [SS_EditColumn,setSS_EditColumn]=useState<0|1>(0)
 
}
 
    display:'grid'
 
<div
style={{
    width:'600px',
    height:'100vh',
    backgroundColor:'blue',
    display:'grid'
}}
>cec</div>
 
<div
style={{
    width:'600px',
    height:'100vh',
    backgroundColor:'blue',
    display:'grid'
}}
>cec</div>
 
{
// Input tab
}
<C_Input
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
 
        // Iterate through each input element and set its value to ''
 
        // Get all input elements in the DOM
 
            
 
        f_ResetInput()
 
        f_ResetInput()

 
        f_ResetInput()
 
        f_ResetInput()
 
        f_ResetInput()
 
        f_ResetInput()
 
        f_Open(THISCOLUMN,0)
 
        alert(JSON.stringify(SS_Columns))
        f_Open(THISCOLUMN,0)
 
        alert(JSON.stringify(SS_Columns))
        f_Open(THISCOLUMN,0)
 
        alert(JSON.stringify(let_UpdateColumn))
        alert(JSON.stringify(SS_Columns))
 
    useEffect(() => {
  // Code to run after SS_Columns state is updated
}, [SS_Columns]); 
 
        alert(JSON.stringify(let_UpdateColumn))
        alert(JSON.stringify(SS_Columns))
 
        alert(let_Input)
 
.C01id_SortButton input
 
:root{
    --let_Width:500px;
}
 
width:ver(--let_Width)
 
style={{paddingTop:'5px',paddingBottom:'5px'}}
 
style={{paddingTop:'5px',paddingBottom:'5px'}}
 
paddingBottom:'5px',
 
paddingTop:'5px',
 
,float:'left'
 
style={{float:'left'}}
 
display:'flex;',
 
 style={{width:'75px;',marginLeft:'5px;'}}
 
style={{margin:5}}
 
<div style={{display:'flex;',float:'right'}}>
                <button onClick={()=>f_Rename(Column)}>Ok</button>
                <button onClick={()=>f_Open(Column,0)} style={{width:'75px;',marginLeft:'5px;'}}>Cancel</button>
                </div>
 
Change 
 
lineHeight:css_LineHeight
 
 paddingTop: '0px', paddingBottom: '0px', marginTop: '0px' ,
 
div
 
div
 

/************************************************************************************************
// C_Row.tsx
************************************************************************************************/

 
.C01id_HeightLightRow {
    background-color: rgb(100, 100, 200);
}

.C01id_HeightLightRow input {
    font-size: var(--let_Font02);
}
 
#C01id_RenameColumn {
    background-color: #c794e3;
}
 
    display: flex;
    align-items: center;
 
    margin-top: 5px;
 
-buttom
 
            <div className='C01id_CreateRowDiv'>
                <h1>{Column.Name}:   </h1>
            </div>
 
<div className='C01id_CreateRowButton'>
                <button onClick={()=>f_Open(Column,2)}>X</button>
                <button onClick={()=>f_Open(Column,1)}>...</button>
                </div>
 
<button onClick={()=>f_Open(Column,2)}>X</button>
                <button onClick={()=>f_Open(Column,1)}>...</button>
 
    float: left;
 
<button onClick={()=>f_Open(Column,2)}>X</button>
                <button onClick={()=>f_Open(Column,1)}>...</button>
 
    white-space: nowrap;
 
    white-space: nowrap;
    justify-content: space-between;
 
    white-space: nowrap;
    justify-content: space-between;
 
    white-space: nowrap;
    justify-content: space-between;
 
    white-space: nowrap;
    justify-content: space-between;
 
    /* Aligns items with maximum space between them */
 
    /* Aligns items with maximum space between them */
 
import {C01_Create} from '../../T01_Row/C01_Create';
 
import {U01_CreateColumn} from '../../T01_Row/U01_CreateColumn'
 
        let let_ColumnIndex:number=
 
R02_ReturnIndex(THISCOLUMN,ss_Columns)
 
        for(let i=0;i<ss_Rows.length;i++){
            ss_Rows[i].Array.push('-')
        }
 
import {U01_CreateColumn} from '../../T01_Row/U01_CreateColumn'
 
    
 
for(let j=0;j<ss_Rows[i].Array.length;j++){
                
            }
 
        alert()
 
        alert('HelloWorld')
 
.C01id_SortButton {
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
}

.C01id_SortButton button,
.C01id_SortButton button {
    width: 100%;
    height: 100%;
}
 
thead {
    margin-right: 15px;
}

tbody {
    height: var(--let_DivHeight);
}
 
#C01id_Table th {
    background-color: #0481aa;
    color: rgb(255, 255, 255);
}

#C01id_Table th:not(#C01id_Table th:first-child, #C01id_Table th:last-child) {
    padding-top: 5px;
    padding-bottom: 5px;
    width: var(--let_RowWidth);
    height: 40px;
}

#C01id_Table td:not(#C01id_Table td:first-child, #C01id_Table td:last-child) {
    padding-top: 5px;
    padding-bottom: 5px;
    width: var(--let_RowWidth);
}
 
, index.tsx
 
, Right Table
 
Specific for C01id_Div2, 
 
    display: flex;
 
    width: 200px;
 
.C01id_EditRowButton {
    width: 200px;
    display: flex;
}
 
.C01id_EditRowButton {
    width: 200px;
    display: flex;
}
 
    background-color: aquamarine;
    height: 500px;
 
    width: 100%;
 
 | 1 | Row input                   |              |
 
| index.jsx    | 1 | Right Main Table            | 
 
| index.jsx    | 
 
 | All                         | C01id_Div    |
 

/************************************************************************************************
// C01id_Div2 Table Header
************************************************************************************************/

.C01id_DivHeader {
    display: flex;
}

.C01id_Header {
    background-color: rgb(255, 255, 255);
    font-size: 16px;
    margin-left: 5px;
}
 
    overflow-y: auto;
 

thead {
    margin-right: 15px;
}

 
    height: 500px;
 
/*
https: //stackoverflow.com/questions/17067294/html-table-with-100-width-with-vertical-scroll-inside-tbody
https: //stackoverflow.com/questions/11759934/aligning-divs-beside-each-other-and-adding-an-horizontal-scrollbar-in-html
*/
 
.C01id_HeightLightRow {
    background-color: rgb(100, 100, 200);
}

.C01id_HeightLightRow input {
    font-size: 18px;
}

 
    white-space: nowrap;
    justify-content: space-around;
 
    white-space: nowrap;
    justify-content: space-around;
 
    padding-top: 5px;
    padding-bottom: 5px;
    width: 300px;
 
    padding-top: 5px;
    padding-bottom: 5px;
    width: 300px;
    height: 40px;
 
/*
#C01id_Table td:first-child,
#C01id_Table th:first-child{
    width:60px;
}
#C01id_Table td:last-child,
#C01id_Table th:last-child{
    width:120px
}
*/
 
#C01id_Table th {
    background-color: #0481aa;
    color: rgb(255, 255, 255);
}
 
    margin: 0px;
    padding: 0px;
 
    height: 40px;
    width: 300px;
 
    margin-right: 2px;
    margin-left: 2px;
    font-size: 16px;
 
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
 
.C01id_Left {
    width: 100px;
}
 
    height: 100%;
 
    font-size: 16px;
 
    background-color: #0481aa;
 
.C01id_RightEmpty {
    width: 200px;
}
 

.C01id_SortRight {
    margin: 0px;
    padding: 0px;
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
    height: 100%;
    width: 200px;
}
 

.C01id_SortRight {
    margin: 0px;
    padding: 0px;
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
    height: 100%;
    width: 200px;
}
 
#C01id_Table td,
#C01id_Table th {
    border: 1px solid #000000;
    padding: 1px;
}

#C01id_Table tr:nth-child(even):not(.C01id_HeightLightRow) {
    background-color: #f2f2f2;
}

#C01id_Table tr:hover {
    background-color: rgb(120, 159, 85);
}

 
#C01id_Table th {
    height: 30px;
}

#C01id_Table td {
    height: 0px;
}
 
    overflow-x: auto;
 
    table-layout: fixed;
 
    border-collapse: collapse;
 
    height: 25px;
 
    max-height: 20px;
 
#C01id_Table {
    /*
    https: //stackoverflow.com/questions/5671098/how-can-i-force-all-rows-in-a-table-to-have-the-same-height
    */
    border-collapse: collapse;
    height: 25px;
    table-layout: fixed;
    max-height: 20px;
    overflow-x: auto;
}
 
.C01id_P {
/*
* https://www.w3schools.com/cssref/pr_text_white-space.php
* https://stackoverflow.com/questions/2787310/how-to-reduce-the-space-between-p-tags
*/
    white-space: nowrap;
    margin: 0;
    background-color: 'red';
}
 
.C01id_P {
/*
* https://www.w3schools.com/cssref/pr_text_white-space.php
* https://stackoverflow.com/questions/2787310/how-to-reduce-the-space-between-p-tags
*/
    white-space: nowrap;
    margin: 0;
}
 
#C01id_DivTable {
    margin-top: 0px;
    width: 100%;
}
 
#C01id_DivTable {
    margin-top: 0px;
    width: 100%;
}
 
display: flex;
 
font-size: 16px;
 
margin-right: 1px;
    margin-left: 1px;
 
font-size: 16px;
 
height: 30px;
    font-size: 16px;
 
.C01id_EditRowButton {
    display: flex;
    width: 200px;
}

.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}

 
.C01id_EditRowButton {
    display: flex;
    width: 200px;
}

.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}

 
.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}
 
.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}
 
.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}
 
This file contains only constant value
// Specific C_Input.jsx
 
This file contains only constant value
// Specific C_Input.jsx
 
This file contains only constant value
// Specific C_Input.jsx
 
This file contains only constant value
// Specific C_Input.jsx
 
.C01id_EditRowButton{
    width:200px;
}
 
    width:200px;
 
    width: 200px;
 
// Specific index.jsx part 0
 
General 
 
Specific 
 
  
 
eneral
 
  IsGeneral
 
General 
 
//
 
#C01id_Table {
    /*
    https: //stackoverflow.com/questions/5671098/how-can-i-force-all-rows-in-a-table-to-have-the-same-height
    */
    border-collapse: collapse;
    height: 25px;
    table-layout: fixed;
    max-height: 20px;
    overflow-x: auto;
}

#C01id_Table th {
    height: 30px;
}

#C01id_Table td {
    height: 0px;
}

#C01id_Table td,
#C01id_Table th {
    border: 1px solid #000000;
    padding: 1px;
}

#C01id_Table tr:nth-child(even):not(.C01id_HeightLightRow) {
    background-color: #f2f2f2;
}

#C01id_Table tr:hover {
    background-color: rgb(120, 159, 85);
}
 

.C01id_EditRowButton {
    display: flex;
    width: 200px;
}

.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}

.C01id_EditRowButton input {
    width: 100vh;
}
 
.C01id_EditRowButton {
    display: flex;
    width: 200px;
}

.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}

.C01id_EditRowButton input {
    width: 100vh;
}
 
import './css00_index.css';
import './css01_C_Input.css';
 
import './css02_index.css';
 
#C01id_Div2 {
    background-color: aquamarine;
    height: 500px;
    width: 100%;
}
 
// C01id_Div2
 
// C01id_Div
 
// C01id_Div1
 
import './css_index.css';
 
 style={{height:css_HeightDiv}}
 
    const css_HeightDiv:number=300
 
    const css_WidthDiv:number=400
 
style={{width:css_WidthDiv}}
 
    margin-left: 10px;
 
    margin-top: 10px;
 
#C01id_Div1 td {
    margin-left: 10px;
}
 
01_
 
    height: 30px;
 
#C01id_Div1 h1 {
    font-size: 18px;
}
 
#C01id_Div1 h1 {
    font-size: 18px;
}
 
.C01id_CreateRowButton button {
    width: 40px;
    height: 20px;
}
 
/************************************************************************************************
// C01id_Div2
************************************************************************************************/
#C01id_Div2 {
    background-color: aquamarine;
    height: 500px;
    width: 100%;
}


.C01id_EditRowButton{
    display:flex;
    width:200px;
}

.C01id_EditRowButton button{
    margin-right: 1px;
    margin-left : 1px;
    height:30px;
    font-size: 16px;
    width:100vh;
}

.C01id_EditRowButton input{
    width:100vh;
}

#C01id_DivTable{
    margin-top: 0px;
    width: 100%;
}

.C01id_P {
/*
* https://www.w3schools.com/cssref/pr_text_white-space.php
* https://stackoverflow.com/questions/2787310/how-to-reduce-the-space-between-p-tags
*/
    white-space: nowrap;
    margin: 0;
}

#C01id_Table{
    /*
    https: //stackoverflow.com/questions/5671098/how-can-i-force-all-rows-in-a-table-to-have-the-same-height
    */
    border-collapse: collapse;
    height: 25px;
    table-layout: fixed;
    max-height: 20px;
    overflow-x: auto;
}

#C01id_Table th{
    height: 30px;
}

#C01id_Table td{
    height: 0px;
}

#C01id_Table td,
#C01id_Table th
{
    border: 1px solid #000000;
    padding: 1px;
}

#C01id_Table tr:nth-child(even):not(.C01id_HeightLightRow) {
    background-color: #f2f2f2;
}

#C01id_Table tr:hover {
    background-color: rgb(120, 159, 85);
}

.C01id_SortRight{
    margin: 0px;
    padding: 0px;
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
    height: 100%;
    width: 200px;
}

.C01id_SortButton {
    margin: 0px;
    padding: 0px;
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
    height: 40px;
    width: 300px;
}

.C01id_SortButton button,
.C01id_SortButton button {
    margin-right: 2px;
    margin-left: 2px;
    font-size: 16px;
    width:100%;
    height: 100%;
}

.C01id_RightEmpty{
    width: 200px;
}
.C01id_Right button{
    font-size: 16px;
    height: 100%;
    background-color: #0481aa;
}
.C01id_Left{
    width:100px;
}
#C01id_Table th{
    background-color: #0481aa;
    color: rgb(255, 255, 255);
}



#C01id_Table th:not(#C01id_Table th:first-child,#C01id_Table th:last-child) 
{
    padding-top: 5px;
    padding-bottom: 5px;
    width:300px;
    height:40px;
    white-space: nowrap;
    justify-content: space-around;
}

#C01id_Table td:not(#C01id_Table td:first-child, #C01id_Table td:last-child){
    padding-top: 5px;
    padding-bottom: 5px;
    width: 300px;
    white-space: nowrap;
    justify-content: space-around;
}
/*
#C01id_Table td:first-child,
#C01id_Table th:first-child{
    width:60px;
}
#C01id_Table td:last-child,
#C01id_Table th:last-child{
    width:120px
}
*/

.C01id_HeightLightRow{
    background-color: rgb(100,100,200);
}

.C01id_HeightLightRow input{
    font-size: 18px;
}

/*
https: //stackoverflow.com/questions/17067294/html-table-with-100-width-with-vertical-scroll-inside-tbody
https: //stackoverflow.com/questions/11759934/aligning-divs-beside-each-other-and-adding-an-horizontal-scrollbar-in-html
*/

thead,
tbody {
    display:block;
}

#C01id_InnerTable{
    width: 100%;
    overflow-x: scroll;
    background-color: antiquewhite;
}

thead{
    margin-right: 15px;
}

tbody {
    height: 500px;
    overflow-y: auto;
}

/************************************************************************************************
// C01id_Div2 Table Header
************************************************************************************************/

.C01id_DivHeader {
    display: flex;
}

.C01id_Header {
    background-color: rgb(255,255,255);
    font-size: 16px;
    margin-left: 5px;
}

 
/************************************************************************************************
// C01id_Div1
************************************************************************************************/
#C01id_Div1 {
    background-color: cadetblue;
}

#C01id_Div1 td {
    display: grid;
}

#C01id_RenameColumn {
    background-color: #c794e3;
}

#C01id_Div1 table {
    display: grid;
    width: 100%;
    overflow-y: scroll;
}

#C01id_Div1 table td{
    width:90%;
}
#C01id_Div1 td {
    margin-left: 10px;
}

#C01id_Div1 button {
    border: 2px solid rgb(0, 0, 0);
    background-color: rgb(255, 255, 255);
    height: 30px;
    margin-right:3px;
}

#C01id_Div1 hr {
    color: red;
    background-color: red;
    height: 2px;
    border: none;
    width: 100%;
}

#C01id_Div1Button {
    margin-top: 10px;
    margin-left: 0%;
    display: flex;
}

#C01id_Div1 h1 {
    font-size: 18px;
}

.C01id_CreateRowDiv {
    display: flex;
    white-space: nowrap;
    justify-content: space-between;
    /* Aligns items with maximum space between them */
    align-items: center;
}

.C01id_CreateColumnDiv{
    display: flex;
    white-space: nowrap;
    justify-content: space-between;
    /* Aligns items with maximum space between them */
    align-items: center;
}

.C01id_CreateColumnDiv input{
    margin-left:10px;
    width:58%;
}

.C01id_CreateRowButton{
    display: flex;
    white-space: nowrap;
    float: right;
}

.C01id_CreateRowButton button{
    width: 40px;
    height: 20px;
}
 
    const css_FontSize01:number=18
    const css_FontSize02:number=16
 
#C01id_Div1 input{
    font-size: 18px;
}
 
style={{fontSize:css_FontSize02}}
 
style={{fontSize:css_FontSize01}}
 
    font-size: 18px;
 
    font-size: 16px;
 
height:300px;
 
_C01idDiv1
 
_
 
    width: 448px;
 
<h3>C01_Table</h3>
 
        f_Open(THISCOLUMN,0)
 
        D02_Delete
 
1id_RenameColumn'+THISCOLUMN.Name)  as HTMLInputElement).value.toString();
 
        let let_Input:string=(document.getElementById('C0
 
    function f_Rename(N:string):void{
        alert(N)
    }
 
,INDEX:number
 
Row
 
else 
 
if (Column.Display===undefined || Column.Display===0)
        {return(
            <tr><td>

            <div className='C01id_CreateRowDiv'>
                <h1>{Column.Name}:   </h1>
                <div className='C01id_CreateRowButton'>
                <button onClick={()=>f_Open(Column,2)}>X</button>
                <button onClick={()=>f_Open(Column,1)}>...</button>
                </div>
            </div>

            <input id={'C01id_Input'+Column.Name}></input>

            </td></tr>
        )}
 
else{
        return (
            <td>
                <div className='C01id_SortButton'>
                    <div style={{whiteSpace: 'normal'}}>
                        Do you want to delete this column?
                    </div>
                    <button style={{width:'90px'}}>Ok</button>
                    <button style={{width:'90px'}} onClick={()=>f_Open(Column,0)}>Cancel</button>
                </div>
            </td>
        )}
 
else if(Column.Display===1){
        return (
            <td>
                <div className='C01id_SortButton'>
                    <input></input>
                    <button>Ok</button>
                    <button onClick={()=>f_Open(Column,0)}>Cancel</button>
                </div>
            </td>
        )}
 
<button onClick={()=>f_Sort(index)}>Sort</button>
 
<button onClick={()=>f_Open(Column,1)}>X</button>
 
,width:'300px'
 
</div>D
 
style={{whiteSpace: 'normal'}}
 
 column
 
 if(Column.Display===1)
 
 style={{width:'100px;',marginLeft:'-50px;'}}
 
 className='C01id_CreateRowButton'
 
className='C01id_CreateRowButton'
 
 style={{width:'100px;',marginLeft:'-50px;'}}
 
want 
 
            <tr className='C01id_HeightLightRow'><td>
            <div className='C01id_CreateRowDiv'>
                <h1>{Column.Name}?</h1>
            </div>
            </td></tr>
            
 
you want to delete {Column.Name}?
 
                <div className='C01id_CreateRowButton'>
                <button onClick={()=>f_Open(Column,2)}>Ok</button>
                <button onClick={()=>f_Open(Column,0)} style={{width:'75px;',marginLeft:'5px;'}}>Cancel</button>
                </div>
 
            <button onClick={()=>f_Open(Column,2)}>Ok</button>
            <button onClick={()=>f_Open(Column,0)} style={{width:'75px;',marginLeft:'5px;'}}>Cancel</button>
                
 
<button onClick={()=>f_Open(Column,2)}>Ok</button>
                <button onClick={()=>f_Open(Column,0)} style={{width:'75px;',marginLeft:'5px;'}}>Cancel</button>
                
 
            <input id={'C01id_Input'+Column.Name}></input>
 
margin-left:'5px'
 
                <input></input>
 
</div>
 
C01id_RenameColumn
 
#C01id_RenameColumn{
    
}
 
            <input id={'C01id_Input'+Column.Name}></input>
 

            <input id={'C01id_Input'+Column.Name}></input>
 
Rename
 
Rename
 
{}
 
Column
 
Column
 
export default {}
 
</>
 
setSS_Display(1)
 
    const [SS_Display,setSS_Display]=useState<0|1|2>(0)
 
    if(SS_Display===1){
        JSX_Input=ss_Columns.map((Column)=>{
        return(
            <h1>Hello {Column.Name}</h1>
        )
    })
    }
 
()=>
 
('C01id_Input'+Column.Name)
 
Column
 
<tr>
<td></td>
<td></td>

</tr>
 
{
// Row Input tab
JSX_Input}
 
<tr>
    <th className='C01id_Left'>Index </th>
    {JSX_ColumnsName}
    <th className='C01id_Right'>Edit  </th>
</tr>
 
</div>
 
<div className='C01id_EditRowButton'><input></input><button>Add Column</button>
 
*/}
 
/*
#C01id_Table td:first-child,
#C01id_Table th:first-child{
    width:60px;
}
#C01id_Table td:last-child,
#C01id_Table th:last-child{
    width:120px
}
*/
 
</div>
 

{
// Table tab
}
 
    /*
    const JSX_TH_Rows:JSX.Element[] = let_Rows.map((Column,index) => 
        {
        // https://stackoverflow.com/questions/44969877/if-condition-inside-of-map-react
        // Default Mode
        if (Column.Display===undefined || Column.Display===0)
        {return <th>{Column.Name}</th>}
        // Rename
        else if (Column.Display===1){
            return <th><input type='text' className='C01id' id={'C01id_Rename'+Column.Key.toString()}></input></th>
        }
        // Delete Warning
        else if (Column.Display===2){
            return  <th >
                    <p className='C01id_P'>Do you want to delete</p> 
                    <p className='C01id_P'>{Column.Name}</p> 
                    </th>
        }
        // Unselect Warning
        else{
            return  <th >
                    <p className='C01id_P'>Do you want to unselect</p> 
                    <p className='C01id_P'>{Column.Name}</p> 
                    </th>
        }
        }
        );
    
    const JSX_BUTTON_Rows:JSX.Element[] = let_Rows.map((Column)=>
        <td>
        <C_DefineColumnButton
            THISROW={Column}
            SS_IndexColumns={SS_IndexColumns}
            setSS_IndexColumns={setSS_IndexColumns}
            SS_Row={SS_Row}
            setSS_Row={setSS_Row}
        />
        </td>
        );
    */
 
<div id='MC_Empty'></div>
 
Button
 
C01id_SortButton 
 
 C01id_Right
 
</tr>
 
<hr />
 
<hr/>
 
.Array
 
Small 
 
//****************************************************************************
// FUNCTION_04: Update
//****************************************************************************

 

.C01id_TableCell{

}
 
width: 100vh;
 
NAME:string,
 
            //alert(let_UpdateRow)
            alert(ss_UpdateRow)
 
let let_UpdateRow=
 
            //alert(let_UpdateRow)
            alert(ss_UpdateRow)
 
.splice(INDEX, 1)
 
ss_UpdateRow.splice(INDEX, 1,NAME)
 
    const [SS_Reset,setSS_Reset]=useState<number>(0)
 

    useEffect(()=>{
        setSS_Reset(Math.random())
    },[SS_UpdateRow])
 
 key={SS_Reset}
 
div 
 
    const [SS_Reset,setSS_Reset]=useState<number>(0)
 
 className={SS_Reset.toString()}
 
            setSS_Reset(Math.random()
 
    //const [SS_UpdatedData,setSS_UpdateData]=useState<string[]>(['','',''])
    useEffect(()=>{
        setSS_UpdateRow(SS_UpdateRow)
    },
    [SS_UpdateRow])
 
        alert(NAME)
 
        alert(let_Input)
 
setSS_UpdateRow(ss_UpdateRow)
 
            let let_OldName:string=ss_UpdateRow[INDEX]
 
ss_UpdateRow[INDEX]
 
SS_UpdateRow
 
        // alert(JSON.stringify(ss_Columns))
        // alert(JSON.stringify(let_UpdateColumns))
        // alert(let_NewColumn.length)
        // alert((ss_Columns!==let_UpdateColumns).toString())
 
        /*
        // https://stackoverflow.com/questions/12989741/the-property-value-does-not-exist-on-value-of-type-htmlelement
        let let_Name:string=(document.getElementById('C01id_InputName')  as HTMLInputElement).value.toString();
        // By ChatGPT
        //let let_Price : number = parseFloat((document.getElementById('C01id_InputPrice') as HTMLInputElement).value);
        //let_Price = isNaN(let_Price) ? 0 : let_Price;
        
        let ss_Row:TS_Row[]=[... SS_Row]
        let let_NewRow:TS_Row={
            Key:0,
            Name:let_Name,
        }
        let let_UpdateRows:TS_Row[]=C_Create(ss_Row,let_NewRow)
        setSS_Row(let_UpdateRows)
        /*
        // Calculate the new SS_Column
        let let_NewName:string=(document.getElementById('C01id_CreateNewColumn') as HTMLInputElement).value.toString();
        let ss_Row:TS_Row[]=[... SS_Row]
        let let_UpdateColumns:TS_Row[]=C_Create(SS_Row,let_NewName)
        
        // Calculate the order of SS_Column inside of C01_Table
        let ss_IndexColumns:number[]=[...SS_IndexColumns]
        let let_UpdateIndexColumns:number[]=[...ss_IndexColumns,let_UpdateColumns[0].Key]
        
        // Update both the SS_IndexColumns and SS_Row
        setSS_IndexColumns(let_UpdateIndexColumns)
        setSS_Row(let_UpdateColumns)
        */
 
JSON.stringify
 
'C01id_Input'+Column
 
/*
 
            let let_Input:string=;
 
(document.getElementById('C01id_Input'+ss_Columns[i])  as HTMLInputElement).value.toString()
 
            let let_Input=document.getElementById('C01id_Input'+ss_Columns[i])
 
        {Key:20, Array:['Aaa','Xedni Wor'            ,'000']},
        {Key:21, Array:['Bbb','Weezer'               ,'001']},
        {Key:22, Array:['Ccc','Tally Hall'           ,'002']},
        {Key:23, Array:['Ddd','Que, The Human Editor','010']},
        {Key:24, Array:['Eee','Human Centipede'      ,'011']},
        {Key:30, Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:31, Array:['Weezer'               ,'Bbb','001']},
        {Key:32, Array:['Tally Hall'           ,'Ccc','002']},
        {Key:33, Array:['Que, The Human Editor','Ddd','010']},
        {Key:34, Array:['Human Centipede'      ,'Eee','011']},
        {Key:40, Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:41, Array:['Weezer'               ,'Bbb','001']},
        {Key:42, Array:['Tally Hall'           ,'Ccc','002']},
        {Key:43, Array:['Que, The Human Editor','Ddd','010']},
        {Key:44, Array:['Human Centipede'      ,'Eee','011']},
        {Key:50, Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:51, Array:['Weezer'               ,'Bbb','001']},
        {Key:52, Array:['Tally Hall'           ,'Ccc','002']},
        {Key:53, Array:['Que, The Human Editor','Ddd','010']},
        {Key:54, Array:['Human Centipede'      ,'Eee','011']},
 
ColumnName
 
export default {}
 
ColumnName
 
.C01id_Right button{
    width:200px;
    color: rgb(255, 255, 255);
}
 
.C01id_Right button{
    width:200px;
    color: rgb(255, 255, 255);
}

 
,
#C01id_Table th:last-child 
 
color: rgb(255, 255, 255);
 
first-child,
#C01id_Table th:last-child
 
    background-color: #0481aa;
    color: rgb(255, 255, 255);
 
:last-child
 
background-color: #0481aa;
 
    background-color: #0481aa;
 
    font-size: 16px;
 
    width: 100%;
 
C01id_RightEmpty
 
<button>Add Column</button>
 
style={{color: "red"}} 
 
style={{display:'none'}}
 
Add Column
 
<button>Add Column</button>
 
className='C01id_UpdateOKButton'
 

.C01id_UpdateOKButton{
    width:100%
}
 
    width:100vh;
 
.C01id_EditRowButton input
 
.C01id_EditRowButton
 
    padding-left:2px;
    padding-right: 2px;
 
    */
 
    /*
 
setSS_Columns(let_UpdateColumns)
 
    /*
 
    white-space: nowrap;
    justify-content: space-around;
 
    grid-template: repeat(5, 300px);
 
let_NEWCOLUMN
 
    white-space: nowrap;
    justify-content: space-around;
 
    white-space: nowrap;
    justify-content: space-around;
 

    justify-content: space-around;
 

    justify-content: space-around;
 
    white-space: nowrap;
 
    white-space: nowrap;
 
    justify-content: space-around;
 
    justify-content: space-around;
 
    width:100%
 
.C01id_RightRow{
    
}
 
SortButton
 
SortButton
 
SortButton
 
 button 
 
    margin-right: 2px;
    margin-left: 2px;
    font-size: 16px;
    height: 30px;
 
*/
#C01id_Table th
 
/*
 
*/
#C01id_Table td
 
 th:not(#C01id_Table th:first-child, #C01id_Table th:last-child)
 
.C01id_SortButton{
    margin:0px;
    padding:0px;
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
    height: 100%;
    width:500px;
}

.C01id_SortButton button{
    margin-right: 2px;
    margin-left:  2px;
    font-size: 16px;
    height:30px;
}

 
#C01id_Table th
/* 
 
/* 
 
    width:10px
 
    width: 100%;
 
    width:100%;
    height:100%
 
</div>
 
</div>
 
    width: 100%;
        height: 100%;
 
-columns
 
    grid-template-rows: 300px repeat(8, 80px) 300px;
 
:not(#C01id_Table td:first-child, #C01id_Table td:last-child)
{
 
:not(#C01id_Table th:first-child, #C01id_Table th:last-child) 
 
#C01id_Table td:not(#C01id_Table td:first-child,#C01id_Table td:last-child){
    padding-top: 5px;
    padding-bottom: 5px;
    width:300px;
}
 
#C01id_Table th,
#C01id_Table td {
    display:grid;
    text-align: left;
    padding: 8px;
}
 
    border: 1px solid #dddddd;
 
    display: block
 
    display:block
 
    display: flex;
    flex-direction: column;
 
    display: block
 
    display:block
 
block
 
    display:block
 
<tr><td></td><td>i</td></tr>
<tr><td></td><td>i</td></tr>
 
    position:absolute
 
<tr></tr>
<tr></tr>
 
    display: inline-block;
 
    float: left;
 
New 
 
    white-space: nowrap;
 
#C01id_Table th:last-child,
 
#C01id_Table td:last-child,
#C01id_Table th:last-child
 
    overflow-y: auto;
 
width: 100%;
 
</div>
 
    background-color: bisque;
 
    float: left;
 
    overflow-y: auto;
 
inline-
 
    position: absolute;
 
    display:block
 
position: absolute;
 
inline-
 
    display: block;
 
    display: grid;
 
display: block;
 
display: block;
 
    display: block;
 
    margin-right:12px
 
#C01id_Table table {
    overflow-x: scroll;
    width: 500px;
}
 
#C01id_Table table{
    overflow-x: scroll;
    width:500px;
}
 
#C01id_Div1 table{
    overflow-x: scroll;
    width:100px;
}

 
overflow-x:auto;
 
    width: 1200px;
 
overflow-x:auto;
 
    width: 1200px;
 
width:100%;
 
    width: 140px;
 
    width: 140px;
 
    width:220px;
 
    width:220px;
 
    width: 100%;
 
    width: 100%;
 
    width: 100%;
 
    width:100%;
 
    width: 1200px;
 
    width:90%;
 
    width: 400px;
 
    width: 100%;
 
    display: grid;
 
    width: 1000px;
 
    width: 100px;
 
        width: 1000px;
 
    width: 1000px;
 
    height: 500px;
    overflow-y: auto;
 
    width: 1000px;
 
    width: 1000px;
 
overflow-x: auto;
 
#C01id_Table td:first-child {
    width: 50px;
}
 
    width:100%;
 
    /* Just for the demo          */
 
    /* Trigger vertical scroll    */
 
    /* Hide the horizontal scroll */
 
vh
 
    overflow-x: scroll;
 
<thead>
 
</thead>
 
</tbody>
 
overflow-y: scroll;
 
let_NEWCOLUMN
 
Column
 
.Name
 
.Name
 
                Key: let_NewKey,    
 
[]
 
    */
 
    // Generate New Key
    let let_NewKey:number = Math.random()
    while(ROWS.map(ROW=>ROW.Key).includes(let_NewKey)===true){
        let_NewKey = Math.random()
    }
    // Add New Column in List of All Columns
    // https://stackoverflow.com/questions/31048953/what-are-these-three-dots-in-react-doing
    const let_NewROW:TS_Row={
        Key: let_NewKey,    
        Array: NEWROW,
        }
    return [let_NewROW,...ROWS]
    // We might check the length of the element inside array later.

    /*
 

export default {}
 

        let let_Name:string
 
 onClick={f_ResetInput}
 
 button
 
    /* Aligns items with maximum space between them */
    align-items: center;
 
    justify-content: space-between;
 
<hr />
 
<div>
<input></input>
<button>Add New Column</button>
</div>
 
<hr />
 
<hr />

<div>
<input></input>
<button>Add New Column</button>
</div>
 
<div>
<input></input>
<button>Add New Column</button>
</div>
 

#C01id_Table table{
    overflow-y: scroll;
}

 
overflow-y: scroll;
 
overflow-y: scroll;
 
overflow-y: scroll;
 
</table>
 
<table>
 
</table>
 
    overflow-y: scroll;
 
overflow-y: scroll;
 
overflow-y: scroll;
 
    scroll-
 
:string[]
 
,'Price','Amount'
 
string
 
    margin-top: 10px;
 
</div>
 
<input></input>
 
background-color: #000000;
 
    float: right;
    justify-content: flex-end;
 
float:right;
    justify-content: flex-end;
 
    justify-content: flex-start;
 
    margin-left: 10px;
 
</div>
 
<h1>{Column}:   </h1>
 
<h1>{Column}:   </h1>
 
    margin-left:10px;
    padding: 0px;
 
<input id={'C01id_Input'+Column}></input>
 
</div>
 
        */
 
        alert('Hello')
        /*
 
        // https://stackoverflow.com/questions/11182924/how-to-check-if-javascript-object-is-json
 

//****************************************************************************
// FUNCTION_01: Sort SS_Row
//****************************************************************************
    function f_DSort(COLUMN:string):void{
        // Get the Alphabet Name Order of SS_Row
        let ss_Row:TS_Row[] = [...SS_Row]
        ss_Row.sort(f_Sort(COLUMN));
        if(SS_IsD===true){
            ss_Row.reverse();
            setSS_IsD(false)
        }
        else{
            setSS_IsD(true)
        }
        
        
        
        // Update SS_IndexColumns
        setSS_Row(ss_Row)
    }
 
/*
*/
 
/*
 

    /*
        // Check duplicate Column Name
        if(ROWS.map(Column=>Column.Name).includes(NEWNAME)===false){
            // Replace the previous name (the name with selected key) with new name
            for(let i:number=0;i<ROWS.length;i++){
                if(ROWS[i].Key===THISROW.Key){
                    ROWS.splice(i, 1,{
                    Key: THISROW.Key,
                    Name: NEWNAME, 
                });
                }
            }
            return ROWS
        }
    return ROWS
    */
 
/*
 
/*
 
.Array
 
    let 
 
/*
 
//****************************************************************************
// JSX_00: JSX_SubRow
//****************************************************************************
 
    const ss_Row=[...SS_Row]
    const JSX_Row_TD=ss_Row.map((Row)=>{
        let JSX_R=[]
        return (
            <td>{Row.}</td>
        )
    }
    )
 
        for(let i=0;i<Row.Array.length;i++){
            JSX_R.apprnd()
        }
 
        Row.Array.map()
 
return (
            <td>{Row.}</td>
        )
 
index
 
<td><div className='C01id_SortButton'><button onClick={()=>f_DSort('Name')}>Sort</button><button>Rename</button><button>Type</button><button>X</button></div></td>
 
et
 
        let_Amount = isNaN(let_Amount) ? 0 : let_Amount;
 
        let let_Amount:number = parseFloat((document.getElementById('C01id_InputAmount') as HTMLInputElement).value);
 
    <td><div className='C01id_SortButton'><button onClick={()=>f_DSort('Price')}>Sort</button><button>Rename</button><button>Type</button><button>X</button></div></td>
    <td><div className='C01id_SortButton'><button onClick={()=>f_DSort('Amount')}>Sort</button><button>Rename</button><button>Type</button><button>X</button></div></td>
 
    <th>Price </th>
    <th>Amount</th>
 
                    Price: THISROW.Price,
                    Amount: THISROW.Amount
 
                Price: NEWROW.Price,
                Amount:NEWROW.Amount
 
    <td>{THISROW.Price}</td>
    <td>{THISROW.Amount}</td>
 
    <td>{THISROW.Price}</td>
    <td>{THISROW.Amount}</td>
 
    <td>{THISROW.Price}</td>
    <td>{THISROW.Amount}</td>
 
    <td>{THISROW.Price}</td>
    <td>{THISROW.Amount}</td>
 
            Price :let_Price ,
            Amount:let_Amount,
 
        // DEFAULT: have no default
                        // Unique Column Name 
                        // (Less than 50 letters)
    Price :number,
    Amount:number,
 
        // DEFAULT: have no default
                        // Unique Column Name 
                        // (Less than 50 letters)
    Price :number,
    Amount:number,
 
const [SS_Row,setSS_Row]=useState<TS_Row[]>([
        {Key: 0, Name: 'Xedni Wor'            ,Price:1.7,Amount:11.7},
        {Key: 1, Name: 'Weezer'               ,Price:2.0,Amount:12.0},
        {Key: 2, Name: 'Tally Hall'           ,Price:3.2,Amount:33.2},
        {Key: 3, Name: 'Que, The Human Editor',Price:5.1,Amount:15.1},
        {Key: 4, Name: 'Human Centipede'      ,Price:4.5,Amount:34.5},
        ]);
 
Name
 
Column
 
<input></input>
 
Create 
 
Create 
 
    <th>Create New Column</th>
 
    <td><div className='C01id_SortButton'><button onClick={()=>f_DSort('Amount')}>Create New Column</button></div></td>
 
<button>
 
    width:200px;
 
Change 
 
Change 
 
Change 
 
    

    // Copy SS_Column usinf useState, because I want to rememder the index of each object inside SS_Row of C01_Table.
    const [SS_UpdateRow,setSS_UpdateRow]=useState<TS_Row[]>(SS_Row)
    
    useEffect(()=>{
        //alert(JSON.stringify(SS_Row))
        // https://stackoverflow.com/questions/53332321/react-hook-warnings-for-async-function-in-useeffect-useeffect-function-must-ret
        setSS_UpdateRow(SS_Row)
    },[SS_Row])
 
Update
 
<td><div className='C01id_EditRowButton'><button onClick={f_Cancel}>Ok</button></div></td>
    <td><div className='C01id_EditRowButton'><button onClick={f_Cancel}>Cancel</button></div></td>
 
"3"
 
    <td></td>
    <td></td>
    <td>Do you sure you want to delete this row?</td>
 
    <td></td>
 
    <td></td>
 
<h1>
 
<tr className='C01id_HeightLightRow'>
    <td></td>
    <td><div className='C01id_EditRowButton'><input></input><button>Ok</button></div></td>
    <td><div className='C01id_EditRowButton'><input></input><button>Ok</button></div></td>
    <td><div className='C01id_EditRowButton'><input></input><button>Ok</button></div></td>
    <td><div className='C01id_EditRowButton'><button onClick={f_Cancel}>Cancel</button></div></td>
</tr>
 
Edited
 
        //setSS_Display(1)
 
        setSS_Display(0)
 
        //alert('Working')
 
            alert(THISROW.Key)
 
,SS_IndexColumns,SS_PrivateReset
 
,SS_IndexColumns,SS_PrivateReset
 
    const [SS_PrivateReset,setSS_PrivateReset]=useState<boolean>(true)
    // SS_PrivateColumns only updated onces in useEffect.
    // It determine the order of SS_Row
 
        setSS_Display(1)
 
            break;
 
 table 
 
    border-collapse: collapse;
 

.C01id_HeightLightRow tr{
    display:flex;
}
 
    background-color: rgb(100, 100, 200);
 
:not(.C01id_HeightLightRow)
 

#C01id_Table tr:nth-child(even) {
    background-color: #f2f2f2;
}
 
className='C01id_HeightLightRow'
 
    let let_Display:0|1|2|3=0
    if(typeof THISROW.Display!==undefined){
        let_Display!=THISROW.Display
    }
 
0
    
 
<div className='C01id_EditRowButton'></div>
 
<button onClick={f_OpenRename}>Edit</button><button onClick={f_OpenDelete}>X</button>
 
: {INDEX}
 
Editor
 
: {INDEX}
 
<button onClick={f_OpenRename}>Ok</button>
 
<button onClick={f_OpenDelete}>Cancel</button>
 
: {INDEX}
 
</>
 
    const C01id_Rename:string='C01id_Rename'+THISROW.Key.toString()
 
//****************************************************************************
// FUNCTION_00: Change Mode of C_DefineColumn Components for Rename and Delete 
//****************************************************************************

    function f_Display(D:0|1|2|3){
        //let ss_Row:TS_Row[]=[...SS_Row]
        //let let_UpdateColumns:TS_Row[]=U_UpdateDisplay(THISROW,ss_Row,D)
        //setSS_Row(let_UpdateColumns)   
    }

    function f_Cancel():void{
        f_Display(0)
    }

 
/*
 
    let let_DefaultDisplay:0|1|2
    if(THISROW.Display===undefined || THISROW.Display===3){
        let_DefaultDisplay=0
    }else{
        let_DefaultDisplay=THISROW.Display
    }

 
</>
 
</>
 
    SS_IndexColumns:number[],
    setSS_IndexColumns:(S:number[])=>void,
 
    // https://stackoverflow.com/questions/56649094/how-to-reload-a-component-part-of-page-in-reactjs
    SS_IndexColumns,    // Only used in f_Delete
    setSS_IndexColumns,
 
<div 
    className={'C01id'} 
    key={THISROW.Key} 
>
 
</div>
 
import C_DefineColumnButton from './Coms/useless01'
import C_CreateColumn from './Coms/useless00';
 
    let let_NewKey:number=Math.random()
    while(ROWS.map(ROW=>ROW.Key).includes(let_NewKey)===true){
        let_NewKey=Math.random()
    }
 
:number
 
let let_Amount:number = parseFloat((document.getElementById('C01id_InputAmount') as HTMLInputElement).value);
 
et_Price
 

        // Check if the value is a valid number
 
.toString()
 
.toString()
 
alert('Hello The World')
 
        if()
 
)
 
    SS_IndexColumns   :number[],
    setSS_IndexColumns:(S:number[])=>void,
 
    SS_IndexColumns,    // Update the index of Column inside C01_Table
    setSS_IndexColumns, // -
 
<div id='C01id_Div1'>
<table>
<h1 id='C01id_Div1Header'>Create New Row</h1>
<hr/>
<div >
<tr><td><h1>Name:   </h1><input></input></td></tr>
<tr><td><h1>Price:  </h1><input></input></td></tr>
<tr><td><h1>Amount: </h1><input></input></td></tr>
</div>
<hr />
<tr><td>
<div id='C01id_Div1Button'>
<button>Ok</button>
<button>Cancel</button>
</div>
</td></tr>
</table>
</div>
 
<div className='C01id_SortButton'><button onClick={()=>alert('KK')}>Sort</button></div>
 
//****************************************************************************
// FUNCTION_01: Sort Index
//****************************************************************************
    function f_SortIndex(COLUMN:string):void{
        // Get the Alphabet Name Order of SS_Row
        let ss_Row:TS_Row[] = [...SS_Row]
        ss_Row.sort(f_Sort(COLUMN));
        if(SS_IsD===true){
            ss_Row.reverse();
            setSS_IsD(false)
        }
        else{
            setSS_IsD(true)
        }
        // https://www.w3schools.com/jsref/jsref_sort.asp
        // https://stackoverflow.com/questions/11182924/how-to-check-if-javascript-object-is-json
        
        // Update SS_IndexColumns
        setSS_Row(ss_Row)
    }
 
SS_Column
 
import U_DefineTableHeader from './Coms/U_DefineTableHeader'
 
()=>f_DSort()
 
    Column:string,
 
    Column,
 
Name
 
IsD:boolean
 
    SS_IndexColumns,    // Update the index of Column inside C01_Table
    setSS_IndexColumns, // -
 
    SS_IndexColumns   :number[],
    setSS_IndexColumns:(S:number[])=>void,
 
 , useEffect
 
onClick={f_CreateColumn}
 
{/*
//****************************************************************************
// Edited Data
//****************************************************************************
<tr>
    <td>Original: 2</td>
    <td>Coffee</td>
    <td>100</td>
    <td>Delicious</td>
    <td></td>
</tr>
<tr>
    <td>Edited: 2</td>
    <td>Cake</td>
    <td>100</td>
    <td>Delicious</td>
    <td></td>
</tr>
<tr>
    <td>Editor</td>
    <td><button>Edit</button><button>Reset</button></td>
    <td><input></input><button>Ok</button><button>Cancel</button></td>
    <td><input></input><button>Ok</button><button>Cancel</button></td>
    <td><button>Ok</button><button>Cancel</button></td>
</tr>
*/}

{/*
//****************************************************************************
// The Mind Electric
//****************************************************************************
<tr>
    <th>Row Index</th>
    {JSX_TH_Rows}
    <th>Create new column as</th>
</tr>
<tr>
    <td></td>
    {JSX_BUTTON_Rows}
    <C_CreateColumn
// When create new columns
// SS_Column has to be updated
// and we have to calculate the order of new column.
        SS_Row={SS_Row}
        setSS_Row={setSS_Row}
        SS_IndexColumns={SS_IndexColumns}
        setSS_IndexColumns={setSS_IndexColumns}
    />
</tr>
    */}
 

.C01id_SortButtonLong button{
    margin-right: 5px;
    font-size: 16px;
    width: 100%;
    height: 30px
}
 
.C01id_EditRowButton{
    display:flex;
}
 
    <td><div className='C01id_SortButton'><button>Sort</button></div></td>
 
 Time, The Liminal Space Editor'},
 
interested in Homo Sapien, The Insect futuristic human, The Caregiver, Everywhere at the end of Space
 
re, The Khama Universal Police, The Better than Man after Man, The Bug who 
 
 God of Sci Fic, The Realistic Frizer, The Owner of Omnitrix, The Devil of the Futu
 
        //{Key: 3, Name: 'Que, The Human Editor, The Last Alien Bender, The
 
    margin-right: 5px;
 
    border: 1px solid rgb(205, 205, 205, 1);
 
    border-left: 5px solid rgb(205, 205, 205, 0);
    border-right: 5px solid rgb(205, 205, 205, 0);
 
.C01id_DivHeader{
    display: flex;
}

.C01id_Header {
     background-color: rgb(193, 193, 193);
     font-size: 16px;
     border: 1px solid rgb(205, 205, 205, 0);
     border-left: 5px solid rgb(205, 205, 205, 0);
     border-right: 5px solid rgb(205, 205, 205, 0);
}

 

#C01id_Div1Header{
    margin-left:0px;
}
 
    margin-top:0px;
 
    display: grid;
    margin-top:0px;
 

.C01id_Delete{
    font-size: 16px;
}
 
#C01_Button button {
    font-size: 17px;
}
 
    padding-left:5px;

 
    text-align: left;
 
    padding-left:20px;
 
margin-left:20px;
 
    overflow: hidden;
 
#C01id_Table th{
    height: 50px;
    overflow: hidden;
}
 
#C01id_Table table {
    /*
    https: //stackoverflow.com/questions/5671098/how-can-i-force-all-rows-in-a-table-to-have-the-same-height
    */
    border-collapse: collapse;
    width: 100%;
    height: 25px;
    table-layout: fixed;
    max-height: 20px;
}
 
#C01id_Div2{
    width: 500px;
    height:500px;
    overflow-y: scroll;
}
 

#C01id_Div2{
    width: 500px;
    height:500px;
    overflow-y: scroll;
}
 

td.C01id{
    height:0px;
}

 

.C01id_Header {
     background-color: rgb(193, 193, 193);
     font-size: 16px;
     border: 1px solid rgb(205, 205, 205, 0);
     border-left: 5px solid rgb(205, 205, 205, 0);
     border-right: 5px solid rgb(205, 205, 205, 0);
 }
 


.C01id_Header {
     background-color: rgb(193, 193, 193);
     font-size: 16px;
     border: 1px solid rgb(205, 205, 205, 0);
     border-left: 5px solid rgb(205, 205, 205, 0);
     border-right: 5px solid rgb(205, 205, 205, 0);
 }
 


.C01id_DivHeader{
    background-color: #023445;
    position:absolute;
}
 
.C01id {
    font-size: 16px;
    border: 1px solid rgb(205, 205, 205, 0);
    border-left: 5px solid rgb(205, 205, 205, 0);
    border-right: 5px solid rgb(205, 205, 205, 0);
    height: 30px;
    display: flex
}
 
#C01id_Div1 hr{
    color: red;
    background-color: red;
    height: 2px;
    border:none;
    width:100%;
}

#C01id_Div1Button{
    margin-top: 10px;
    margin-left: 0%;
    display:flex;
}

#C01id_Div1 h1{
    font-size: 18px;
}

 
#C01id_Div1 hr{
    color: red;
    background-color: red;
    height: 2px;
    border:none;
    width:100%;
}
 
#C01id_Div1{
    background-color: cadetblue;
    width:200px;
}

#C01id_Div1 td{
    display:grid;
}

#C01id_Div1 table{
    display:grid;
}

#C01id_Div1 td{
    margin-left:10px;
}

#C01id_Div1 button{
    border: 2px solid rgb(0, 0, 0);
    background-color: rgb(255, 255, 255);
    height: 30px;
}

 
#C01id_Div1{
    background-color: cadetblue;
    width:200px;
}
 
#C01id_Div{
    display:flex;
    background-color: #c794e3;
}
 
, The Last Alien Bender, The God of Sci Fic, The Realistic Frizer, The Owner of Omnitrix, The Devil of the Future, The Khama Universal Police, The Better than Man after Man, The Bug who interested in Homo Sapien, The Insect futuristic human, The Caregiver, Everywhere at the end of Space Time, The Liminal Space Editor
 
100000001000000010000000
 
000000010000000100000001000000010000000100000001
 
</div>
 
className='C01id_EditRowButton'
 
<h1>ww</h1>
 
className='C01id_EditRowButton'
 
    border: 2px solid rgb(0, 0, 0);
 
    border: 0px rgb(0,0,0,0);
 
    width: 100px;
    height:40px;
 
td
 
 className='C01id_EditRow'
 
button
 
     border: 2px solid rgb(0, 0, 0);
     background-color: rgb(255, 255, 255);
     height: 30px;
 
#C01id_Div1 button,
 
#C01id_Div1 button,
 
{
    
}

button.C01id {
 
button.C01id{
    border: 2px solid rgb(0, 0, 0);
    background-color: rgb(255, 255, 255);
    height: 30px;
}
 
tr,
 
    margin-left: 10px;
 
    flex:1;
 
className='C01id_hr'
 
id='C01id_Div1'
 
id='C01id_Div1Input'
 
id='C01id_Div1InputHeader'
 
className='C01id_hr'
 
    border: 3px;
 
#C01id_Div1Input{
    background-color: #c794e3;
}

#C01id_Div1InputHeader{
    background-color: aquamarine;
}

 
id='C01id_Div1InputHeader'
 
</div>
 
</div>
 
/*
 
*/
 
</td>
 
<button>Ok</button>
<button>Cancel</button>
 
<button>Ok</button>
<button>Cancel</button>
 
    display:flex;
 
<button>Ok</button>
<button>Cancel</button>
 
<h1>Create New Row</h1>
 
    display: block;
 
    overflow-x: scroll;
 
    overflow-x: scroll;
 
background-color: #023445;
 
    background-color: #023445;
 
</table>
 
</td>
 
</div>
 
Input
 
Input
 
</div>
 
</>
 
<>
 
</>
 
<h1>hh</h1>
 
    function f_Display(
            D:0|1|2|3,
            s_Row:TS_Row[],
            setS_Row:(S:TS_Row[])=>void):void{
        let let_UpdateColumns:TS_Row[]=U_UpdateDisplay(THISROW,s_Row,D)
        setS_Row(let_UpdateColumns)    
    }
 


 

        f_Display(D,ss_Row,setSS_Row)
        
 
,true
 
        IsNewSelect:boolean,
 
ColumnName
 
    setSS_IndexColumns = {setSS_IndexColumns}
 
<td><button className='C01id_Header' onClick={()=>f_DSort(true)}>Descending Sort Columns</button></td>
<td><button className='C01id_Header' onClick={()=>f_DSort(false)}>Ascending Sort Columns</button></td>
 
    setSS_IndexColumns,   // from ../index.js, Sort Column
 
    setSS_IndexColumns:(S:number[])=>void
 
{
/*
 

*/}
 
SS_IndexColumns:number[],
setSS_IndexColumns:(S:number[])=>void,
 
SS_IndexColumns,
setSS_IndexColumns
 
SS_IndexColumns={SS_IndexColumns01}
setSS_IndexColumns={setSS_IndexColumns01}
 
//****************************************************************************
 

    // Index Columns of C01_Table
    const [SS_IndexColumns01,setSS_IndexColumns01]=useState<number[]>(SS_Columns.map(Column=>Column.Key))
    // Index Columns of C02_ColumnName
    const [SS_IndexColumns02,setSS_IndexColumns02]=useState<number[]>(SS_Columns.map(Column=>Column.Key))

//****************************************************************************
// USEEFFECT_00: Update SS_IndexColumns01 and SS_IndexColumns02
//****************************************************************************
    useEffect(() => {
    // Variable
    let ss_IndexColumns:number[]=[...SS_Columns].map(Column=>Column.Key)
//****************************************************************************
    // Add object key inside SS_IndexColumns01 
    for(let i:number=0;i<ss_IndexColumns.length;i++){
        if(SS_IndexColumns01.includes(ss_IndexColumns[i])===false){
            let ss_IndexColumns01 =[...SS_IndexColumns01] 
            setSS_IndexColumns01([...ss_IndexColumns01,ss_IndexColumns[i]]);
        }
    }
//****************************************************************************
    // Add object key inside SS_IndexColumns02
    for(let i:number=0;i<ss_IndexColumns.length;i++){
        if(SS_IndexColumns02.includes(ss_IndexColumns[i])===false){
            let ss_IndexColumns02 =[...SS_IndexColumns02] 
            setSS_IndexColumns02([ss_IndexColumns[i],...ss_IndexColumns02]);
        }
    }
//****************************************************************************
    // Delete undefined SS_IndexColumns01 object
    let let_DeleteTarget01:number[]=[]
    let IsDelete01:boolean=false
    for(let i:number=0;i<SS_IndexColumns01.length;i++){
        const let_Name:TS_Row|undefined=SS_Columns.find(({Key})=>Key === SS_IndexColumns01[i])
        if(typeof let_Name==='undefined'){
            // https://www.tutorialspoint.com/typescript/typescript_array_push.htm
            let_DeleteTarget01.push(SS_IndexColumns01[i])
            IsDelete01=true
        }
    }
    if(IsDelete01===true){
        // https://stackoverflow.com/questions/5767325/how-can-i-remove-a-specific-item-from-an-array-in-javascript
        let ss_IndexColumns01:number[]=[...SS_IndexColumns01]
        let let_UpdateColumns01:number[]=ss_IndexColumns01.filter(Key=>!let_DeleteTarget01.includes(Key))
        setSS_IndexColumns01(let_UpdateColumns01)
        let_DeleteTarget01=[]
        IsDelete01=false
    }
//****************************************************************************
    // Delete undefined SS_IndexColumns02 object
    let let_DeleteTarget02:number[]=[]
    let IsDelete02:boolean=false
    for(let i:number=0;i<SS_IndexColumns02.length;i++){
        const let_Name:TS_Row|undefined=SS_Columns.find(({Key})=>Key === SS_IndexColumns02[i])
        if(typeof let_Name==='undefined'){
            // https://www.tutorialspoint.com/typescript/typescript_array_push.htm
            let_DeleteTarget02.push(SS_IndexColumns02[i])
            IsDelete02=true
        }
    }
    if(IsDelete02===true){
        // https://stackoverflow.com/questions/5767325/how-can-i-remove-a-specific-item-from-an-array-in-javascript
        let ss_IndexColumns02:number[]=[...SS_IndexColumns02]
        let let_UpdateColumns02:number[]=ss_IndexColumns02.filter(Key=>!let_DeleteTarget02.includes(Key))
        setSS_IndexColumns02(let_UpdateColumns02)
        let_DeleteTarget02=[]
        IsDelete02=false
    }
//****************************************************************************
    }, [SS_Columns,SS_IndexColumns01,SS_IndexColumns02]);
 
SS_IndexColumns={SS_IndexColumns01}
setSS_IndexColumns={setSS_IndexColumns01}
 
import { U_IsSelect } from '../../T02_ColumnName/U_IsSelect';
 
                    IsSelect: ThisColumn.IsSelect,
                    IsVisible: true
 
                IsSelect:IsNewSelect,
                IsVisible: true
 
.filter(Column=>
        Column.IsSelect===true
        // https://react.dev/learn/rendering-lists
    ));
 
    const let_Columns:TS_ColumnName[] = ([...SS_PrivateColumns].filter(Column=>
        Column.IsSelect===true
        // https://react.dev/learn/rendering-lists
    ));
 
    // Drag and Drop Columns
    const Ref_DragColumn = useRef<number>(0)
    const Ref_DragOverColumn = useRef<number>(0)
 
/*
 
//****************************************************************************
 
//****************************************************************************
// JSX_01: Testing, Debugging
//****************************************************************************
    const JSX_TestColumn:JSX.Element[] = SS_Columns.map((Column)=>
        <tr>
        <td>{Column.Name}</td>
        <td>|{Column.Key}</td>
        <td>|{Column.IsSelect.toString()}</td>
        <td>|{Column.IsVisible.toString()}</td>
        </tr>
        );
    function JSXName(ThisKey:number):string{
        const let_Name=SS_Columns.find(({Key})=>Key === ThisKey)
        if (let_Name===undefined){
            return 'undefined'
        }
        else{
            return let_Name.Name
        }
    }
    const JSX_TestColumn01:JSX.Element[] = SS_IndexColumns01.map((Key)=>
        <div>
        <td>* {Key}</td>
        <td>| {JSXName(Key)}</td>
        </div>
        );
    const JSX_TestColumn02:JSX.Element[] = SS_IndexColumns02.map((Key)=>
        <div>
        <td>* {Key}</td>
        <td>| {JSXName(Key)}</td>
        </div>
        );
    
    const JSX_DivTestColumn:JSX.Element=<
div id='Body' >
<hr/>
    <div>
    <h1>Testing (Main)</h1>
    <h2>Length:{SS_Columns.length}</h2>
    {JSX_TestColumn}
    </div>
<hr/>
    <div>
    <h1>JSX_TestColumn01</h1>
    <h2>Length:{SS_IndexColumns01.length}</h2>
    {JSX_TestColumn01}
    </div>
<hr/>
    <div>
    <h1>JSX_TestColumn02</h1>
    <h2>Length:{SS_IndexColumns02.length}</h2>
    {JSX_TestColumn02}
    </div>
<hr/>
</div>
 
    IsSelect:boolean,   // DEFAULT: false
                        // Is the Column display in C01_Table
                        // const [SS_IsSelect,setSS_IsSelect]=useState<boolean>(false)

    IsVisible:boolean,  // DEFAULT: true
                        // Is the Column display in C02_Column
                        // If the column satisfy 1 of 3 conditions
                        // 1. Consist of SS_Filter in their name
                        // 2. New Column 
                        // 3. Renamed Column 
                        // Then it is visible in C02_Column and IsVisible = true
 
// f_DSort is used for sort SS_Column in Alphabet order
// We want to access SS_Columns.Name,
// so that we can calculate valid SS_IndexColumns
    SS_Columns    = {SS_Columns}
    setSS_IndexColumns = {setSS_IndexColumns}

 
<button>Edit</button><button>X</button>
 
<button>Edit</button><button>X</button>
 
: 2
 
<input></input>
 
<button>Sort</button>
 

{
/*
 
{JSX_TH_Columns}
 
</tr>
 
</tr>
 
    <th>Row Index</th>
 
<tr>
    <th>Row Index</th>
    {JSX_TH_Columns}
    <th>Create new column as</th>
</tr>
 
<button>...</button>
 
<td><button className='C01id_Header' /*onClick={()=>f_DSort(true)}*/>Import Data</button></td>
 
<td><button className='C01id_Header' /*onClick={()=>f_DSort(true)}*/>Export Filtered Data</button></td>
<td><button className='C01id_Header' /*onClick={()=>f_DSort(true)}*/>Rename Table</button></td>
<td><button className='C01id_Header' /*onClick={()=>f_DSort(true)}*/>Inspecting Table</button></td>
 
        
 
            draggable
            onDragStart={()=>{Ref_DragColumn.current=index}}
            onDragEnter={()=>{Ref_DragOverColumn.current=index}}
            onDragEnd={()=>f_Drag()}
            onDragOver={(e)=>e.preventDefault()}
 

//****************************************************************************
// FUNCTION_01: Drag and Drop Column
//****************************************************************************
    // https://youtu.be/_nZCvxJOPwU?si=ixJXOlrb40z19L2p
    function f_Drag():void{
        let ss_IndexColumns:number[]=SS_IndexColumns
        const let_DragColumnCurrent:number=ss_IndexColumns[Ref_DragColumn.current]
        ss_IndexColumns[Ref_DragColumn.current] = ss_IndexColumns[Ref_DragOverColumn.current]
        ss_IndexColumns[Ref_DragOverColumn.current] = let_DragColumnCurrent
        setSS_IndexColumns(ss_IndexColumns)
        setSS_PrivateReset(true)
    }
 
//****************************************************************************
// FUNCTION_02: Utility, Will Develop Later
//****************************************************************************
    function f_OpenSetting():void{
        let ss_Columns:TS_ColumnName[] = [...SS_Columns];
        //alert(JSON.stringify(list))
        alert(ss_Columns.length)
        // https://stackoverflow.com/questions/5612787/converting-an-object-to-a-string

        // * [C]: Create Copy Column
        // * [R]: Filter Data
        // * [R]: Inspect Column
        // * [R]: Data Visualization with Filter Condition
        // * [U]: Transform Column
        // * [U]: Replace Data
        // * [U]: Delete Data with Filter Condition
    }

 
<button className={'C01id'} onClick={f_OpenSetting}>...</button>
 
else if (let_DefaultDisplay===3){
        JSX_Column=
<>
<button className={'C01id'} onClick={f_UnSelect}>OK</button>
<button className={'C01id'} onClick={f_Cancel}>Cancel</button>
</>
    }
 
<button className={'C01id'} onClick={f_OpenDelete}>X</button>
 
<button className={'C01id'} onClick={f_OpenUnselect} id={C02id_CheckButton} style={{backgroundColor: "white"}}>X</button>
 
//****************************************************************************
// FUNCTION_03: Unselect Column
//****************************************************************************
    const C02id_CheckButton:string = 'C01id_CheckButton'+ThisColumn.Key.toString()
    function f_OpenUnselect():void{
        f_UpdateDisplay(3)
    }

    function f_UnSelect():void{
        // https://react.dev/learn/responding-to-events#preventing-default-behavior
        // https://www.w3schools.com/jsref/met_document_getelementbyid.asp
        let ss_Columns:TS_ColumnName[]= [...SS_Columns];
        let let_UpdateColumn:TS_ColumnName[]=U_IsSelect(ss_Columns,false,undefined,ThisColumn)
        setSS_Columns(let_UpdateColumn);
        // https://stackoverflow.com/questions/11688692/how-to-create-a-list-of-unique-items-in-javascript
    }
 
    //      3|  // UnSelect JSX Column| f_OpenUnSelect => let_DefaultDisplay(3) => Open UnSelect JSX Column
 

// ColumnName Panel
<C02_ColumnName 
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_IndexColumns={SS_IndexColumns02}
setSS_IndexColumns={setSS_IndexColumns02}
/>

// Table Panel
 
// 
 
//
 

// <P00_Header/>

//<div id='Body' >

// ColumnName Panel
// <C02_ColumnName 
// SS_Columns={SS_Columns}
// setSS_Columns={setSS_Columns}
// SS_IndexColumns={SS_IndexColumns02}
// setSS_IndexColumns={setSS_IndexColumns02}
// />

// Table Panel
// <C01_Table 
// SS_Columns={SS_Columns}
// setSS_Columns={setSS_Columns}
// SS_IndexColumns={SS_IndexColumns01}
// setSS_IndexColumns={setSS_IndexColumns01}
// />

// </div>
//****************************************************************************

// <>
// <P00_Header/>
// <P01_Panel/>
// </>
 
import TS_ColumnName from "./T02_ColumnName/An_Index";
 
import C02_ColumnName from "./C02_ColumnName";
import P00_Header from './P00_Header'
import P01_Panel from './P01_Panel_H/index'
 
eng+
 
'/Users/imac/Desktop/SoloOpenSourceProject/JOCR/TestImage/Expenses_Macro/IMG_7553.jpeg'
 
img=img[:,200:1000]
 
ShowMustGoOn(img)
 
#img=Image.open(img)
 
txts.append(txt)
 
txts=[]
 
'''
 
    
 
for path in paths:
    # Modify image
 
print('Hii')
 
img = get_grayscale(img)
 

Hellp
 
Day 17
* Learn how to create hook 
* Try to avoid creating nested component, but it does not works, even with the help of chat gpt 
* 
To Do Now (Read and fix this)
 * Create custom hook 
 * avoid nested component
1. https://blog.webdevsimplified.com/2019-11/how-to-write-custom-hooks/?fbclid=IwAR11CqBKZB1UttksdQe_VEOWClHARAHaRP7LfEHwTC9YwMIz--ha3DvNAXc
2. https://youtu.be/b0IZo2Aho9Y?si=Fu1eHkhY29AigPgA
3. https://youtu.be/TNhaISOUy6Q?si=MewpxqgUjrDNFUSX
4. https://youtu.be/QQYeipc_cik?si=WZspHtbEE5Okbm0f
 
img = sharpen(img)
 
img = erode(img)
 
img = erode(img)
 
k3*24+
 
k3*24+
 
'''
 
eng+
 
+tha
 
eng+
 
JoJOCR.
 
    
    
 
k1=-2
 
k2=-0.1
 
2*
 
+2*0.1
 
-0.1,-0.1,-0.1,-0.1
 
'''
 
'''
 
      
 
'''
 
'''
 
import cv2
from kernel import ShowMustGoOn 
path='/Users/imac/Desktop/SoloOpenSourceProject/JOCR/TestImage/Expenses_Macro/IMG_7553.jpeg'
image = cv2.imread(path)

filtered_image = image#cv2.medianBlur(image, 5)
ShowMustGoOn(filtered_image)

# Bilateral filtering
filtered_image = cv2.bilateralFilter(image, 9, 75, 75)
ShowMustGoOn(filtered_image)

# Adaptive threshold method
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
_, adaptive_threshold = cv2.threshold(gray_image, 0, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 25, 10)
ShowMustGoOn(adaptive_threshold)
 
'image.jpg
 
cv2.waitKey(0)
cv2.destroyAllWindows()
 
cv2.waitKey(0)
cv2.destroyAllWindows()
 
cv2.waitKey(0)
cv2.destroyAllWindows()
 
'median-filtered image', 
 
import cv2
image = cv2.imread('image.jpg')
 
import cv2
image = cv2.imread('image.jpg')
 
filtered_image = cv2.medianBlur(image, 5)
 
# Saving Text
f = open("demo.txt", "a",encoding="utf-8")
f.write(''.join(txt))
f.close()
 
from kernel import canny,get_grayscale,sharpen,erode,dilate,opening,ShowMustGoOn 
from txt import pensil, eraser
 
ile_to_delete
 

2ÇØÇ
ÇØÇiÇØÇsÇØÇ ÇØÇsÇØÇcÇØÇeÇØÇ ÇØÇSÇØÇHÇØÇ ÇØÇwÇØÇaÇØÇeÇØÇeÇØÇnÇØÇtÇØÇ)ÇØÇ ÇØÇoÇØÇnÇØÇeÇØÇ ÇØÇ"ÇØÇ
ÇØÇvÇØÇiÇØÇnÇØÇ ÇØÇFÇØÇHÇØÇ ÇØÇWÇØÇoÇØÇrÇØÇ ÇØÇ7ÇØÇ7ÇØÇ7ÇØÇ)ÇØÇ ÇØÇGÇØÇiÇØÇnÇØÇaÇØÇ ÇØÇGÇØÇmÇØÇnÇØÇwÇØÇyÇØÇ ÇØÇ:ÇØÇ
ÇØÇgÇØÇeÇØÇiÇØÇiÇØÇnÇØÇeÇØÇwÇØÇ ÇØÇrÇØÇyÇØÇ ÇØÇPÇØÇhÇØÇ ÇØÇOÇØÇTÇØÇ ÇØÇeÇØÇeÇØÇ ÇØÇDÇØÇeÇØÇnÇØÇeÇØÇ,ÇØÇ ÇØÇmÇØÇeÇØÇnÇØÇeÇØÇ ÇØÇ7ÇØÇ
ÇØÇ‘ÇØÇ ÇØÇ;ÇØÇ ÇØÇ7ÇØÇ ÇØÇ;ÇØÇ
ÇØÇcÇØÇuÇØÇlÇØÇtÇØÇiÇØÇeÇØÇsÇØÇ ÇØÇwÇØÇeÇØÇ ÇØÇHÇØÇFÇØÇ ÇØÇeÇØÇrÇØÇiÇØÇnÇØÇ ÇØÇhÇØÇeÇØÇtÇØÇuÇØÇtÇØÇuÇØÇmÇØÇ ÇØÇnÇØÇeÇØÇiÇØÇiÇØÇdÇØÇ ÇØÇ‘ÇØÇ
ÇØÇoÇØÇrÇØÇpÇØÇ ÇØÇeÇØÇrÇØÇeÇØÇ ÇØÇ-ÇØÇ
ÇØÇ~ÇØÇ ÇØÇ©ÇØÇ ÇØÇPÇØÇeÇØÇtÇØÇ ÇØÇhÇØÇuÇØÇeÇØÇ ÇØÇnÇØÇaÇØÇnÇØÇ ÇØÇoÇØÇnÇØÇeÇØÇ ÇØÇ—ÇØÇ
ÇØÇrÇØÇaÇØÇ ÇØÇeÇØÇaÇØÇeÇØÇ ÇØÇ.ÇØÇ
ÇØÇtÇØÇoÇØÇnÇØÇsÇØÇ ÇØÇaÇØÇTÇØÇ
ÇØÇ©ÇØÇ ÇØÇ«ÇØÇ ÇØÇwÇØÇrÇØÇ ÇØÇPÇØÇaÇØÇlÇØÇsÇØÇ ÇØÇ©ÇØÇ
ÇØÇoÇØÇnÇØÇ ÇØÇ:ÇØÇ ÇØÇaÇØÇrÇØÇtÇØÇeÇØÇ ÇØÇaÇØÇeÇØÇfÇØÇuÇØÇiÇØÇeÇØÇ
ÇØÇfÇØÇrÇØÇsÇØÇvÇØÇeÇØÇuÇØÇsÇØÇ ÇØÇaÇØÇnÇØÇtÇØÇ
ÇØÇsÇØÇrÇØÇoÇØÇ ÇØÇaÇØÇ*ÇØÇ ÇØÇaÇØÇdÇØÇ ÇØÇoÇØÇ
ÇØÇEÇØÇEÇØÇ ÇØÇiÇØÇeÇØÇ ÇØÇaÇØÇ
ÇØÇaÇØÇpÇØÇnÇØÇiÇØÇeÇØÇ ÇØÇ-ÇØÇ ÇØÇSÇØÇAÇØÇGÇØÇAÇØÇSÇØÇ ÇØÇsÇØÇiÇØÇdÇØÇlÇØÇiÇØÇaÇØÇtÇØÇaÇØÇaÇØÇdÇØÇeÇØÇsÇØÇaÇØÇiÇØÇaÇØÇeÇØÇaÇØÇnÇØÇeÇØÇnÇØÇsÇØÇiÇØÇlÇØÇiÇØÇeÇØÇaÇØÇiÇØÇaÇØÇsÇØÇ ÇØÇtÇØÇoÇØÇnÇØÇsÇØÇ ÇØÇeÇØÇtÇØÇ ÇØÇrÇØÇeÇØÇ ÇØÇhÇØÇeÇØÇ ÇØÇaÇØÇgÇØÇaÇØÇtÇØÇeÇØÇ
ÇØÇ©ÇØÇ ÇØÇ-ÇØÇ ÇØÇ_ÇØÇ ÇØÇeÇØÇ
ÇØÇsÇØÇuÇØÇaÇØÇ ÇØÇtÇØÇ ÇØÇ-ÇØÇ
ÇØÇ€ÇØÇ ÇØÇaÇØÇ ÇØÇ¥ÇØÇ ÇØÇaÇØÇ?ÇØÇ ÇØÇ.ÇØÇ ÇØÇ-ÇØÇ ÇØÇwÇØÇaÇØÇ ÇØÇ-ÇØÇ ÇØÇ'ÇØÇ ÇØÇ°ÇØÇ
ÇØÇ5ÇØÇ.ÇØÇeÇØÇ@ÇØÇ ÇØÇ“ÇØÇAÇØÇsÇØÇ ÇØÇcÇØÇ ÇØÇ.ÇØÇ ÇØÇ‘ÇØÇ?ÇØÇ@ÇØÇ ÇØÇcÇØÇeÇØÇ ÇØÇhÇØÇtÇØÇsÇØÇ
ÇØÇeÇØÇ ÇØÇ,ÇØÇ ÇØÇmÇØÇaÇØÇoÇØÇ ÇØÇsÇØÇeÇØÇeÇØÇsÇØÇ?ÇØÇ ÇØÇMÇØÇaÇØÇrÇØÇeÇØÇ ÇØÇeÇØÇsÇØÇtÇØÇoÇØÇyÇØÇ ÇØÇ1ÇØÇ.ÇØÇ ÇØÇ;ÇØÇ ÇØÇ3ÇØÇ0ÇØÇ.ÇØÇ ÇØÇaÇØÇoÇØÇ ÇØÇnÇØÇyÇØÇ
ÇØÇ:ÇØÇ ÇØÇ>ÇØÇ.ÇØÇ«ÇØÇ ÇØÇ?ÇØÇ_ÇØÇ-ÇØÇ
ÇØÇaÇØÇ ÇØÇbÇØÇeÇØÇ,ÇØÇ ÇØÇSÇØÇOÇØÇ ÇØÇaÇØÇ”ÇØÇ ÇØÇmÇØÇeÇØÇrÇØÇ ÇØÇ'ÇØÇ ÇØÇrÇØÇeÇØÇ ÇØÇ7ÇØÇ?ÇØÇ)ÇØÇ ÇØÇ’ÇØÇ ÇØÇ‘ÇØÇ ÇØÇ'ÇØÇ
ÇØÇ ÇØÇ)ÇØÇ ÇØÇ.ÇØÇoÇØÇ5ÇØÇ ÇØÇsÇØÇeÇØÇeÇØÇsÇØÇoÇØÇoÇØÇeÇØÇrÇØÇtÇØÇsÇØÇeÇØÇ ÇØÇcÇØÇoÇØÇvÇØÇeÇØÇtÇØÇ ÇØÇmÇØÇnÇØÇ.ÇØÇ ÇØÇAÇØÇTÇØÇWÇØÇ ÇØÇ:ÇØÇ ÇØÇ~ÇØÇ~ÇØÇ ÇØÇ_ÇØÇ ÇØÇiÇØÇ)ÇØÇ
ÇØÇLÇØÇ2ÇØÇ1ÇØÇ9ÇØÇ ÇØÇ2ÇØÇiÇØÇ4ÇØÇlÇØÇSÇØÇiÇØÇeÇØÇvÇØÇsÇØÇ,ÇØÇ.ÇØÇ ÇØÇ7ÇØÇ6ÇØÇ ÇØÇGÇØÇoÇØÇeÇØÇrÇØÇ ÇØÇeÇØÇTÇØÇ ÇØÇrÇØÇyÇØÇoÇØÇsÇØÇ ÇØÇfÇØÇeÇØÇ ÇØÇAÇØÇTÇØÇwÇØÇ ÇØÇ-ÇØÇ ÇØÇwÇØÇwÇØÇ.ÇØÇ ÇØÇcÇØÇoÇØÇ
ÇØÇeÇØÇ ÇØÇ2ÇØÇ@ÇØÇeÇØÇ)ÇØÇ ÇØÇ2ÇØÇ1ÇØÇ4ÇØÇ5ÇØÇ7ÇØÇ0ÇØÇ4ÇØÇ ÇØÇSÇØÇOÇØÇPÇØÇ.ÇØÇ ÇØÇ7ÇØÇ ÇØÇWÇØÇeÇØÇ ÇØÇ4ÇØÇmÇØÇ ÇØÇmÇØÇuÇØÇtÇØÇeÇØÇ ÇØÇ1ÇØÇ ÇØÇrÇØÇvÇØÇ ÇØÇ4ÇØÇ.ÇØÇ ÇØÇOÇØÇOÇØÇ ÇØÇ4ÇØÇ ÇØÇeÇØÇ
ÇØÇ.ÇØÇ-ÇØÇ ÇØÇ=ÇØÇ ÇØÇ«ÇØÇ
ÇØÇoÇØÇvÇØÇrÇØÇ ÇØÇ4ÇØÇ5ÇØÇ8ÇØÇ ÇØÇOÇØÇOÇØÇRÇØÇsÇØÇ,ÇØÇ ÇØÇMÇØÇIÇØÇUÇØÇRÇØÇAÇØÇ ÇØÇSÇØÇyÇØÇ)ÇØÇ.ÇØÇ ÇØÇmÇØÇeÇØÇ ÇØÇAÇØÇrÇØÇTÇØÇ ÇØÇ1ÇØÇ ÇØÇfÇØÇyÇØÇ ÇØÇ3ÇØÇ.ÇØÇcÇØÇ8ÇØÇ ÇØÇiÇØÇ ÇØÇ4ÇØÇ5ÇØÇ.ÇØÇ2ÇØÇ
ÇØÇpÇØÇdÇØÇ ÇØÇoÇØÇrÇØÇ ÇØÇ'ÇØÇ ÇØÇ—ÇØÇ
ÇØÇ°ÇØÇ ÇØÇBÇØÇeÇØÇsÇØÇtÇØÇ ÇØÇ2ÇØÇiÇØÇlÇØÇeÇØÇsÇØÇwÇØÇeÇØÇ7ÇØÇTÇØÇsÇØÇeÇØÇsÇØÇsÇØÇ ÇØÇWÇØÇrÇØÇoÇØÇmÇØÇsÇØÇ ÇØÇ1ÇØÇ ÇØÇ¥ÇØÇ ÇØÇ7ÇØÇ9ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ9ÇØÇ ÇØÇ1ÇØÇ ÇØÇ7ÇØÇ5ÇØÇ.ÇØÇ2ÇØÇ3ÇØÇ ÇØÇ¢ÇØÇ
ÇØÇOÇØÇ.ÇØÇ4ÇØÇ%ÇØÇ%ÇØÇ ÇØÇ2ÇØÇ ÇØÇlÇØÇoÇØÇoÇØÇsÇØÇeÇØÇ ÇØÇiÇØÇ ÇØÇ.ÇØÇ ÇØÇ.ÇØÇ ÇØÇ3ÇØÇ7ÇØÇ ÇØÇ.ÇØÇ@ÇØÇ ÇØÇiÇØÇ ÇØÇiÇØÇ8ÇØÇ.ÇØÇ2ÇØÇ3ÇØÇ
ÇØÇrÇØÇaÇØÇ)ÇØÇ ÇØÇ4ÇØÇ.ÇØÇ3ÇØÇ8ÇØÇ:ÇØÇ ÇØÇ2ÇØÇ1ÇØÇ3ÇØÇ1ÇØÇ3ÇØÇ5ÇØÇ0ÇØÇ1ÇØÇ7ÇØÇ5ÇØÇ2ÇØÇ5ÇØÇ1ÇØÇ ÇØÇsÇØÇhÇØÇeÇØÇeÇØÇtÇØÇ ÇØÇMÇØÇeÇØÇtÇØÇ ÇØÇiÇØÇ)ÇØÇ ÇØÇ7ÇØÇ ÇØÇ4ÇØÇ0ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ ÇØÇ1ÇØÇ7ÇØÇ4ÇØÇ.ÇØÇ2ÇØÇ5ÇØÇ ÇØÇ¢ÇØÇCÇØÇ
ÇØÇDÇØÇLÇØÇ ÇØÇ2ÇØÇiÇØÇlÇØÇeÇØÇ7ÇØÇTÇØÇeÇØÇOÇØÇlÇØÇeÇØÇcÇØÇeÇØÇeÇØÇeÇØÇ ÇØÇWÇØÇNÇØÇ ÇØÇ1ÇØÇ ÇØÇ'ÇØÇ ÇØÇ9ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ ÇØÇ|ÇØÇ ÇØÇ1ÇØÇ8ÇØÇ6ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ
ÇØÇ@ÇØÇ ÇØÇ|ÇØÇ ÇØÇtÇØÇeÇØÇ ÇØÇ2ÇØÇ0ÇØÇ7ÇØÇ0ÇØÇ1ÇØÇ1ÇØÇ2ÇØÇ8ÇØÇ2ÇØÇ ÇØÇrÇØÇaÇØÇhÇØÇ ÇØÇnÇØÇmÇØÇ ÇØÇiÇØÇnÇØÇ ÇØÇ2ÇØÇ9ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ ÇØÇ1ÇØÇ ÇØÇMÇØÇzÇØÇsÇØÇeÇØÇ ÇØÇ8ÇØÇ ÇØÇ¢ÇØÇ
ÇØÇhÇØÇeÇØÇlÇØÇ
ÇØÇPÇØÇeÇØÇ ÇØÇLÇØÇlÇØÇ ÇØÇ2ÇØÇLÇØÇIÇØÇ@ÇØÇMÇØÇOÇØÇIÇØÇIÇØÇ ÇØÇWÇØÇaÇØÇrÇØÇiÇØÇ ÇØÇ.ÇØÇ*ÇØÇ ÇØÇtÇØÇnÇØÇ ÇØÇaÇØÇ7ÇØÇ.ÇØÇ ÇØÇ|ÇØÇ ÇØÇ1ÇØÇ2ÇØÇ ÇØÇ.ÇØÇ@ÇØÇoÇØÇ
ÇØÇiÇØÇ)ÇØÇ ÇØÇsÇØÇ ÇØÇnÇØÇeÇØÇeÇØÇ ÇØÇ4ÇØÇdÇØÇ)ÇØÇ ÇØÇWÇØÇEÇØÇSÇØÇ ÇØÇaÇØÇpÇØÇcÇØÇ)ÇØÇ ÇØÇUÇØÇoÇØÇrÇØÇuÇØÇ ÇØÇaÇØÇrÇØÇnÇØÇ ÇØÇ”ÇØÇ ÇØÇaÇØÇ ÇØÇ2ÇØÇ ÇØÇ1ÇØÇ2ÇØÇ9ÇØÇ.ÇØÇ@ÇØÇ0ÇØÇ ÇØÇ4ÇØÇ
ÇØÇDÇØÇEÇØÇ,ÇØÇ ÇØÇMÇØÇBÇØÇBÇØÇSÇØÇ ÇØÇTÇØÇIÇØÇOÇØÇOÇØÇIÇØÇSÇØÇEÇØÇ?ÇØÇ ÇØÇAÇØÇCÇØÇFÇØÇEÇØÇ!ÇØÇ ÇØÇOÇØÇrÇØÇ ÇØÇOÇØÇEÇØÇMÇØÇ ÇØÇIÇØÇDÇØÇ ÇØÇoÇØÇeÇØÇsÇØÇ ÇØÇ9ÇØÇ ÇØÇvÇØÇwÇØÇ.ÇØÇ ÇØÇ5ÇØÇ.ÇØÇ0ÇØÇ9ÇØÇ ÇØÇ2ÇØÇ ÇØÇ1ÇØÇ2ÇØÇ.ÇØÇ2ÇØÇ0ÇØÇ ÇØÇSÇØÇ
ÇØÇ'ÇØÇ ÇØÇPÇØÇoÇØÇ ÇØÇ.ÇØÇ ÇØÇ.ÇØÇ ÇØÇ.ÇØÇ
ÇØÇ:ÇØÇ ÇØÇ7ÇØÇ1ÇØÇ9ÇØÇ1ÇØÇ1ÇØÇ ÇØÇ7ÇØÇSÇØÇSÇØÇOÇØÇSÇØÇ ÇØÇTÇØÇhÇØÇoÇØÇmÇØÇeÇØÇ.ÇØÇ ÇØÇ1ÇØÇ ÇØÇiÇØÇrÇØÇ ÇØÇ1ÇØÇsÇØÇ ÇØÇoÇØÇoÇØÇ ÇØÇ|ÇØÇ ÇØÇ1ÇØÇ7ÇØÇ5ÇØÇ.ÇØÇ%ÇØÇ
ÇØÇ¥ÇØÇ ÇØÇ-ÇØÇ ÇØÇ1ÇØÇ9ÇØÇ)ÇØÇ ÇØÇ<ÇØÇ
ÇØÇGÇØÇOÇØÇ ÇØÇAÇØÇeÇØÇ ÇØÇcÇØÇwÇØÇaÇØÇpÇØÇhÇØÇaÇØÇwÇØÇyÇØÇ:ÇØÇ ÇØÇ1ÇØÇ)ÇØÇ.ÇØÇ ÇØÇvÇØÇeÇØÇ ÇØÇ’ÇØÇ ÇØÇ1ÇØÇ7ÇØÇ2ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ ÇØÇ|ÇØÇ ÇØÇ1ÇØÇ2ÇØÇ6ÇØÇ.ÇØÇ0ÇØÇ
ÇØÇ*ÇØÇ ÇØÇoÇØÇ
ÇØÇMÇØÇeÇØÇeÇØÇeÇØÇ ÇØÇfÇØÇrÇØÇeÇØÇ ÇØÇeÇØÇsÇØÇcÇØÇ ÇØÇoÇØÇnÇØÇ ÇØÇ;ÇØÇ ÇØÇ1ÇØÇ ÇØÇwÇØÇuÇØÇ ÇØÇ9ÇØÇ9ÇØÇ.ÇØÇ@ÇØÇ0ÇØÇ ÇØÇ|ÇØÇ ÇØÇ7ÇØÇ.ÇØÇcÇØÇeÇØÇ ÇØÇ‘ÇØÇ
ÇØÇ>ÇØÇ
ÇØÇsÇØÇtÇØÇeÇØÇhÇØÇtÇØÇ ÇØÇPÇØÇeÇØÇrÇØÇnÇØÇtÇØÇ ÇØÇiÇØÇcÇØÇ-ÇØÇ2ÇØÇ5ÇØÇ ÇØÇwÇØÇhÇØÇyÇØÇ.ÇØÇ ÇØÇ(ÇØÇ>ÇØÇ ÇØÇ7ÇØÇ ÇØÇ2ÇØÇ5ÇØÇ.ÇØÇ2ÇØÇ ÇØÇ1ÇØÇ ÇØÇ3ÇØÇ1ÇØÇ7ÇØÇ.ÇØÇ5ÇØÇ0ÇØÇ
ÇØÇ¢ÇØÇ ÇØÇ7ÇØÇ3ÇØÇ2ÇØÇ ÇØÇoÇØÇwÇØÇnÇØÇ ÇØÇSÇØÇaÇØÇnÇØÇ.ÇØÇ ÇØÇ(ÇØÇeÇØÇeÇØÇ ÇØÇiÇØÇ.ÇØÇ ÇØÇ4ÇØÇ2ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ ÇØÇ2ÇØÇ ÇØÇeÇØÇaÇØÇ.ÇØÇ ÇØÇ‘ÇØÇ
ÇØÇ7ÇØÇ ÇØÇ-ÇØÇ ÇØÇ-ÇØÇ
ÇØÇaÇØÇ ÇØÇeÇØÇaÇØÇeÇØÇ ÇØÇBÇØÇeÇØÇgÇØÇ.ÇØÇ ÇØÇHÇØÇaÇØÇ ÇØÇeÇØÇwÇØÇeÇØÇ ÇØÇvÇØÇeÇØÇrÇØÇeÇØÇ ÇØÇpÇØÇeÇØÇcÇØÇsÇØÇ ÇØÇlÇØÇwÇØÇ ÇØÇ7ÇØÇ5ÇØÇ.ÇØÇ@ÇØÇ ÇØÇ2ÇØÇ ÇØÇmÇØÇoÇØÇsÇØÇ
ÇØÇtÇØÇeÇØÇ.ÇØÇ ÇØÇ-ÇØÇ ÇØÇ-ÇØÇ ÇØÇ‘ÇØÇ
ÇØÇ<ÇØÇ1ÇØÇ ÇØÇ=ÇØÇ ÇØÇPÇØÇ
ÇØÇ.ÇØÇ ÇØÇTÇØÇwÇØÇiÇØÇ ÇØÇaÇØÇ
ÇØÇeÇØÇeÇØÇrÇØÇ ÇØÇoÇØÇ ÇØÇ:ÇØÇ ÇØÇ‘ÇØÇ
ÇØÇbÇØÇsÇØÇ
ÇØÇ:ÇØÇ ÇØÇeÇØÇeÇØÇ
ÇØÇ.ÇØÇ ÇØÇéÇØÇ ÇØÇaÇØÇeÇØÇ.ÇØÇ ÇØÇaÇØÇiÇØÇ

 
2Ç
ÇiÇsÇ ÇsÇcÇeÇ ÇSÇHÇ ÇwÇaÇeÇeÇnÇtÇ)Ç ÇoÇnÇeÇ Ç"Ç
ÇvÇiÇnÇ ÇFÇHÇ ÇWÇoÇrÇ Ç7Ç7Ç7Ç)Ç ÇGÇiÇnÇaÇ ÇGÇmÇnÇwÇyÇ Ç:Ç
ÇgÇeÇiÇiÇnÇeÇwÇ ÇrÇyÇ ÇPÇhÇ ÇOÇTÇ ÇeÇeÇ ÇDÇeÇnÇeÇ,Ç ÇmÇeÇnÇeÇ Ç7Ç
Ç‘Ç Ç;Ç Ç7Ç Ç;Ç
ÇcÇuÇlÇtÇiÇeÇsÇ ÇwÇeÇ ÇHÇFÇ ÇeÇrÇiÇnÇ ÇhÇeÇtÇuÇtÇuÇmÇ ÇnÇeÇiÇiÇdÇ Ç‘Ç
ÇoÇrÇpÇ ÇeÇrÇeÇ Ç-Ç
Ç~Ç Ç©Ç ÇPÇeÇtÇ ÇhÇuÇeÇ ÇnÇaÇnÇ ÇoÇnÇeÇ Ç—Ç
ÇrÇaÇ ÇeÇaÇeÇ Ç.Ç
ÇtÇoÇnÇsÇ ÇaÇTÇ
Ç©Ç Ç«Ç ÇwÇrÇ ÇPÇaÇlÇsÇ Ç©Ç
ÇoÇnÇ Ç:Ç ÇaÇrÇtÇeÇ ÇaÇeÇfÇuÇiÇeÇ
ÇfÇrÇsÇvÇeÇuÇsÇ ÇaÇnÇtÇ
ÇsÇrÇoÇ ÇaÇ*Ç ÇaÇdÇ ÇoÇ
ÇEÇEÇ ÇiÇeÇ ÇaÇ
ÇaÇpÇnÇiÇeÇ Ç-Ç ÇSÇAÇGÇAÇSÇ ÇsÇiÇdÇlÇiÇaÇtÇaÇaÇdÇeÇsÇaÇiÇaÇeÇaÇnÇeÇnÇsÇiÇlÇiÇeÇaÇiÇaÇsÇ ÇtÇoÇnÇsÇ ÇeÇtÇ ÇrÇeÇ ÇhÇeÇ ÇaÇgÇaÇtÇeÇ
Ç©Ç Ç-Ç Ç_Ç ÇeÇ
ÇsÇuÇaÇ ÇtÇ Ç-Ç
Ç€Ç ÇaÇ Ç¥Ç ÇaÇ?Ç Ç.Ç Ç-Ç ÇwÇaÇ Ç-Ç Ç'Ç Ç°Ç
Ç5Ç.ÇeÇ@Ç Ç“ÇAÇsÇ ÇcÇ Ç.Ç Ç‘Ç?Ç@Ç ÇcÇeÇ ÇhÇtÇsÇ
ÇeÇ Ç,Ç ÇmÇaÇoÇ ÇsÇeÇeÇsÇ?Ç ÇMÇaÇrÇeÇ ÇeÇsÇtÇoÇyÇ Ç1Ç.Ç Ç;Ç Ç3Ç0Ç.Ç ÇaÇoÇ ÇnÇyÇ
Ç:Ç Ç>Ç.Ç«Ç Ç?Ç_Ç-Ç
ÇaÇ ÇbÇeÇ,Ç ÇSÇOÇ ÇaÇ”Ç ÇmÇeÇrÇ Ç'Ç ÇrÇeÇ Ç7Ç?Ç)Ç Ç’Ç Ç‘Ç Ç'Ç
Ç Ç)Ç Ç.ÇoÇ5Ç ÇsÇeÇeÇsÇoÇoÇeÇrÇtÇsÇeÇ ÇcÇoÇvÇeÇtÇ ÇmÇnÇ.Ç ÇAÇTÇWÇ Ç:Ç Ç~Ç~Ç Ç_Ç ÇiÇ)Ç
ÇLÇ2Ç1Ç9Ç Ç2ÇiÇ4ÇlÇSÇiÇeÇvÇsÇ,Ç.Ç Ç7Ç6Ç ÇGÇoÇeÇrÇ ÇeÇTÇ ÇrÇyÇoÇsÇ ÇfÇeÇ ÇAÇTÇwÇ Ç-Ç ÇwÇwÇ.Ç ÇcÇoÇ
ÇeÇ Ç2Ç@ÇeÇ)Ç Ç2Ç1Ç4Ç5Ç7Ç0Ç4Ç ÇSÇOÇPÇ.Ç Ç7Ç ÇWÇeÇ Ç4ÇmÇ ÇmÇuÇtÇeÇ Ç1Ç ÇrÇvÇ Ç4Ç.Ç ÇOÇOÇ Ç4Ç ÇeÇ
Ç.Ç-Ç Ç=Ç Ç«Ç
ÇoÇvÇrÇ Ç4Ç5Ç8Ç ÇOÇOÇRÇsÇ,Ç ÇMÇIÇUÇRÇAÇ ÇSÇyÇ)Ç.Ç ÇmÇeÇ ÇAÇrÇTÇ Ç1Ç ÇfÇyÇ Ç3Ç.ÇcÇ8Ç ÇiÇ Ç4Ç5Ç.Ç2Ç
ÇpÇdÇ ÇoÇrÇ Ç'Ç Ç—Ç
Ç°Ç ÇBÇeÇsÇtÇ Ç2ÇiÇlÇeÇsÇwÇeÇ7ÇTÇsÇeÇsÇsÇ ÇWÇrÇoÇmÇsÇ Ç1Ç Ç¥Ç Ç7Ç9Ç.Ç0Ç0Ç9Ç Ç1Ç Ç7Ç5Ç.Ç2Ç3Ç Ç¢Ç
ÇOÇ.Ç4Ç%Ç%Ç Ç2Ç ÇlÇoÇoÇsÇeÇ ÇiÇ Ç.Ç Ç.Ç Ç3Ç7Ç Ç.Ç@Ç ÇiÇ ÇiÇ8Ç.Ç2Ç3Ç
ÇrÇaÇ)Ç Ç4Ç.Ç3Ç8Ç:Ç Ç2Ç1Ç3Ç1Ç3Ç5Ç0Ç1Ç7Ç5Ç2Ç5Ç1Ç ÇsÇhÇeÇeÇtÇ ÇMÇeÇtÇ ÇiÇ)Ç Ç7Ç Ç4Ç0Ç.Ç0Ç0Ç Ç1Ç7Ç4Ç.Ç2Ç5Ç Ç¢ÇCÇ
ÇDÇLÇ Ç2ÇiÇlÇeÇ7ÇTÇeÇOÇlÇeÇcÇeÇeÇeÇ ÇWÇNÇ Ç1Ç Ç'Ç Ç9Ç.Ç0Ç0Ç Ç|Ç Ç1Ç8Ç6Ç.Ç0Ç0Ç
Ç@Ç Ç|Ç ÇtÇeÇ Ç2Ç0Ç7Ç0Ç1Ç1Ç2Ç8Ç2Ç ÇrÇaÇhÇ ÇnÇmÇ ÇiÇnÇ Ç2Ç9Ç.Ç0Ç0Ç Ç1Ç ÇMÇzÇsÇeÇ Ç8Ç Ç¢Ç
ÇhÇeÇlÇ
ÇPÇeÇ ÇLÇlÇ Ç2ÇLÇIÇ@ÇMÇOÇIÇIÇ ÇWÇaÇrÇiÇ Ç.Ç*Ç ÇtÇnÇ ÇaÇ7Ç.Ç Ç|Ç Ç1Ç2Ç Ç.Ç@ÇoÇ
ÇiÇ)Ç ÇsÇ ÇnÇeÇeÇ Ç4ÇdÇ)Ç ÇWÇEÇSÇ ÇaÇpÇcÇ)Ç ÇUÇoÇrÇuÇ ÇaÇrÇnÇ Ç”Ç ÇaÇ Ç2Ç Ç1Ç2Ç9Ç.Ç@Ç0Ç Ç4Ç
ÇDÇEÇ,Ç ÇMÇBÇBÇSÇ ÇTÇIÇOÇOÇIÇSÇEÇ?Ç ÇAÇCÇFÇEÇ!Ç ÇOÇrÇ ÇOÇEÇMÇ ÇIÇDÇ ÇoÇeÇsÇ Ç9Ç ÇvÇwÇ.Ç Ç5Ç.Ç0Ç9Ç Ç2Ç Ç1Ç2Ç.Ç2Ç0Ç ÇSÇ
Ç'Ç ÇPÇoÇ Ç.Ç Ç.Ç Ç.Ç
Ç:Ç Ç7Ç1Ç9Ç1Ç1Ç Ç7ÇSÇSÇOÇSÇ ÇTÇhÇoÇmÇeÇ.Ç Ç1Ç ÇiÇrÇ Ç1ÇsÇ ÇoÇoÇ Ç|Ç Ç1Ç7Ç5Ç.Ç%Ç
Ç¥Ç Ç-Ç Ç1Ç9Ç)Ç Ç<Ç
ÇGÇOÇ ÇAÇeÇ ÇcÇwÇaÇpÇhÇaÇwÇyÇ:Ç Ç1Ç)Ç.Ç ÇvÇeÇ Ç’Ç Ç1Ç7Ç2Ç.Ç0Ç0Ç Ç|Ç Ç1Ç2Ç6Ç.Ç0Ç
Ç*Ç ÇoÇ
ÇMÇeÇeÇeÇ ÇfÇrÇeÇ ÇeÇsÇcÇ ÇoÇnÇ Ç;Ç Ç1Ç ÇwÇuÇ Ç9Ç9Ç.Ç@Ç0Ç Ç|Ç Ç7Ç.ÇcÇeÇ Ç‘Ç
Ç>Ç
ÇsÇtÇeÇhÇtÇ ÇPÇeÇrÇnÇtÇ ÇiÇcÇ-Ç2Ç5Ç ÇwÇhÇyÇ.Ç Ç(Ç>Ç Ç7Ç Ç2Ç5Ç.Ç2Ç Ç1Ç Ç3Ç1Ç7Ç.Ç5Ç0Ç
Ç¢Ç Ç7Ç3Ç2Ç ÇoÇwÇnÇ ÇSÇaÇnÇ.Ç Ç(ÇeÇeÇ ÇiÇ.Ç Ç4Ç2Ç.Ç0Ç0Ç Ç2Ç ÇeÇaÇ.Ç Ç‘Ç
Ç7Ç Ç-Ç Ç-Ç
ÇaÇ ÇeÇaÇeÇ ÇBÇeÇgÇ.Ç ÇHÇaÇ ÇeÇwÇeÇ ÇvÇeÇrÇeÇ ÇpÇeÇcÇsÇ ÇlÇwÇ Ç7Ç5Ç.Ç@Ç Ç2Ç ÇmÇoÇsÇ
ÇtÇeÇ.Ç Ç-Ç Ç-Ç Ç‘Ç
Ç<Ç1Ç Ç=Ç ÇPÇ
Ç.Ç ÇTÇwÇiÇ ÇaÇ
ÇeÇeÇrÇ ÇoÇ Ç:Ç Ç‘Ç
ÇbÇsÇ
Ç:Ç ÇeÇeÇ
Ç.Ç ÇéÇ ÇaÇeÇ.Ç ÇaÇiÇ
 
10000»*
od
¢g =
ae CAPE ———
JOJO
corre
~ —— e ——
y rere noe
e a '
¥ " .
tel Y > eee eS
Long Island Iced Tea 120 Ice Latte 100
Ginger Ale 120 Ice Americano 100
ee ——
Merry Christmas 120 Ice Cappuchino 100
La Vie En Rose 120 Ice Caramel Macchiato 120
hn
Strawberry Margarita 120 Black Orange / Yuzu 120
LD
Ry] Hot Coffee with Milk 80
c d : , - ee
Espresso 60
r ——
4 Coldbrew Thai Specialty 190 ALL KINOS
Espresso On The Rock 400
_ _——L_ ————_—_—_—
ee .
DESSER — Honey a's
’ —_—<——— 1.200 —_——————
‘4 SE _ Aa » a ry 5
“i _— i ar Dont Wor: Be Coffee 2C ee
ij u Fone} a a —— ail
| . ah a % '
a
»Ç*Ç
ÇoÇdÇ
Ç¢ÇgÇ Ç=Ç
ÇaÇeÇ ÇCÇAÇPÇEÇ Ç—Ç—Ç—Ç
ÇJÇOÇJÇOÇ
ÇcÇoÇrÇrÇeÇ
Ç~Ç Ç—Ç—Ç ÇeÇ Ç—Ç—Ç
ÇyÇ ÇrÇeÇrÇeÇ ÇnÇoÇeÇ
ÇeÇ ÇaÇ Ç'Ç
Ç¥Ç Ç"Ç Ç.Ç
ÇtÇeÇlÇ ÇYÇ Ç>Ç ÇeÇeÇeÇ ÇeÇSÇ
ÇLÇoÇnÇgÇ ÇIÇsÇlÇaÇnÇdÇ ÇIÇcÇeÇdÇ ÇTÇeÇaÇ Ç1Ç2Ç0Ç ÇIÇcÇeÇ ÇLÇaÇtÇtÇeÇ Ç1Ç0Ç0Ç
ÇGÇiÇnÇgÇeÇrÇ ÇAÇlÇeÇ Ç1Ç2Ç0Ç ÇIÇcÇeÇ ÇAÇmÇeÇrÇiÇcÇaÇnÇoÇ Ç1Ç0Ç0Ç
ÇeÇeÇ Ç—Ç—Ç
ÇMÇeÇrÇrÇyÇ ÇCÇhÇrÇiÇsÇtÇmÇaÇsÇ Ç1Ç2Ç0Ç ÇIÇcÇeÇ ÇCÇaÇpÇpÇuÇcÇhÇiÇnÇoÇ Ç1Ç0Ç0Ç
ÇLÇaÇ ÇVÇiÇeÇ ÇEÇnÇ ÇRÇoÇsÇeÇ Ç1Ç2Ç0Ç ÇIÇcÇeÇ ÇCÇaÇrÇaÇmÇeÇlÇ ÇMÇaÇcÇcÇhÇiÇaÇtÇoÇ Ç1Ç2Ç0Ç
ÇhÇnÇ
ÇSÇtÇrÇaÇwÇbÇeÇrÇrÇyÇ ÇMÇaÇrÇgÇaÇrÇiÇtÇaÇ Ç1Ç2Ç0Ç ÇBÇlÇaÇcÇkÇ ÇOÇrÇaÇnÇgÇeÇ Ç/Ç ÇYÇuÇzÇuÇ Ç1Ç2Ç0Ç
ÇLÇDÇ
ÇRÇyÇ]Ç ÇHÇoÇtÇ ÇCÇoÇfÇfÇeÇeÇ ÇwÇiÇtÇhÇ ÇMÇiÇlÇkÇ Ç8Ç0Ç
ÇcÇ ÇdÇ Ç:Ç Ç,Ç Ç-Ç ÇeÇeÇ
ÇEÇsÇpÇrÇeÇsÇsÇoÇ Ç6Ç0Ç
ÇrÇ Ç—Ç—Ç
Ç4Ç ÇCÇoÇlÇdÇbÇrÇeÇwÇ ÇTÇhÇaÇiÇ ÇSÇpÇeÇcÇiÇaÇlÇtÇyÇ Ç1Ç9Ç0Ç ÇAÇLÇLÇ ÇKÇIÇNÇOÇSÇ
ÇEÇsÇpÇrÇeÇsÇsÇoÇ ÇOÇnÇ ÇTÇhÇeÇ ÇRÇoÇcÇkÇ Ç4Ç0Ç0Ç
Ç_Ç Ç_Ç—Ç—ÇLÇ_Ç Ç—Ç—Ç—Ç—Ç_Ç—Ç_Ç—Ç_Ç—Ç
ÇeÇeÇ Ç.Ç
ÇDÇEÇSÇSÇEÇRÇ Ç—Ç ÇHÇoÇnÇeÇyÇ ÇaÇ'ÇsÇ
Ç’Ç Ç—Ç_Ç—Ç<Ç—Ç—Ç—Ç Ç1Ç.Ç2Ç0Ç0Ç Ç—Ç_Ç—Ç—Ç—Ç—Ç—Ç—Ç
Ç‘Ç4Ç ÇSÇEÇ Ç_Ç ÇAÇaÇ Ç»Ç ÇaÇ ÇrÇyÇ Ç5Ç
Ç“ÇiÇ Ç_Ç—Ç ÇiÇ ÇaÇrÇ ÇDÇoÇnÇtÇ ÇWÇoÇrÇ:Ç ÇBÇeÇ ÇCÇoÇfÇfÇeÇeÇ Ç2ÇCÇ ÇeÇeÇ
ÇiÇjÇ ÇuÇ ÇFÇoÇnÇeÇ}Ç ÇaÇ ÇaÇ Ç—Ç—Ç ÇaÇiÇlÇ
Ç|Ç Ç.Ç ÇaÇhÇ ÇaÇ Ç%Ç Ç'Ç
ÇaÇ
2Ç
ÇiÇsÇ ÇsÇcÇeÇ ÇSÇHÇ ÇwÇaÇeÇeÇnÇtÇ)Ç ÇoÇnÇeÇ Ç"Ç
ÇvÇiÇnÇ ÇFÇHÇ ÇWÇoÇrÇ Ç7Ç7Ç7Ç)Ç ÇGÇiÇnÇaÇ ÇGÇmÇnÇwÇyÇ Ç:Ç
ÇgÇeÇiÇiÇnÇeÇwÇ ÇrÇyÇ ÇPÇhÇ ÇOÇTÇ ÇeÇeÇ ÇDÇeÇnÇeÇ,Ç ÇmÇeÇnÇeÇ Ç7Ç
Ç‘Ç Ç;Ç Ç7Ç Ç;Ç
ÇcÇuÇlÇtÇiÇeÇsÇ ÇwÇeÇ ÇHÇFÇ ÇeÇrÇiÇnÇ ÇhÇeÇtÇuÇtÇuÇmÇ ÇnÇeÇiÇiÇdÇ Ç‘Ç
ÇoÇrÇpÇ ÇeÇrÇeÇ Ç-Ç
Ç~Ç Ç©Ç ÇPÇeÇtÇ ÇhÇuÇeÇ ÇnÇaÇnÇ ÇoÇnÇeÇ Ç—Ç
ÇrÇaÇ ÇeÇaÇeÇ Ç.Ç
ÇtÇoÇnÇsÇ ÇaÇTÇ
Ç©Ç Ç«Ç ÇwÇrÇ ÇPÇaÇlÇsÇ Ç©Ç
ÇoÇnÇ Ç:Ç ÇaÇrÇtÇeÇ ÇaÇeÇfÇuÇiÇeÇ
ÇfÇrÇsÇvÇeÇuÇsÇ ÇaÇnÇtÇ
ÇsÇrÇoÇ ÇaÇ*Ç ÇaÇdÇ ÇoÇ
ÇEÇEÇ ÇiÇeÇ ÇaÇ
ÇaÇpÇnÇiÇeÇ Ç-Ç ÇSÇAÇGÇAÇSÇ ÇsÇiÇdÇlÇiÇaÇtÇaÇaÇdÇeÇsÇaÇiÇaÇeÇaÇnÇeÇnÇsÇiÇlÇiÇeÇaÇiÇaÇsÇ ÇtÇoÇnÇsÇ ÇeÇtÇ ÇrÇeÇ ÇhÇeÇ ÇaÇgÇaÇtÇeÇ
Ç©Ç Ç-Ç Ç_Ç ÇeÇ
ÇsÇuÇaÇ ÇtÇ Ç-Ç
Ç€Ç ÇaÇ Ç¥Ç ÇaÇ?Ç Ç.Ç Ç-Ç ÇwÇaÇ Ç-Ç Ç'Ç Ç°Ç
Ç5Ç.ÇeÇ@Ç Ç“ÇAÇsÇ ÇcÇ Ç.Ç Ç‘Ç?Ç@Ç ÇcÇeÇ ÇhÇtÇsÇ
ÇeÇ Ç,Ç ÇmÇaÇoÇ ÇsÇeÇeÇsÇ?Ç ÇMÇaÇrÇeÇ ÇeÇsÇtÇoÇyÇ Ç1Ç.Ç Ç;Ç Ç3Ç0Ç.Ç ÇaÇoÇ ÇnÇyÇ
Ç:Ç Ç>Ç.Ç«Ç Ç?Ç_Ç-Ç
ÇaÇ ÇbÇeÇ,Ç ÇSÇOÇ ÇaÇ”Ç ÇmÇeÇrÇ Ç'Ç ÇrÇeÇ Ç7Ç?Ç)Ç Ç’Ç Ç‘Ç Ç'Ç
Ç Ç)Ç Ç.ÇoÇ5Ç ÇsÇeÇeÇsÇoÇoÇeÇrÇtÇsÇeÇ ÇcÇoÇvÇeÇtÇ ÇmÇnÇ.Ç ÇAÇTÇWÇ Ç:Ç Ç~Ç~Ç Ç_Ç ÇiÇ)Ç
ÇLÇ2Ç1Ç9Ç Ç2ÇiÇ4ÇlÇSÇiÇeÇvÇsÇ,Ç.Ç Ç7Ç6Ç ÇGÇoÇeÇrÇ ÇeÇTÇ ÇrÇyÇoÇsÇ ÇfÇeÇ ÇAÇTÇwÇ Ç-Ç ÇwÇwÇ.Ç ÇcÇoÇ
ÇeÇ Ç2Ç@ÇeÇ)Ç Ç2Ç1Ç4Ç5Ç7Ç0Ç4Ç ÇSÇOÇPÇ.Ç Ç7Ç ÇWÇeÇ Ç4ÇmÇ ÇmÇuÇtÇeÇ Ç1Ç ÇrÇvÇ Ç4Ç.Ç ÇOÇOÇ Ç4Ç ÇeÇ
Ç.Ç-Ç Ç=Ç Ç«Ç
ÇoÇvÇrÇ Ç4Ç5Ç8Ç ÇOÇOÇRÇsÇ,Ç ÇMÇIÇUÇRÇAÇ ÇSÇyÇ)Ç.Ç ÇmÇeÇ ÇAÇrÇTÇ Ç1Ç ÇfÇyÇ Ç3Ç.ÇcÇ8Ç ÇiÇ Ç4Ç5Ç.Ç2Ç
ÇpÇdÇ ÇoÇrÇ Ç'Ç Ç—Ç
Ç°Ç ÇBÇeÇsÇtÇ Ç2ÇiÇlÇeÇsÇwÇeÇ7ÇTÇsÇeÇsÇsÇ ÇWÇrÇoÇmÇsÇ Ç1Ç Ç¥Ç Ç7Ç9Ç.Ç0Ç0Ç9Ç Ç1Ç Ç7Ç5Ç.Ç2Ç3Ç Ç¢Ç
ÇOÇ.Ç4Ç%Ç%Ç Ç2Ç ÇlÇoÇoÇsÇeÇ ÇiÇ Ç.Ç Ç.Ç Ç3Ç7Ç Ç.Ç@Ç ÇiÇ ÇiÇ8Ç.Ç2Ç3Ç
ÇrÇaÇ)Ç Ç4Ç.Ç3Ç8Ç:Ç Ç2Ç1Ç3Ç1Ç3Ç5Ç0Ç1Ç7Ç5Ç2Ç5Ç1Ç ÇsÇhÇeÇeÇtÇ ÇMÇeÇtÇ ÇiÇ)Ç Ç7Ç Ç4Ç0Ç.Ç0Ç0Ç Ç1Ç7Ç4Ç.Ç2Ç5Ç Ç¢ÇCÇ
ÇDÇLÇ Ç2ÇiÇlÇeÇ7ÇTÇeÇOÇlÇeÇcÇeÇeÇeÇ ÇWÇNÇ Ç1Ç Ç'Ç Ç9Ç.Ç0Ç0Ç Ç|Ç Ç1Ç8Ç6Ç.Ç0Ç0Ç
Ç@Ç Ç|Ç ÇtÇeÇ Ç2Ç0Ç7Ç0Ç1Ç1Ç2Ç8Ç2Ç ÇrÇaÇhÇ ÇnÇmÇ ÇiÇnÇ Ç2Ç9Ç.Ç0Ç0Ç Ç1Ç ÇMÇzÇsÇeÇ Ç8Ç Ç¢Ç
ÇhÇeÇlÇ
ÇPÇeÇ ÇLÇlÇ Ç2ÇLÇIÇ@ÇMÇOÇIÇIÇ ÇWÇaÇrÇiÇ Ç.Ç*Ç ÇtÇnÇ ÇaÇ7Ç.Ç Ç|Ç Ç1Ç2Ç Ç.Ç@ÇoÇ
ÇiÇ)Ç ÇsÇ ÇnÇeÇeÇ Ç4ÇdÇ)Ç ÇWÇEÇSÇ ÇaÇpÇcÇ)Ç ÇUÇoÇrÇuÇ ÇaÇrÇnÇ Ç”Ç ÇaÇ Ç2Ç Ç1Ç2Ç9Ç.Ç@Ç0Ç Ç4Ç
ÇDÇEÇ,Ç ÇMÇBÇBÇSÇ ÇTÇIÇOÇOÇIÇSÇEÇ?Ç ÇAÇCÇFÇEÇ!Ç ÇOÇrÇ ÇOÇEÇMÇ ÇIÇDÇ ÇoÇeÇsÇ Ç9Ç ÇvÇwÇ.Ç Ç5Ç.Ç0Ç9Ç Ç2Ç Ç1Ç2Ç.Ç2Ç0Ç ÇSÇ
Ç'Ç ÇPÇoÇ Ç.Ç Ç.Ç Ç.Ç
Ç:Ç Ç7Ç1Ç9Ç1Ç1Ç Ç7ÇSÇSÇOÇSÇ ÇTÇhÇoÇmÇeÇ.Ç Ç1Ç ÇiÇrÇ Ç1ÇsÇ ÇoÇoÇ Ç|Ç Ç1Ç7Ç5Ç.Ç%Ç
Ç¥Ç Ç-Ç Ç1Ç9Ç)Ç Ç<Ç
ÇGÇOÇ ÇAÇeÇ ÇcÇwÇaÇpÇhÇaÇwÇyÇ:Ç Ç1Ç)Ç.Ç ÇvÇeÇ Ç’Ç Ç1Ç7Ç2Ç.Ç0Ç0Ç Ç|Ç Ç1Ç2Ç6Ç.Ç0Ç
Ç*Ç ÇoÇ
ÇMÇeÇeÇeÇ ÇfÇrÇeÇ ÇeÇsÇcÇ ÇoÇnÇ Ç;Ç Ç1Ç ÇwÇuÇ Ç9Ç9Ç.Ç@Ç0Ç Ç|Ç Ç7Ç.ÇcÇeÇ Ç‘Ç
Ç>Ç
ÇsÇtÇeÇhÇtÇ ÇPÇeÇrÇnÇtÇ ÇiÇcÇ-Ç2Ç5Ç ÇwÇhÇyÇ.Ç Ç(Ç>Ç Ç7Ç Ç2Ç5Ç.Ç2Ç Ç1Ç Ç3Ç1Ç7Ç.Ç5Ç0Ç
Ç¢Ç Ç7Ç3Ç2Ç ÇoÇwÇnÇ ÇSÇaÇnÇ.Ç Ç(ÇeÇeÇ ÇiÇ.Ç Ç4Ç2Ç.Ç0Ç0Ç Ç2Ç ÇeÇaÇ.Ç Ç‘Ç
Ç7Ç Ç-Ç Ç-Ç
ÇaÇ ÇeÇaÇeÇ ÇBÇeÇgÇ.Ç ÇHÇaÇ ÇeÇwÇeÇ ÇvÇeÇrÇeÇ ÇpÇeÇcÇsÇ ÇlÇwÇ Ç7Ç5Ç.Ç@Ç Ç2Ç ÇmÇoÇsÇ
ÇtÇeÇ.Ç Ç-Ç Ç-Ç Ç‘Ç
Ç<Ç1Ç Ç=Ç ÇPÇ
Ç.Ç ÇTÇwÇiÇ ÇaÇ
ÇeÇeÇrÇ ÇoÇ Ç:Ç Ç‘Ç
ÇbÇsÇ
Ç:Ç ÇeÇeÇ
Ç.Ç ÇéÇ ÇaÇeÇ.Ç ÇaÇiÇ

 
str
 
########################################################################################
 

########################################################################################
 
########################################################################################
 

########################################################################################
 
########################################################################################
 
#ShowMustGoOn(img) # show the image

########################################################################################
 
########################################################################################
 
########################################################################################
 
Import and 
 
path = [
    '/Users/imac/Desktop/SoloOpenSourceProject/JOCR/TestImage/Menu/IMG_7571.jpeg']
 
txt = pytesseract.image_to_string(img, lang='eng', config='--psm 6')
 
print(text)
 
# https://stackoverflow.com/questions/64723694/permission-denied-when-reading-a-image-text-in-pytesseract
 
 **
 
img=get_grayscale(img)
img = Image.fromarray(img)#https://stackoverflow.com/questions/43232813/convert-opencv-image-format-to-pil-image-format

 
ShowMustGoOn(img)
 
path = '/Users/imac/Desktop/SoloOpenSourceProject/JOCR/TestImage/Menu/IMG_7571.jpeg'
img=Image.open(path)
text=ts.image_to_string(img)
ShowMustGoOn(img)
print(text)
# https://stackoverflow.com/questions/64723694/permission-denied-when-reading-a-image-text-in-pytesseract
 
cv2.imread(
 
import tesseract
 
print(tesseract)
 
.__file__
 
#open and read the file after the appending:

#df.to_csv("test1.csv")
#print(df.to_string())
#cv2.imshow("image", img)
#cv2.waitKey(0)
#cv2.destroyAllWindows()'''
 

from tesserocr import PyTessBaseAPI
from PIL import Image

with PyTessBaseAPI(lang="tha") as api:
    #ลบช่องว่างแต่ละตัวอักษร
    api.SetVariable('preserve_interword_spaces', '1')
    
    #Path ของรูปภาพ
    api.SetImageFile("Image.jpeg")
    print(api.GetUTF8Text())
 
10000#
 
Image.open(
 

#cv2.imshow("test",img)
#cv2.waitKey(0)
#cv2.destroyAllWindows()
 
#opening - erosion followed by dilation
def opening(image):
    kernel = np.ones((5,5),np.uint8)
    return cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)
 
img = cv2.imread('/Users/imac/Desktop/SoloOpenSourceProject/JOCR/TestImage/Menu/IMG_7571.jpeg')
 
canny,get_grayscale,sharpen,erode,dilate,opening
 
opening
 
#dilation
def dilate(image):
    kernel = np.ones((5,5),np.uint8)
    return cv2.dilate(image, kernel, iterations = 1)
    # https://www.geeksforgeeks.org/erosion-dilation-images-using-opencv-python/
 
def get_grayscale(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

def sharpen(image):
    #kernel = np.array([[-1,-1,-1], [-1,10,-1], [-1,-1,-1]])
    #kernel = np.array([[0.25,0,-0.25], [0.5,0,-0.5], [0.25,0,-0.25]])
    kernel = (1/(10**2))*np.ones((10,10))
    # https://youtu.be/KuXjwB4LzSA?si=mt-leKGKjpMnJGfg
    # https://www.geeksforgeeks.org/python-opencv-filter2d-function/
    return cv2.filter2D(image, -1, kernel)
 
#dilation
def dilate(image):
    kernel = np.ones((5,5),np.uint8)
    return cv2.dilate(image, kernel, iterations = 1)
 


def sharpen(image):
    kernel = np.array([[-1,-1,-1], [-1,10,-1], [-1,-1,-1]])
    return cv2.filter2D(image, -1, kernel)
 
def get_grayscale(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
 
def canny(image):
    return cv2.Canny(image, 100, 200)

#dilation
def dilate(image):
    kernel = np.ones((5,5),np.uint8)
    return cv2.dilate(image, kernel, iterations = 1)
    
#erosion
def erode(image):
    kernel = np.ones((5,5),np.uint8)
    return cv2.erode(image, kernel, iterations = 1)

#opening - erosion followed by dilation
def opening(image):
    kernel = np.ones((5,5),np.uint8)
    return cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)

def get_grayscale(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

def sharpen(image):
    kernel = np.array([[-1,-1,-1], [-1,10,-1], [-1,-1,-1]])
    return cv2.filter2D(image, -1, kernel)
 
#img = get_grayscale(img)
 

print(pytesseract.pytesseract.tesseract_cmd)
print(type(pytesseract.pytesseract.tesseract_cmd))
 
'''
 
'''
 
'''
 
    
 

#img = get_grayscale(img)
for i in [-1,0,1,2]:
 
np.array([[1/9,1/9,1/9], [1/9,1/9,1/9], [1/9,1/9,1/9]])
 
    n=100
 
25
 
print('hello')
 
import argparse
 
from PIL import Image, ImageGrab
 

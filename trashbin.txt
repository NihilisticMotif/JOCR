'''
@app.route("/def_YSquare", method=["GET","POST"])#, strict_slashes=False)
def def_YSquare():
   if request.method == 'POST':
        input = request.form['input']
        return redirect(url_for('/'+str(int(input)**2)))
   else:
        return redirect(url_for('/0'))
'''
 
        headers: {'Content-Type': 'application/json'},
 
JSON.stringify(
 
'success',name = user
 
'success',name = user
 
        user = request.args.get('nm')
 
,strict_slashes=False)#
 
'input'
 
input:
 
        }
 
          
 
          'Accept': 'application/json',
 
            //alert(JSON.stringify(data));
 
      
 
def_Update
 
      }
 
      catch (error) {
      alert(error);
      }
 
      try{
 
let let_Response = 
 
.toString()
 
'Error:', 
 
+SS_HelloPy.toString()
 
 catch (error) {
    console.error("Error fetching data:", error);
    }
 
    var=Input
 
Input
 
    if request.method == 'POST':
 
    else:
 
      //setSS_HelloPy(SS_HelloPy)
 
            //alert(JSON.stringify(data));
 
    }
 
 catch (error) {
    console.error("Error fetching data:", error);
    }
 
SS_HelloPy
 
        return "<h1>Write Input<h1>"
 
        print(Input)
 
 // body data type must match "Content-Type" header
 
Output**2
 
{'py':
 

@app.route('/api')
def api():
    response = {'message': 'Hello, World!'}
    return jsonify(response)

 
def_OutPut
 
|string
 
name='C04id_CropImageX1'
 
parseFloat(
 
parseFloat(
 
    catch{
      alert('This is not a number!')
    }
 
import APIService from '../Components/APIService'
 
{/*<div className='C04id_EditCrop'>
      <h1>Left X</h1>
      <input id='C04id_CropImageX1'></input>
      <h1>Right X</h1>
      <input id='C04id_CropImageX2'></input>
      </div>
      <div className='C04id_EditCrop'>
      <h1>Up Y</h1>
      <input id='C04id_CropImageY1'></input>
      <h1>Down Y</h1>
      <input id='C04id_CropImageY2'></input>
      </div>
      <div className='C04id_EditCrop'>
      {JSX_Crop}
      </div>*/}
      
      {/*<button>Word</button>
      <button>Marker</button>
      <button>Line-Width</button>
      <button>Line-Color</button>
      <button>Rectangle</button>
      <button>Circle</button>
      <button>Elaser</button>
      <button>Reset</button>
*/}
 

    article = Articles(
        title=title,
        body=body
        )

    db.session.add(article)
    db.session.commit()
 
    body = request.json['body']
 
ww
 
      const let_CurrentWidthC04 = Ref_C04.current;
      let let_WidthC04=(document.getElementById('C04id_Canvas')as HTMLElement)
      
      //fetch("/cnn").then((res) =>
      //      res.json().then((data) => {
      //          setSS_HelloPy(data);
      //      })
      //  )
 
*/}
 
import cv2
 
path[0]
 
sage
 
                alert(data)
 
{SS_HelloPy}
 
<p>{SS_HelloPy}</p>
 
<p>{SS_HelloPy}</p>
 
['']
 
[]
 
                alert(data)
 
                // Setting a data from api
 
'Heeh'#
 
.name
 
      <p>{SS_HelloPy.age}</p>
      <p>{SS_HelloPy.programming}</p>
 
{
        name: "Errror",
        age: "Errror",
        programming: "Errror",
    }
 
'''
 
http:/localhost:5000
 
            
 
.message
 
.then((res) =>
            res.json()
 
'''
 
'''
 
CORS(app)
 
from flask_cors import CORS
 
"justdoit":"cd flask && venv/bin/flask run && cd .. && react-scripts start",
 
react-scripts start
 
                {/* Calling a data from setdata for showing */}
 
                <p>{data.age}</p>
                <p>{data.programming}</p>
 
                
 
// Setting a data from api
                setdata({
                    name: data.Name,
                    age: data.Age,
                    programming: data.programming,
                });
 
pythonscript
 
  "comment":[
    "'start': 'react-scripts start'"
  ]
 
'/api',method=['Get'])
 
"proxy": "http://localhost:5001",
 
    "server": "python3 hello00.py"
 
"start": "react-scripts start"
 
*
 
"server": "python3 hello00.py"
 
,port=5001
 
/
 
import "./Example01.css";
 
                <p>{data.date}</p>
 
                    date: data.Date,
 
        date: "",
 
        "Date":x, 
 
import datetime
 
x = datetime.datetime.now()
 
 
{
  "/auth/google": {
    "target": 
 
  }
}
 
http://127.0.0.1:5000
 
  /*
  "proxy":"http://127.0.0.1:5000",
  */
 
http://127.0.0.1:5000
 
console.erro
 
:{
    "target"
 
    "secure": false},
 
.programming
 
    }, []);
 
                    date: data.Date,
 
        "Date":x, 
 
import datetime
 
x = datetime.datetime.now()
 
    }

 
                    age: data.Age,
 
      <p>{SS_HelloPy.age}</p>
 
                    age: data.Age,
 
        age: 0,
 
        "Date":x, 
 
import datetime
 
x = datetime.datetime.now()
 
.name
 
alert(JSON.stringify(res))
 
{}
 
.name
 
.name
 
<string[]>
 
['Filip']
 
JSX_HelloPy
 
API00
 
API00/
 
fetch('/API00').then(
        res=>res.json()
      ).then(
        data => {
          setSS_HelloPy(data)
          //alert(JSON.stringify(data))
        }
      )
 
fetch('/API00').then(
        res=>res.json()
      ).then(
        data => {
          setSS_HelloPy(data)
          //alert(JSON.stringify(data))
        }
 
'Jojo'
 
1,2,3,'infty'
 
('CheChe')
 
,w=1,b=0
 
    s=str(type(x))
 
def ReLU(x,w=1,b=0):
    z=x*w+b
    if(z>0):
        return z
    else:
        return 0

 
mem
 
/*
 
,marginRight:'2px'
 
style={{marginRight:'2px'}}
 
',backgroundColor:'green'
 
backgroundColor:'darkblue'
 
    
 
<h1 style={{width:'150px'}}>Do you want to crop the image?</h1>
 
      <button>Reset</button>
 
</>
 
SS_
 
SS_
 
      <button>Show</button>
 
*/
 
/*
 
<button>Crop</button>
      <button>Reset</button>
 
      <button>Crop</button>
 
<button>Ok</button>
      <button>Reset</button>
 
</div>
 
<button>Ok</button>
      <button>Reset</button>
 
<button>Ok</button>
      <button>Reset</button>
 
</div>
 
.C04id_Editor {
    display: 'flex';
}
 
.C04id_Editor{
    display: 'flex';
}

 
<td><button>{let_undo}</button></td>
        <td><button>{let_cando}</button></td>
 
{'\u2264'}
 
      //marginTop:'calc(- 150% + 100%)',
 
( *
 
 ${SS_Zoom}
 
 ${1/SS_Zoom}
 
 * 0.5
 
 * 0.5
 

      // Y
      borderBottom:'300px',
 
objectFit: 'cover',
 
 50% 0%
 
className='C04id_GreenBox' 
 
      let let_x=0
 
*SS_Zoom
 
*SS_Zoom
 
  </div>
 
  <div style={{height:'100%'}}>
 
</div>
 
      display:'inline-grid',
 
 * 100% 
 
marginTop:`calc( ${0.5*SS_Zoom}*100vh - ${0.5*(143+20)*SS_Zoom}px - ${0.5*SS_Zoom} * 100vh + ${SS_Zoom*0.5*(143+40)}px )`,
 
  </div>
 
  <div style={{
    height:'100%',
    }}>
 
</div>
 
*0.5
 
</div>
 
'100%'
 
  </div>
 
    <div style={{
      height:'100%'
    }}>
 
  </div>
 
    <div style={{
      height:'1'
    }}>
 
      height:'100%',
 
</div>
 
      /*
 
  */
      {
          width: '100%',
          height: '100%',
          objectFit: 'cover',
          objectPosition: '100% 50%', // Adjust this to control the crop position
    }
 
style={{
 
    */
 
    /*
 
*1.5
 
100% - 
 
100% - 
 
      marginTop:`calc( ${SS_Zoom} * 200px)`,
 
      //objectFit: 'cover',
      //objectPosition:'0% 100%',
      
 
      height:'100%',
 
      transform:'scaleY(1.5)',
 
      marginTop:'auto',
 
`calc(100% - ${SS_Zoom*100}px)`
 
  </div>
 
    <div style={{height:'100%'}}>
 
      marginTop:`${SS_Zoom*100}px`,
 
</div>
 
      height:'100%',
 
`calc( ${SS_Zoom}*200px)`
 
100% - 
 
calc(100% - 
 
marginTop:`calc( ${0.5}*100vh - ${0.5*(143+20)}px - ${0.5*SS_Zoom} * 100vh + ${SS_Zoom*0.5*(143+40)}px )`,
      height:`calc(${SS_Zoom} * 100vh - ${SS_Zoom*(143+40)}px)`,
 
</div>
 
10
 
      marginLeft:'auto',
 
      objectPosition: '10% 0'
 
  </div>
 
  <div style={{
    marginTop:`calc( ${0.5}*100vh - ${0.5*(143+20)}px - ${0.5*SS_Zoom} * 100vh + ${SS_Zoom*0.5*(143+40)}px )`,
    height:`calc(${SS_Zoom} * 100vh - ${SS_Zoom*(143+40)}px)`,
  }}>
 
height:'100%',
 
  </div>
 
  <div style={{height:'100%'}}>
 
height:'500px'
 
height:'80px',margin:'-75px 0 0 -100px'
 
  </div>
 
  <div style={{height:'100%'}}>
 
      height:'100%',
      margin: '-75px 0 0 -100px'
 
</div>
 
      marginLeft:'500px'
 
      width:'100%',
 
</div>
 
const [SS_IsCrop,setSS_IsCrop]=useState<boolean>(false)
 
      <button>Color to Black and White</button>
 
import ReactCrop, { Crop } from 'react-image-crop';
import 'react-image-crop/dist/ReactCrop.css';
import React, { useState, useRef } from 'react';
 
  const [crop, setCrop] = useState<Crop>({ aspect: 16 / 9 });
 
</div>
 
      <div style={{display:'flex'}}>
 
    </div>
 
style={{marginLeft:'auto'}}
 
style={{marginRight:'auto'}}
 
</div>
 
 className='C04id_Zoom'
 
style={{display:'flex'}}
 
</div>
 
    -ms-transform: translateY(-50%);
        transform: translateY(-50%);
 
      //width:SS_Zoom.toString()+'px',
      borderColor:'white',
 
      display:'block',
 
0.5*(143+40)}px )`,
 
      marginTop:`calc( ${0.5}*100vh - ${0.5*(143+20)}px - ${0.5*SS_Zoom} * 100vh - ${SS_Zoom*
 
0.5*(143+40)}px )`,
 
      marginTop:`calc( ${0.5}*100vh - ${0.5*(143+20)}px - ${0.5*SS_Zoom} * 100vh - ${SS_Zoom*
 
100vh - ${(143+40)}px - 
 
 - ${SS_Zoom} * 100vh - ${SS_Zoom*(143+40)}px
 
`calc(${SS_Zoom} * 100vh - ${SS_Zoom*(143+40)}px)`
 
${SS_Zoom} * 
 
SS_Zoom*
 
argin
 
Top
 
display:'block',
      margin: 'auto',
 
Left
 
      marginRight: 'auto',
 
      display:     'block',
 
    width: 100%;
 
<h1 style={{color:'white'}}>Hello Convolution Neural Network</h1>
 
</>
 
SS_OpenPanel
 
  if(SS_OpenTool)
 
  const [SS_OpenTool,setSS_OpenTool]=useState<boolean>(false)
 
:root{
    --C04_RightToolW:500px;
}

 
    --C04_RightToolW: 500px;
 
style={{width:'100%'}}
 
    width:200px
 
Small
 

#C01id_SmallTable{
    width:1000px;
}
 
*/
    width:100px
 
    --let_DivWidth:500px;
 
    --let_DivWidth:500px;
 
        if(SS_Zoom>0){
 
        // I donot want this 0.7000000000000001 in JSX object
        // I want this 0.7 in JSX object
        // How can I do that
 
        if(SS_Zoom>0){
        let ss_Zoom=SS_Zoom
 
    
 
2*
 
  const
 
'C04id_Image'
 
Ref_Image
 
      const let_ObsImageHeight = new ResizeObserver(() => { 
        setSS_WidthImage(let_C04!.offsetWidth-1)
      })

 
//****************************************************************************
// FUNCTION_03: Resize
//****************************************************************************

 
    function f_Resize(){
      let let_C04=(document.getElementById('C04id_Canvas')as HTMLElement)
      let let_C04Width=let_C04!.offsetWidth
      setSS_WidthImage(let_C04Width)
    }
 
 onResize={f_Resize}
 
'C04id_Image'
 
    display: inline-block;
 
Right
 
Right
 
.C04id_RightToolbar{
    width:var(--C04_RightToolW);
    background-color: blueviolet;
}
 
    <h1>Hello There</h1>
 
1000
 
        setSS_OuterWidth(window.outerWidth-1)
        setSS_InnerWidth(window.innerWidth-1)
 
<U_Toolbar/>
 
<div className='C04id_Editor'>
      <h1>SS_OuterWidth:{SS_OuterWidth}</h1>
      <h1>SS_InnerWidth:{SS_InnerWidth}</h1>
      <h1>Marker</h1>
      <h1>Convolution</h1>
    </div>
 
 => {
 
: React.FC<IN_C04>
 
SS_OpenPanel,
setSS_OpenPanel,
 
SS_OpenPanel:0|1|2,
setSS_OpenPanel:(S:0|1|2)=>void
 
  <div className='C04id_RightToolbar'
    style={{height:`calc(100vh - ${143+20}px)`}}>
    <button>Hello</button>
    <h1>Hello There</h1>
  </div>
 
      let let_C01MinWidth=300//-100
 
          //let_setNarrow.disconnect();
 
      //let_setNarrow.observe(let_CurrentC04);
 

      //const let_setNarrow = new ResizeObserver(() => {
      //      if(let_C04!.offsetWidth>let_C01MinWidth){
      //          setSS_IsNarrow(false)
      //      }
      //});
 

    const Ref_C01 = useRef<HTMLDivElement | null>(null);


 
',gridTemplateColumns: 'repeat(2, 1fr)' } : {}
 
style={SS_OpenPanel === 2 ? { display:'grid
 
//style={{width:let_Width}}
 
SS_IsNarrow===true ? {width:let_C01MinWidth} : 
 
SS_IsNarrow===true ? {width:let_C01MinWidth} : 
 
 : {}
 
SS_IsNarrow===true ? 
 
ref={Ref_C01}
 
    const Ref_C01 = useRef<HTMLDivElement | null>(null);
 
    useEffect(() => {
        const let_CurrentC01 = Ref_C01.current;
        if (let_CurrentC01) {
        // Close C02_Input when the width of C01_Table is less than 175
        const let_ObsResize = new ResizeObserver(() => {
            let let_C01Width=(document.getElementById('HeaderLeft')as HTMLElement)!.offsetWidth
            let let_C04Width=(document.getElementById('HeaderRight')as HTMLElement)!.offsetWidth
            //if(let_C01Width!==let_C04Width){
            //    setSS_IsNarrow(true)
            //}
            //else if(let_C04Width>480){
            //    setSS_IsNarrow(false)
            //}
        });
        let_ObsResize.observe(let_CurrentC01);
        return () => {
            let_ObsResize.disconnect();
        };
    }
    }, []);
 
display:grid;
 
ref={Ref_C01}
 
            //let_setNarrow.disconnect();
 
        //let_setNarrow.observe(let_CurrentC01);
 


        //const let_setNarrow = new ResizeObserver(() => {
        //    let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
        //    if(SS_C02===true && let_C02Width+let_C01Width<let_C01MinWidth){
        //        setSS_OpenPanel(1)
        //    }
        //    else if(SS_C02===false && let_C01Width<let_C01MinWidth){
        //        setSS_OpenPanel(1)
        //    }
        //});
 
        let let_C02Width=275
        let let_C01MinWidth=300//-100
 
SS_IsNarrow===true ? {width:let_C01MinWidth} : 
 
    let SS_IsNarrow=false
 
setSS_C02:(S:boolean)=>void;
 
setSS_C02
 
SS_IsNarrow:boolean;
setSS_IsNarrow:(S:boolean)=>void;
 
          //let_setNarrow.disconnect();
 
      let let_C01MinWidth=300//-100
 
    SS_IsNarrow:boolean
 
    SS_IsNarrow
 
SS_IsNarrow:boolean;
setSS_IsNarrow:(S:boolean)=>void;
 
      <h1>SS_IsNarrow: {SS_IsNarrow.toString()}</h1>
 
SS_IsNarrow,
setSS_IsNarrow,
 
SS_IsNarrow:boolean;
setSS_IsNarrow:(S:boolean)=>void;
 
    let SS_IsNarrow=false
 
        SS_IsNarrow={SS_IsNarrow}
        setSS_IsNarrow={setSS_IsNarrow}
 
        SS_IsNarrow={SS_IsNarrow}
 

    const [SS_IsNarrow,setSS_IsNarrow]=useState<boolean>(false)
 
SS_OpenPanel:0|1|2,
 
SS_OpenPanel,
 
        //else{
        //  setSS_OpenPanel(0)
        //}
 
           // else{
           //     setSS_IsNarrow(false)
           //     //alert(let_C01Width)
           // }
 
  //width:'100%'
 
  //width:'100%
 
+100
 
+100
 
-100
 
//  940/2
 
        }
 
        if(SS_IsNarrow===false){
 
let let_C01MinWidth=480
 
  let let_C04MinWidth=900
 
            else if(let_C01MaxWidth){

            }
 
        let let_C01MaxWidth=490
 
        let let_C01MinW=480
 
let_C02Width+
 
MLElement)!.offsetWidth
 
            let let_C01Width=(document.getElementById('C01id_H')as HT
 
            else if(SS_C02===false && let_C01Width<let_C01MinWidth){
                setSS_IsNarrow(true)
            }
 
setSS_IsNarrow,
SS_IsNarrow,
 
setSS_IsNarrow:(S:boolean)=>void;
SS_IsNarrow:boolean;
 
            //else if(SS_C02===true && let_C02Width+let_C01Width+1>let_C01MinWidth){
            //    setSS_IsNarrow(false)
            //}
            //else if(SS_C02===false && let_C01Width+1>let_C01MinWidth){
            //    setSS_IsNarrow(false)
            //}
 
        /*
 
let_C02Width+
 
let_C02Width+
 
ru
 
275
 
// Close C02_Input when the width of C01_Table is less than 175
 
                //setSS_IsNarrow(true)
 
// Close C02_Input when the width of C01_Table is less than 175
 

            else{
                alert('Turing Machine')
                //setSS_IsNarrow(false)
            }
 
        
 
alert('Machine Learning')
 

//****************************************************************************
// USEEFFECT HOOK
//****************************************************************************
    const Ref_Index = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        const let_Current = Ref_Index.current;
        if (let_Current) {
        const let_ResizeObs = new ResizeObserver(() => {
            let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
            if(let_C01Width<175){
                setSS_C02(false)
            }
        });
        let_ResizeObs.observe(let_Current);
        return () => {
            let_ResizeObs.disconnect();
        };
    }

    }, []);
 
ARIABLE
 
//****************************************************************************
// VARIABLE
//****************************************************************************
    const Ref_C01 = useRef<HTMLDivElement | null>(null);

    useEffect(() => {
        const let_CurrentC01 = Ref_C01.current;
        if (let_CurrentC01) {
        const let_ResizeObs = new ResizeObserver(() => {
            let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
            if(let_C01Width<175){
                setSS_C02(false)
            }
        });
        let_ResizeObs.observe(let_CurrentC01);
        return () => {
            let_ResizeObs.disconnect();
        };
    }

    }, []);
 
        SS_IsNarrow={SS_IsNarrow}
 
            else{
            }
 
                setSS_IsNarrow(false)
 
                setSS_IsNarrow(true)
 
            else{
                setSS_IsNarrow(false)
            }
 
                setSS_IsNarrow(true)
                //alert(SS_IsNarrow.toString())
 
                setSS_C02(false)
 
                //alert(SS_IsNarrow.toString())
 
set
 
                setSS_IsNarrow(true)
 
                setSS_IsNarrow(true)
 
          alert('Alone')
 
        alert(SS_IsNarrow)
 
 style={SS_IsNarrow?{}:{}}
 
px'

 
width:'200px'
 
width:'100px'
 
style={{display: 'grid'}} 
 
  //width:'calc('+(SS_WidthImage).toString()+' - 100px)'
 
  //width:'400px'
  //width:'100vh'
 
-100
 
Oute
 
alert(window.outerWidth)
 
        //alert(let_C04Width)

        //if(SS_WidthImage>=let_C04Width){
        //  //
        //}
        //else{
        //  setSS_WidthImage(let_C04Width)
        //}
 
        //alert(SS_WidthImage)
 
      let let_C04Width=let_C04!.offsetWidth
 
          let_ObsResize.disconnect();
 
      
      let_ObsResize.observe(let_CurrentC04);
 
      const let_ObsResize = new ResizeObserver(() => {
          if(let_C04Width<500){
              setSS_IsNarrow(true)
              setSS_C02(false)
          }
          else{
              setSS_IsNarrow(false)
          }
      });
 
          let_ObsResize.disconnect();
 
      
      let_ObsResize.observe(let_CurrentC04);
 
      const let_ObsResize = new ResizeObserver(() => {
          if(let_C04Width<500){
              setSS_IsNarrow(true)
              setSS_C02(false)
          }
          else{
              setSS_IsNarrow(false)
          }
      });
 
            alert(let_C04Width)
 
  */
 
  /*
 
        
 
Obs
 
        let let_C04=(document.getElementById('C04id_Canvas')as HTMLElement)
        let let_C04Width=let_C04!.offsetWidth
 
let let_C04=(document.getElementById('C04id_Canvas')as HTMLElement)
      let let_C04Width=let_C04!.offsetWidth
 
        alert('hii') 
 
        if(let_C04Width<500){
 
        }
        else{
          setSS_WidthImage(300)
        }
 
setSS_WidthImage(let_C04Width)
 
setSS_WidthImage(let_C04Width)
 
 new =
 
      setSS_WidthImage(let_C04Width)
 
          let_ResizeObs.disconnect();
 
  onClick={f_Resize}
 
onClick={f_Resize}
 
      if (let_CurrentC04) {
 

      //
 
              //if(let_C04Width<350){
              //setSS_OpenPanel(1)
              //}
 

  useLayoutEffect(() => {
    const let_CurrentC04 = Ref_C04.current;
    let let_C04=(document.getElementById('C04id_Canvas')as HTMLElement)
    let let_C04Width=let_C04!.offsetWidth
    //if (let_CurrentC04) {
    //    setSS_WidthImage(let_C04Width)
    //}
    if (let_CurrentC04) {
    //alert(let_CurrentC04.getBoundingClientRect())
    setSS_WidthImage(let_C04Width)
    }
  }
  ,[])
 
.current
 
        setSS_WidthImage(let_C04Width)
 
      //
      function f_Resize(){
        alert('Resizing')
      }
      //
      let_C04.addEventListener("resize", f_Resize);
 
SS_Image
 
      // https://stackoverflow.com/questions/71457792/resize-event-in-react
      //function f_Resize() {
      //    setSS_WidthImage(let_C04Width);
      //}
      //window.addEventListener("resize", f_Resize);
      //f_Resize()
      //return () => window.removeEventListener("resize", f_Resize);

 
      f_Resize()
      return () => let_C04.removeEventListener("resize", f_Resize);
 
function f_Resize(){
        alert('Resizing')
      }
      //
      let_C04.addEventListener("resize", f_Resize);
      f_Resize()
      return () => let_C04.removeEventListener("resize", f_Resize);
 
      let let
 
(document.getElementById('C04id_Canvas')as HTMLElement)
 
setSS_WidthImage(let_C04Width)
 
SS_WidthImage
 
  //width:'400px'
  //width:'100vh'
  //width:'100%'
 
''+
 
calc(
 
 - 100
 
position:'fixed',
marginTop:'143px',
 
paddingRight:'100px'
 
*/
 
/*
 
      width:'calc('+SS_WidthImage.toString()+' - 100px)'
 
      width:'calc('+SS_WidthImage.toString()+' - 100px)'
 
  </div>
 
  <div className='C04id_Image' 
    style={{
      height:`calc(100vh - ${143+20}px)`,
      width:'calc('+SS_WidthImage.toString()+' - 100px)'
    }}
  >
 
50vh
 
(SS_WidthImage).toString()+'px'
 
    handleResize();
    // Remove event listener on cleanup
 
    // Call handler right away so state gets updated with initial window size
 
    // Add event listener
 
      // Set window width/height to state
 
let let_C04Width=(document.getElementById('C04id_Canvas')as HTMLElement)!.offsetWidth
 
    width:100%
 
              setSS_OpenPanel(1)
 
      <h1>RGB2Black&White</h1>
      <h1>Crop</h1>
      <h1>Gray2Black</h1>
      <h1>Marker</h1>
      <h1>Convolution</h1>
 
display: 'grid';
 
 style={{display: 'grid'}}
 
    overflow: 'auto';
 
//style={{width:SS_WidthImage.toString()+'px'}}
 
width:'100%'
 
(document.getElementById('C04id_Body')as HTMLElement)!.style.width=let_C04Width.toString()+'px;'
 
(document.getElementById('C04id_Body')as HTMLElement)!.style.width=let_C04Width.toString()+'px;'
 
:number
 
    width:500px;
 
style={{width:'500px'}}
 
let_ImageWidth.toString()+'px'
 
          let_ImageWidth=let_C04Width
 
          alert(let_ImageWidth)
 
      overflowX: 'scroll',
      overflowY: 'scroll',
 
    overflow: auto;
 
    overflow: auto;
 
    */
 
    /*
 
      overflow: 'auto',
 
,width:'100px'
 
    margin-left:auto
 
let_ImageWidth.toString()+'px'
 
let_ImageWidth.toString()+'
 
let_ImageWidth.toString()+'
 
l
 
:string=''
 
<div className='C04id_RightToolbar'
    style={{height:`calc(100vh - ${143+20}px)`}}>
    <button>Hello</button>
    <h1>Hello There</h1>
  </div>
 
{/*
 
  {
    SS_Image && 
 
  }
 
    margin-left:auto;
 
              if(let_C04Width<300){
                alert('Narrow')
              }
 
  const [SS_IsRightTool,setSS_IsRightTool]=useState<boolean>(true)
 
    margin-top:142px;
 
display:flex;
 
*/
 

.C04id_Canvas {
    background-color: black
}
 
.C04id_Canvas{
    background-color: black
}
 

.C04id_Body{
    background-color:black
}

 
style={SS_OpenPanel === 2
      ? { width: '50%' }
      : { width: '100%' },
    backgroundColor: 'black'}
 
,backgroundColor:'black'
 
style={{
 
style={{backgroundColor:'black'}}
 
 +10px
 
.C04id_RightToolbar{
    margin-left:auto;
    position:
}
 
bsolute
 
set
 
set
 
              setSS_C02(false)
 
,SS_OpenPanel
 
 && SS_OpenPanel===2
 
const [SS_IsNarrow,setSS_IsNarrow]=useState<boolean>(false)
 
style={{
    width:let_Width
    //width:'500px'
    }}
 
//
 
<div>

</div>
 
{JSX_C02}
 
50%
 
{
/*
 
{
/*
 
*/}
 
style={{backgroundColor:'greenyellow'}}
 
width:'500px',height:'500px',
 
id='HeaderRight'
 
    let let_WidthPanel

    if(SS_OpenPanel===2){
        let_WidthPanel={gridTemplateColumns: 'repeat(2, 1fr)'}
    }
    else{
        let_WidthPanel={}
    }
 
    grid-template-columns: repeat(2, 1fr);
 

interface IN_C04 {
  SS_OpenPanel:0|1|2,
  setSS_OpenPanel:(S:0|1|2)=>void
}

 
  additionalStyles?: React.CSSProperties;
 
            
 
            SS_OpenPanel={SS_OpenPanel}
            setSS_OpenPanel={setSS_OpenPanel}
 
{
    // PARAMETER
    // HOOK: setState()
    SS_OpenPanel,
    setSS_OpenPanel
}:{
    // TYPE
    // HOOK: setState() 
    SS_OpenPanel:1|2,
    setSS_OpenPanel:(S:0|1|2)=>void
}

 
    // PARAMETER
    // HOOK: setState()
    SS_OpenPanel,
    setSS_OpenPanel
}:{
    // TYPE
    // HOOK: setState() 
 
    // PARAMETER
    // HOOK: setState()
    SS_OpenPanel,
    setSS_OpenPanel
}:{
 
    SS_Row,
    SS_Columns,
    SS_C02,
    setSS_C02,
 
    SS_Row:TS_Row[],
    SS_Columns:TS_Column[],
    SS_C02:boolean,
    setSS_C02:(S:boolean)=>void,
 
SS_OpenPanel = 
 
SS_OpenPanel===0
 
<td><button className='C03id_Header'>X</button></td>
 
<C04_Canvas
/>
 
        JSX_C03=<></>
 
    let JSX_C03=<></>
 
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
 
<td><button className='C03id_Header'>+</button></td>
 
<td><button className='C03id_Header'>+</button></td>
 
<td><button className='C03id_Header'>+</button></td>
 
 onClick={()=>setSS_Open(true)}
 
    margin-bottom:auto;
 
calc(
 
 - var(--C04_RightToolW)
 
width:100%;
 
 className='Index_Canvas'
 
 style={{marginLeft:'auto'}}
 
,width:'70px'
 
 style={{width:'500px'}}
 
{JSX_C02}
<div id='BodyLeft' style={{width:let_Width}}>
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
</div>
 
</div>
 
<div>
 
    border: 1px solid #000000;
 
    max-width: calc(100% - var(--C04_RightToolW));
 
</div>
 
    <button>Hello</button>
      <h1>Hello There</h1>
 
    position: relative;
    margin-left:auto;
 
.C04id_Image{
    width:90%;
    overflow-y: scroll;
    overflow-x: scroll;
}

 
marginRight:'auto'
 
style={{marginRight:'auto'}}
 
style={{marginRight:'auto'}}
 
  const Ref_C0 = useRef<HTMLDivElement | null>(null);
 
    height:100%;
 
        margin-top: var(--let_MarginTop);
        margin-bottom: var(--let_MarginTop);
 
inline-
 
className='C04id_Image'
 
</div>
 
onClick={()=>setSS_Open(true)}
 
</>
 
{
      SS_Image && <img src={SS_Image} alt="Uploaded" className='C04id_Image'/>
      }
 
 id='HeaderRight'
 
{
      SS_Image && <img src={SS_Image} alt="Uploaded" className='C04id_Image'/>
      }
 
.C03id_Header {
 
      */}
 
    margin-top:     var(--let_MarginTop);
    margin-bottom:  var(--let_MarginTop);
 

.C04id_DivHeader input {
    font-size: 16px;
    height: 40px;
}
 
.C04id_DivHeader input{
    height:40px;
}
 
<td>
 
</td>
 
{SS_Image && <img src={SS_Image} alt="Uploaded" />}
 
/*
 
*/
 
// React
import React, { ChangeEvent, useState } from 'react';

// Components
//import R_FilterColumn from './Coms/R_FilterColumn';

// Type
import TS_Row from '../T01_Row/An_Index';

// CSS
import './index00.css'
import './index01.css'

const ImageUpload: React.FC = () => {
  const [SS_Image, setSS_Image] = useState<string | null>(null);

  const f_ImageChange = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];

    if (file) {
      const let_ImageURL = URL.createObjectURL(file);
      setSS_Image(let_ImageURL);
    }
  };

  return (
    <div>
      <input type="file" accept="image/*" onChange={f_ImageChange} />
      {SS_Image && <img src={SS_Image} alt="Uploaded" />}
    </div>
  );
};

export default ImageUpload;
 
SS_C02={SS_C02}
setSS_C02={setSS_C02}
 
    const [SS_100Width,setSS_100Width]=useState<boolean>(false)
 
    if(SS_Columns.length<2){
        setSS_100Width(true)
    }
 
.C01id_BreakWord{
    word-wrap: 'break-word';
    width:'240px';
}
 
    const [SS_100Width,setSS_100Width]=useState<boolean>(false)
 
    if(SS_Columns.length<2){
        setSS_100Width(true)
    }
 
SS_Columns
 
    let let_100Width='100%'
    if(SS_100Width){
        let_100Width='100%'
    }
    else{
        
    }
 

    //(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
 
 // The empty dependency array ensures that the effect runs only once, similar to componentDidMount
    /*
    useEffect(()=>{
        const let_CurrentC01 = Ref_C01.current;
        if (let_CurrentC01) {
            let let_C01_TH=(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
            let let_C01_BodyHeight=(document.getElementById('C02id_Height') as HTMLElement)!
            let_C01_BodyHeight.style.height="calc(100vh - 50px -"+let_C01_TH.toString()+"px)"
        }
    },[]);
    */

 
let ss_Columns=[...SS_Columns]
 
let ss_Rows=[...SS_Row]
        let let_UpdateRow=U01_DeleteColumn(ss_Rows,R02_ReturnIndex(THISCOLUMN,ss_Columns))
 
JSON.stringify(
 
ROWS[i].Array.splice(COLUMNINDEX,1)
 
        }
 
        if(ROWS[i].Display!==4){
 
        }
 
        if(ROWS[i].Display!==4){
 
'Tally Hall',"Marvin's Marvelous Mechanical Museum",'The Ruler of Everything','Indie Rock'
 
        {Key:4 ,Next:5  , Array:['Que, The Human Editor','Ddd','010']},
        {Key:5 ,Next:6  , Array:['Human Centipede'      ,'Eee','011']},
 
'Tally Hall'           ,'Ccc','002'
 
               ,'Bbb','001'
 
เพลงโดย เรดิโอเฮด

 
'Xedni Wor'            ,'Aaa','000'
 
           
 
        {Key:6 ,Next:7  , Array:["Chonny's Charming Chaos Compendium",'Chonny','012']},
        {Key:7 ,Next:8  , Array:["Chonny'sCharmingChaosCompendium",'Chonny','020']}
 
style={{marginLeft:C02_MarginLeft,marginBottom:'-10px'}}
 
            continue
        }
        else{
 
setSS_Columns(let_UpdateColumn)
 
        //alert(JSON.stringify(SS_Columns))
 
            alert('Hii')
 
            ,'Aaa','000'
 
.C01id_BreakWord{
    word-wrap: 'break-word';
    width:'240px';
}
 
</div>
 
style={{wordWrap: 'break-word'}}
 
style={{wordWrap: 'break-word'}}
 
style={{wordWrap: 'break-word'}}
 
 
 
 style={{whiteSpace: 'nowrap'}}
 
 style={{whiteSpace: 'nowrap'}}
 
 overflow: 'hidden', 
 
 overflow: 'hidden', 
 
, width: '100px' 
 
width: '100px' 
 
    height: 40px;
 
    height: 30px;
 

#C01id_Table {
    /*
    https: //stackoverflow.com/questions/5671098/how-can-i-force-all-rows-in-a-table-to-have-the-same-height
    */

}
 
    height: 25px;
    max-height: 20px;
 

#C01id_Table td {
}

 
    height: 0px;
 

#C01id_Table th:not(#C01id_Table th:first-child, #C01id_Table th:last-child) {
    white-space: normal;
    justify-content: flex-start;
}

#C01id_Table td:not(#C01id_Table td:first-child, #C01id_Table td:last-child) {
    white-space: normal;
    justify-content: flex-start;
}
 
pace-around
 
#C01id_Table th:not(#C01id_Table th:first-child, #C01id_Table th:last-child) {
    white-space: nowrap;
    justify-content: space-around;
}

#C01id_Table td:not(#C01id_Table td:first-child, #C01id_Table td:last-child) {
    white-space: nowrap;
    justify-content: space-around;
}
 
    white-space: nowrap;
    justify-content: space-around;
 
    white-space: nowrap;
    justify-content: space-around;
 
import TS_Column from '../T02_Column/An_Index';
 
            <button className='C03id_Header' onClick={()=>setSS_Open(false)}>X</button>
 
 File Name
 
//****************************************************************************
// JSX_00: Open C02
//****************************************************************************
    let JSX_Button=<></>
    if(SS_C02===false){
        JSX_Button=<td><button className='C03id_Header' onClick={f_Open}>Open Input Tab</button></td>
    }
    else{
        JSX_Button=<td><button className='C03id_Header' onClick={f_Close}>Close Input Tab</button></td>
    }
 
    function f_FileName(){
        let let_Word=(document.getElementById('C03id_FileName') as HTMLInputElement).value.toString()
        setSS_FileName(let_Word)
    }
 
    function f_Click(){
        
    }

 
onChange={f_FileName}
 
        alert('Change')
 
            */
            }
 
{
            /*
 
{(document.getElementById('C03id_FileName')as HTMLInputElement).value.toString()}
 
            {/*
 
*/
            }
 
 , CSVDownload
 
<CSVLink data={SS_Row} filename={"my-data.csv"}>
        Download CSV
</CSVLink>
 
{/*
    <CSVLink data={SS_Row} filename={"my-data.csv"}>
        Download CSV
</CSVLink>
*/}
 
,marginTop:'-10px'
 
<td><button className='C03id_Header'>Export Data</button></td>
 
onClick={f_Open}
 
SS_Row={SS_Row}
 
<CSVLink data={SS_Row} filename={"my-data.csv"}>
        Download CSV
      </CSVLink>
 
import { CSVLink } from "react-csv";
 
import { CSVLink } from "react-csv";
 
<CSVLink data={SS_Row} filename={"my-data.csv"}>
        Download CSV
      </CSVLink>
 
={SS_Row}
 
SS_C02,
setSS_C02
 
        {Key:6 ,Next:7  , Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:7 ,Next:8  , Array:['Weezer'               ,'Bbb','001']},
        {Key:8 ,Next:9  , Array:['Tally Hall'           ,'Ccc','002']},
        {Key:9 ,Next:10 , Array:['Que, The Human Editor','Ddd','010']},
        {Key:10,Next:11 , Array:['Human Centipede'      ,'Eee','011']},
        {Key:11,Next:12 , Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:12,Next:13 , Array:['Weezer'               ,'Bbb','001']},
        {Key:13,Next:14 , Array:['Tally Hall'           ,'Ccc','002']},
        {Key:14,Next:15 , Array:['Que, The Human Editor','Ddd','010']},
        {Key:15,Next:16 , Array:['Human Centipede'      ,'Eee','011']},
        {Key:16,Next:17 , Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:17,Next:18 , Array:['Weezer'               ,'Bbb','001']},
        {Key:18,Next:19 , Array:['Tally Hall'           ,'Ccc','002']},
        {Key:19,Next:20 , Array:['Que, The Human Editor','Ddd','010']},
        {Key:20,Next:21 , Array:['Human Centipede'      ,'Eee','011']},
        {Key:21,Next:22 , Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:22,Next:23 , Array:['Weezer'               ,'Bbb','001']},
        {Key:23,Next:24 , Array:['Tally Hall'           ,'Ccc','002']},
        {Key:24,Next:25 , Array:['Que, The Human Editor','Ddd','010']},
        {Key:25,Next:26 , Array:['Human Centipede'      ,'Eee','011']},
        {Key:26,Next:27 , Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:27,Next:28 , Array:['Weezer'               ,'Bbb','001']},
        {Key:28,Next:29 , Array:['Tally Hall'           ,'Ccc','002']},
        {Key:29,Next:30 , Array:['Que, The Human Editor','Ddd','010']},
        {Key:30,Next:30 , Array:['Human Centipede'      ,'Eee','011']},
 
    const [SS_Num,setSS_Num]=useState<number>(SS_Row.length)
 
            SS_Num={SS_Num}
            setSS_Num={setSS_Num}
 
SS_Num={SS_Num}
setSS_Num={setSS_Num}
 
const [SS_Num,setSS_Num]=useState<number>()
 
    // Generate New Key
    let let_NewKey:number = Math.random()
    while(ROWS.map(ROW=>ROW.Key).includes(let_NewKey)===true){
        let_NewKey = Math.random()
    }
 
let_NewROW
 
let_NewROW
 
        // for(let i=0;i<ss_Rows.length;i++){
        //     if(i<ss_Rows.length-1 && i>0){
        //     for(let j=0;j<ss_Rows.length-1;j++){
        //         if(ss_Rows[i].Next==ss_Rows[j+1].Key && j<ss_Rows.length-1){
        //             let_UpdateRows.push(ss_Rows[j+1])
        //             break
        //         }
        //     }}
        // }
 
        alert(JSON.stringify(let_UpdateRows[0]))
 
[-1].Next
 
                //if(let_UpdateRows[-1].Next==let_Push[i].Key){
                //    alert(JSON.stringify(let_UpdateRows[-1]))
                //    alert(JSON.stringify(let_Push[i]))
                //    //let_UpdateRows.push(let_Push[i])
                //    //let_Push.splice(i,1)
                //    //break
                //}
 
                //if(let_UpdateRows[-1].Next==let_Push[i].Key){
                //    alert(JSON.stringify(let_UpdateRows[-1]))
                //    alert(JSON.stringify(let_Push[i]))
                //    //let_UpdateRows.push(let_Push[i])
                //    //let_Push.splice(i,1)
                //    //break
                //}
 
            alert(JSON.stringify(let_UpdateRows[-1]))
 
{
                    
                }
 
            if(ss_Rows.length==1){
                let_UpdateRows.push(ss_Rows[0])
                break
            }
 
            if(j==ss_Rows.length-1){
            }
            }
 
                for(let i=0;i<let_Push.length;i++){
                if(let_UpdateRows[-1].Next==let_Push[i].Key){
                    let_UpdateRows.push(let_Push[i])
                    //let_Push.splice(i,1)
                    //break
                }
 
                for(let i=0;i<let_Push.length;i++){
 
            }
 
                if(let_UpdateRows[-1].Next==let_Push[i].Key){
 
                    //let_Push.splice(i,1)
                    //break
                }
                break
 
            if(j==)
 
'Xedni Wor'            ,'Aaa','000'
 
.splice(0,1)
 
        //alert(JSON.stringify(let_UpdateRows))
 
        let iii=0
 
                    ss_Rows.splice(j+1,1)
 
                    //let_UpdateRows.push(ss_Rows[j+1])
 
                    //let_UpdateRows.push(ss_Rows[j+1])
                    //ss_Rows.splice(j+1,1)
 
.Next
 
                    //ss_Rows.splice(j,1)
                    //break
 
                    //ss_Rows.splice(j,1)
                    //break
 
            let ii=i+1
 
ss_Rows[i].Next
 
9
 
        Ls=Memory(Ls)
 
Ls=Memory(Ls)
 
    

    def Memory(ls):
        if(len(ls)<2):
            return [ls[0],[]]
        Lss=ls[:-1]
        Mid=ls[-1]
        Less=[]
        More=[]
        for i in Lss:
            if(i<Mid):
                Less.append(i)
            elif(i>Mid):
                More.append(i)
        return [Less,More,Mid]
    
 
,Ls[0]
 
,Ls[0]
 
,[]
 
,[]
 
[0]
 
Less=Memory(Ls)
        More=Memory(Ls)
 
'''
 
'''
 
    def Sort(ls):
 
    Loop=True

 
        // https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value
        // https://www.w3schools.com/jsref/jsref_sort.asp
        // https://stackoverflow.com/questions/39583327/javascript-sort-array-of-arrays-by-second-element-in-each-inner-array
 
            setSS_Row(ss_Rows.reverse())
 
            setSS_Row(ss_Rows)
 
ss_Rows.sort((a,b) => a.Array[index].toUpperCase().localeCompare(b.Array[index].toUpperCase()));
 
[1,2],[2,3],XXXXX
 
            else if(i===ROWS.length-1){
// [0,1],[1,2],[2,3],[3,3]
// [0,1],XXXXX,[2,3],[3,3]
// [0,2],XXXXX,[2,3],[3,3]

// [0,1],[1,2],[2,3],[3,3]
// XXXXX,[1,2],[2,3],[3,3]

// [0,1],[1,2],[2,3],[3,3]
// [0,1],
 
i>0 && 
 
        RowIndex: ROWS.length,
 
    
    const [SS_LastRow,setLastRow]
 
    // We might check the length of the element inside array later.

    /*
    // Check duplicate Column Name
    if(NEWROW.toString().length>0 
            && NEWROW.toString().length<30 
            && ROWS.map(ROW=>ROW.Name).includes(NEWROW.Name)===false){
            // https://stackoverflow.com/questions/43846531/check-if-dictionary-object-in-array-contains-certain-value-in-javascript

            // Generate New Key
            let let_NewKey:number = Math.random()
            while(ROWS.map(ROW=>ROW.Key).includes(let_NewKey)===true){
                let_NewKey = Math.random()
            }
            
            // Add New Column in List of All Columns
            // https://stackoverflow.com/questions/31048953/what-are-these-three-dots-in-react-doing
            const let_NewROW:TS_Row={
                Key: let_NewKey,    
                Name: NEWROW.Name,
                }
            return [let_NewROW,...ROWS]
        }
        return ROWS
    */
 
 by index
 
 C01id_SortButton
 
onClick={()=>f_Open(Column,1)}
 
ontSize
 
style={{whiteSpace: 'normal'}}
 
,marginRight:'auto'
 
marginRight:'auto'
 

#C02id_Div h1 {
}
 
    margin-left: 5px;
 
marginBottom:'-10px'
 
style={{marginBottom:'-10px'}}
 
,marginBottom:'10px'
 
marginLeft:'auto'
 
style={{marginLeft:'auto'}}
 
.C02id_DeleteColumn{
    margi
}
 
    table-layout: fixed;
 

#C02id_RenameColumn {
    background-color: #c794e3;
}

 
.C02id_DeleteColumn {
    display: 'grid';
}

 
C02id_DeleteColumn
 
    float: 'left';
 
className='C02id_DeleteColumn'
 
</h1>
                <h1>
 

.C02id_DeleteColumn button{
    margin-left:auto
}
 
    margin-left: 0;
 
.C02id_DeleteColumn0{
    line-height:2px;
}
.C02id_DeleteColumn1 {
    line-height: 2px;
    margin-top:-20px;
}
.C02id_DeleteColumn2 {
    line-height: 2px;
}
 
{Column.Name}?
 
            <>
 

            </>
 

            <tr className='C02id_HeightLightRow C02id_DeleteColumn1'>
                
            </tr>
 
<div className='C02id_0443'>
                <button onClick={()=>f_Delete(Column)}>Ok</button>
                <button onClick={()=>f_Open(Column,0)}>Cancel</button>
                </div>
 

            <tr className='C02id_HeightLightRow C02id_DeleteColumn1' ><td>
            <div className='C02id_CreateRowDiv'>
                <h1>to delete {Column.Name}?</h1>
            </div>
            </td></tr>
 
#C02id_Div table tr.C02id_HeightLightRow {
    background-color: rgb(100, 100, 200);
}
 
#C02id_Div table tr.C02id_HeightLightRow{
    background-color: rgb(100, 100, 200);
}
 
#C02id_Div table tr:.C02id_HeightLightRow{}
 


#C02id_Div table tr:.C02id_HeightLightRow{
    
}
 
#C02id_Table tr:nth-child(even):not(.C02id_HeightLightRow) {
    background-color: #f2f2f2;
}
 

#C02id_Table tr:nth-child(even):not(.C02id_HeightLightRow) {
    background-color: #f2f2f2;
}
 
#C02id_Div table tr ,
#C02id_Div table td{
    width: 100%;
}

#C02id_Div table{
    border-top: 1px solid #000000;
    border-bottom: 1px solid #000000;
    background-color: rgb(0, 0, 0);
}
 
    padding: 0px;
 
#C02id_Div table tr:nth-child(even){
    background-color: rgb(95, 160, 120);
}

#C02id_Div table tr:nth-child(odd) {
    background-color: rgb(125, 213, 18);
}
 
.C02id_CreateColumnDiv input {
    vertical-align: middle;
    margin-bottom:5px;
}
 

.C02id_CreateColumnDiv button{
}

 
#C02id_Header{
    border-top:1px solid #000000;
    border-bottom: 2px solid chocolate;
    height:var(--let_HeaderHeight);
    background-color: chocolate;
    display:grid;
}

 
/*
//////////////////////////////////////////////////////////////////////////////////
*/
 
.C02id_0443 {
    display: 'flex;';
    float: 'left';
    margin-left: 10px;
}

.C02id_3342 {
    margin-left: 5px
}

#C02id_B2133 {
    margin-left: 5px
}

.C02id_6677{
    display: 'flex';
    margin-right: 'auto';
    margin-top:5px
}
 
</div>
 
</table>
 
<div >
 
    margin-left: 3px;
 
    margin-bottom: 5px;
 
    border: 1px solid #ffffff;
 
.C02id_DeleteColumn1 {
    line-height: 2px;
    margin-top:-20px;
}
 

#C02id_Div input{
    margin-top:-10px;
    margin-bottom:10px;
}
 

#C02id_Header input{
    margin-top:50px;
}
 
    margin-left: 3px;
 
    margin-left: 10px;
 
    padding-top: 5px;
    padding-bottom: 5px;
 
#C02id_Div table tr{
border: 1px solid #000000;
padding: 1px;
}
 
</div>
 

#C02id_Header input,
#C02id_Header button{
    display:inline-flex;
}
 
.C02id_CreateColumnDiv button{
    margin-left: 3px;
}
 
    margin-left: 10px;
    margin-top: -1px
 
#C02id_DivHeader
 
#C02id_DivHeader{
    
}
 
className='C02is_Table'
 

.C02is_Table input{
    margin-top:-22px;
}
 
    margin-top:10px;
 
.C01id_TR td{
    height:0px;
}
 
 tr
 
.C01id_SortButton tr{
    height:80px;
}
 
    padding:-10px;
 
<button onClick={()=>f_Open(Column,2)}>X</button>
 

.C02id_Header{
    height: 100px
}
 
.C02id_Header{
    height: 00px
}
 
.C02id_Header{
    height: 500px
}
 
width:300px;
 


#C02id_Table {
    margin-bottom: 10px;
}
 
#C02id_Div tbody{
    width:300px;
}
 
#C02id_Table tr {
    width:100%;
    height: 60px;
    background-color: #c794e3;
}
 
{JSX_C02}
 
</tbody>
 
<tbody>
 
inline-
 
    display: inline-block;
 
        width: 100%;
 
    width:100%;
    height: 60px;
 
#C02id_Div td{
    width:100%
}
 
:not(:last-child)
 
id='C02id_Table'
 
    width:100%
 
#C02id_Div tbody{
    width:300px;
}
 

#C02id_Div hr {
    color: red;
    background-color: red;
    height: 2px;
    border: none;
    width: 100%;
}
 

#C02id_Div tbody,
#C02id_Table tr{
    width:100%
}
 
#C02id_Div tbody,
#C02id_Table tr 
 
    overflow-x: scroll;
 
#C02id_Table tr{
    height: 60px;
    background-color: #c794e3;
}

#C02id_Div button {
    border: 2px solid rgb(0, 0, 0);
    background-color: rgb(255, 255, 255);
    margin-right: 3px;
}
 

#C02id_Table tr:first-child{
    height:60px;
    background-color: #c794e3;
}
 

#tbody{
    width: 300px;
    display:block
}
 
    
 
    margin-bottom:auto;
 
</tbody>
 

#C02id_Table {
}
 
    margin-bottom: auto;
 
:first-child 
 
    border-spacing: 0;
    border-collapse: collapse;
 
    /* Removes the cell spacing via CSS */
 
    cellSpacing="0"
 
    margin-bottom:auto;
 
    vertical-align: text-top;
 
    position:relative;
 
    display:inline-block;
 
    margin:0px;
    border:0px;
    padding:0px;
 
#C02id_DivButton {
}
 
height:'300px'
 
auto
 
#C02id_Div table {
    height: 100%;
    width: 100%;
    /* Optional: Ensure the table takes the full width */
}

 
style={{maxHeight:'calc(100vh - 240px)'}}
 
style={{display:'flex;',marginRight: 'auto',marginTop:'5px'}}
 
    style= {
                {
                
 
            }
        }
 
style={{marginTop:'15px'}}
 
    position:absolute;
    display:inline-block;
 
    overflow-y: auto;
 
scrol
 
    position: relative;
 
    display: grid;
 
    position: fixed;
 
position:fixed;
 
    margin-bottom: 10px;
 
    scroll-snap-type: none;
 
,scroll
 
style={{maxHeight:'calc(100vh - 240px)'}}
 
    overflow-y: scroll;
 
overflow-y: scroll;
 
#C02id_Table{
    margin-bottom:10px;
}
 
    position:fixed;
 
    position:absolute;
 
style={{maxHeight:'calc(100vh - 240px)'}}
 
<div id='C02id_Table'>
 
    margin-top:10px;
    display: block;
 
    margin-left: 0%;
 
#C02id_B2133{
    margin-left: 5px
}
 
.C02id_0443{
    display: 'flex;';
    float:'left';
    margin-left:'10px';
}
.C02id_3342{
    margin-left: '5px'
}

 

#C02id_DivButton {
}
 
    margin-top: 15px;
 
#C02id_DivButton button{
}

 
 id='C02id_ColumnTable'
 
    margin-top:5px;
 
style={{lineHeight: css_LineHeight, marginTop: '-20px' 
 
style={{lineHeight: css_LineHeight, marginTop: '-20px' }}
 
style={{ lineHeight: css_LineHeight, marginTop: '-20px' }}
 
style={{lineHeight: css_LineHeight}}
 
 style={{display:'flex;',float:'left',marginLeft:'10px'}}
 
 style={{
    marginLeft:'3px'
    }}
 
style={{
    marginTop:'-1px'
    }}
 
style={{marginLeft:'5px'}}
 
ivButton
 

#C02id_DivButton{
    margin-top:15px;
}
 
    overflow-x: auto;
 

#C02id_DivHeader td:last-child{
    background-color: #000000;
}
 
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
        {Key:0,Name:'Name'},
        {Key:1,Name:'Price'},
        {Key:2,Name:'Amount'},
 
    background-color: burlywood;
 
    height:'20px'
 
    height:'20px'
 
</h1>
 
border-bottom: 2px solid chocolate;
 
-top
 
    border-top: 1px solid #000000;
 
<hr />
 
    margin-top:0px;
 

<hr/>
 
<hr/>
 

</div>
 
<div >
 
</div>
 
style={}
 
height:100px
 
<hr />
 
<hr/>
 
<hr/>
 
<hr />
 
<hr/>
 
<hr/>
 
    //height:'70vh'
 
Insertion
 
let_C01_BodyHeight.style.height="calc(100vh - 50px -"+let_C01idTH.toString()+"px)"
 
let let_C01idTH=(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
            let let_C01_BodyHeight=(document.getElementById('C02id_Height') as HTMLElement)!
 
            alert(let_C01idTH.toString())
 
    let let_C01idTH:number=0
 
        const let_CurrentTH = Ref_C01idTH.current;
 
(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
 
            //alert(let_C01Height)
            //alert(window.innerHeight)
 
            //if(let_C01Height>window.innerHeight){
            //    alert(let_C01Height)
            //}
 
let_C01idTH=(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
 
        alert(let_C01idTH)
 
{
            let_C01idTH = (document.getElementById('C01id_TH') as HTMLElement)!.offsetHeight;
            let let_C01Width=(document.getElementById('C01id_H')as HTMLElement)!.offsetWidth
            if(let_C01Width<175){
                setSS_C02(false)
            }
        }
 
        const updateSizes = () => {
            let_C01idTH = (document.getElementById('C01id_TH') as HTMLElement)!.offsetHeight;
            let let_C01Width = (document.getElementById('C01id_H') as HTMLElement)!.offsetWidth;

            if (let_C01Width < 175) {
                setSS_C02(false);
            }
        };
 
            //alert(let_C01Height)
            //alert(window.innerHeight)
 
            //if(let_C01Height>window.innerHeight){
            //    alert(let_C01Height)
            //}
 
+
 
Resize
 
,toString
 
+'
 
        {Key:20, Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:21, Array:['Weezer'               ,'Bbb','001']},
        {Key:22, Array:['Tally Hall'           ,'Ccc','002']},
        {Key:23, Array:['Que, The Human Editor','Ddd','010']},
        {Key:24, Array:['Human Centipede'      ,'Eee','011']},
 
56
    7
 
    height:'70vh'
 
<div id='BodyLeft' style={{width:let_Width}}>
{JSX_C02}
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
</div>
 
#C02id_Div {
    background-color: cadetblue;
}

 
height: calc(100vh - 40px);
 
    //height:'calc(100vh-52px-'+{let_C01idTH}+'px)'
    height:'70vh'
 
    
 
=(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
 
.toString()
 
    height:80vh;
 
let let_C01idTH=(document.getElementById('C01id_TH')as HTMLElement)!.offsetHeight
 
        alert(window.innerHeight)
 
alert(let_CurrentC01)
 
alert(let_CurrentC01)
 
    display:flex;
 
    display: flex;
 
    display: inline-flex;
 
    display:grid;
 
    width:  50%;
 
    display: flex;
 
    width: 50%;
 
<div id='BodyLeft' style={{width:let_Width}}>
{JSX_C02}
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
</div>
 
    display:flex;
 

<C04_Header
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
 
<div id='HeaderRight'>
 
</div>
 
<div id='HeaderRight'>
<C04_Header
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
</div>
 
<C04_Header
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
 
    display: flex;
 
    width: 50%;
 
    margin-right:auto;
 
<div id='BodyLeft' style={{width:let_Width}}>
{JSX_C02}
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
</div>
 
<div id='BodyLeft' style={{width:let_Width}}>
{JSX_C02}
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
</div>
 
    height: 100vh;
 
    height:100%
 
    margin-left: 5px;
    margin-top:     5px;
    margin-bottom:  5px;
 
height:100%;
 
    margin-top:     5px;
    margin-bottom:  5px;
 
    height: 30px;
 
.C03id_Header button{

}
 
    height:25px;
 
    margin
 
    margin-top:10px;

 
    margin-bottom: 10px;
 
.C03id_Header {
    font-size: 16px;
    margin-left: 5px;
    height:40px;
}
 

{
// Body Right = Image Processing and Tesseract Setting
}
 
{
// Header = Import/Export Files
}
 
</div>
 
    background-color: rgb(130, 45, 45);
 
SS_Row={SS_Row}
 
    SS_Row,
 
    SS_Row:TS_Row[],
 
    SS_Row,
    SS_C02,
 
    SS_Row:TS_Row[],
    SS_C02:boolean,
 
#Header{
    
}
 
import C_TopButton from './Coms/C_TopButton'
 
<hr />

<C_TopButton
// Export Data
// Rename Table
    SS_Row    = {SS_Row}
    SS_C02    = {SS_C02}
    setSS_C02 = {setSS_C02}
/>
<hr />
 
../
 
{
// Body Left = CSV Table
}
 
</>
 
    box-sizing: border-box;
 
{JSX_C02}
<C01_Table 
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
SS_C02={SS_C02}
setSS_C02={setSS_C02}
/>
 

//****************************************************************************
// JSX: C01_Table
//****************************************************************************
    let JSX_C01=<></>
 
    const Ref_Div = useRef<HTMLDivElement | null>(null);
 
let let_C01=(document.getElementById('C01id_H')as HTMLAreaElement)!
        if(let_C01.offsetWidth<175){
            setSS_C02(false)
        }
 
        else{
            setSS_C02
        }
 
        // function f_Resize() {
        //     setSS_Width(let_C01.offsetWidth)}
        // let_C01.addEventListener("resize", f_Resize);
        // f_Resize();
        // return () => let_C01.removeEventListener("resize", f_Resize);
 
    // https://stackoverflow.com/questions/71457792/resize-event-in-react
    const [SS_Width, setSS_Width] = useState(0);
 
            //let_C01.style.display='none'
 
            //let_C01.style.display='block'
 
 onResize={f_Resize}
 
 // Empty array ensures that effect is only run on mount
 
        // Remove event listener on cleanup
 
        // Call handler right away so state gets updated with initial window size
 
        // Add event listener
 
        // Handler to call on window resize
 
            // Set window width/height to state
 
        
 
{
            width: 
 
,
          }
 
            height: window.innerHeight,
 
    return windowSize;}
 
        
 
    useEffect(() => {
        let let_C01H = (document.getElementById('C01id_H') as HTMLInputElement);
        let let_WidthC01=let_C01H!.clientWidth
        if(let_WidthC01<175){
            let_C01H.style.display = 'none';
        }
        else{
            let_C01H.style.display = 'block';
        }
    }, []);
 
(document.getElementById('C01id_H') as HTMLInputElement)!.clientWidth
 
alert(
 
    if()
 
    const JSX_Input=ss_Columns.map((Column)=>{
        return (
            <td>{Column.Name}</td>
        )
    })
 
    height:74vh;
 
    position:absolute;
 
8px
 
    height:70vh;
 
    height:70vh;
 
    position:absolute;
    margin-top:30px;
 
    position:absolute;
    margin-top:30px;
 
    position:absolute;
 
height:let_tBodyHeight.toString()+'px'
 
    let let_tBodyHeight:number=0
 
        const tbody = document.getElementById('C02id_Height')
        const windowHeight = window.innerHeight;
        const divTableHeight = (document.querySelector('#C01id_Div')as HTMLInputElement)?.offsetHeight;
        const tbodyHeight = windowHeight - divTableHeight;

        if (tbody) {
            alert(divTableHeight)
            tbody.setAttribute("height", tbodyHeight.toString()+'px;');
            //tbody.style.height = tbodyHeight.toString()+'px;'
        }
 
 tbody
 
        let_tBodyHeight=(document.getElementById('C01id_Table')as HTMLInputElement).offsetHeight;
        alert(let_tBodyHeight)
        /*
 
100px
 
    height:100px;
 
    height:100px;
 
    height:100vh;
 
    height:70vh;
 
flex: 1;
 
    flex:1;
 
    height:760px;
 
#C01id_Table 
 
</div>
 
<div style={{overflowY:'auto'}}>
 
</div>
 
{
// Data
JSX_TH_Rows}
 
style={{overflowY:'auto'}}
 
overflow-y: auto;
 
    max-height:100vh;
    overflow-y: auto;
 
calc(50% - 450px);
 
    let let_Width:string='50%'
 
 style={{width:let_Width}}
 
        let_Width='50%'
 
        let_Width='calc(50% - 450px);'
 
    max-width: 50%;
 
calc(50% - 450px);
 
:string
 
width:
 
width:calc(50% - 450px);
 
    max-width: 50%;
 
    box-sizing: border-box;
 
        /* Limit the width to 50% of the window */
 
 style={{width:'450px'}}
 
    display: flex;
 
    border-color: red;
 
</div>
 
/*
 
*/
 
0
 
#C02id_Div {
    width: 450px;
}
 
<C02_Input
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
 
{JSX_Button}
 
/*onClick={()=>f_DSort(true)}*/
 
/*
 
<td><button className='C01id_Header' /*onClick={()=>f_DSort(true)}*/>Close Input Tab</button></td>
 
    /*
    function f_Rename():void{
        let let_NewName:string= (document.getElementById(C01id_Rename)as HTMLInputElement).value 
        let ss_Row:TS_Row[]=[...SS_Row]
        let let_UpdateColumns:TS_Row[]=U01_EditRow(THISROW,ss_Row,let_NewName)
        setSS_Row(let_UpdateColumns);
        // https://stackoverflow.com/questions/11688692/how-to-create-a-list-of-unique-items-in-javascript
    }

//****************************************************************************
// FUNCTION_02: Delete Column
//****************************************************************************
    function f_OpenDelete():void{
        f_Display(2)
    }
    function f_Delete():void{
        // https://youtu.be/XtS14dXwvwE?si=rYQOe_tJbxmSnDWE
        let ss_IndexColumns:number[] = SS_IndexColumns
        for(let i:number=0;i<ss_IndexColumns.length;i++){
            if(ss_IndexColumns[i]===THISROW.Key){
                ss_IndexColumns.splice(i, 1);
            }
        }

        let ss_Row:TS_Row[] = [...SS_Row];
        let let_UpdateColumns:TS_Row[]=D01_DeleteColumnName(THISROW,ss_Row)
        setSS_Row(let_UpdateColumns);
        setSS_IndexColumns(ss_IndexColumns);
    }
*/
 
:bool
 
const [SS_C02,setSS_C02]=useState<boolean>(false)
 
<C02_Input
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
 
    margin-left: auto;
 
, useEffect
 
//
 
    function f_Sort(property:any):any{
        // https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value
        let let_SortOrder:number = 1;
        if(property[0] === "-") {
            let_SortOrder = -1;
            property = property.substr(1);
        }
        return function(a:any,b:any){
            let let_Result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;
            return let_Result * let_SortOrder;
        }
    }
    /*
    function f_DSort(IsD:boolean):void{
        // Get the Alphabet Name Order of SS_Row
        let ss_Row:TS_Row[] = [...SS_Row]
        SS_Row.sort(f_Sort("Name"));
        if(IsD===true){SS_Row.reverse();}
        // https://www.w3schools.com/jsref/jsref_sort.asp
        // https://stackoverflow.com/questions/11182924/how-to-check-if-javascript-object-is-json
        
        // Update SS_IndexColumns
        setSS_IndexColumns(SS_Row.map((Column)=>Column.Key))
    }
    */
 
    margin-left: auto;
 
<C02_Input
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
 
    float: right;
    position: relative;
 
float:right;
 
#C01id_DivTable{
}
 
    overflow: auto;
 
    height: 300px;
 
#C02id_Div1 table {
    height: 300px;
}
 
    height:100vh
 
    height: 100vh;
 
    position:absolute
 
.C01id_EditRowButton button {
    height: 30px;
    width: 100vh;
    font-size: 16px;
    margin-right: 1px;
    margin-left: 1px;
}
 
.C01id_EditRowButton button {
    height: 30px;
    width: 100vh;
    font-size: 16px;
    margin-right: 1px;
    margin-left: 1px;
}
 
.C01id_SortButton input {
    height: 30px;
    font-size: 16px;
}
 

/************************************************************************************************
// C_ColumnButton.tsx
************************************************************************************************/
.C01id_SortButton {
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
}

.C01id_SortButton button,
.C01id_SortButton button {
    width: 100%;
    height: 100%;
}

.C01id_SortButton input {
    height: 30px;
    font-size: 16px;
}
 
.C01id_SortButton input{
    height:30px;
    font-size:16px;
}
 
}

tbody {
 
    --let_DivHeight: 500px;
 
tbody {
    height: var(--let_DivHeight);
}
 

#C01id_Table table{
    height:100vh
}
 
#C01id_Table table
 
import './index02.css'; // | index.jsx    | 0 |
 
#C01id_Div {
    display: flex;
    background-color: #c794e3;
    height:500px;
}

#C01id_H{
background-color:#555555;
}
 
-----------------------------+--------------+
 

</div>
 
<div id='C01id_Div'>
{/*
// Input tab
<C_Input
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
*/}
 
//import './C_Row.css'
 
import './index03.css'; // | C_input.jsx  | 1 | Row input                   | C01ids  
 
import C_Input from './Coms/C_Input';
 
{
// Image
}
<div
style={{
    width:'600px',
    height:'100vh',
    backgroundColor:'blue',
}}
>cec</div>
 
<C02_Input
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
 
={setSS_EditColumn}

 
={SS_EditColumn}
 
 [SS_Reset,setSS_Reset]=useState<number>(0)
 
    // Reset Column List after Update Column List (Create, Rename, Delete, Filter and Sort)
    // https://stackoverflow.com/questions/56649094/how-to-reload-a-component-part-of-page-in-reactjs
    // const
 
//****************************************************************************
// HOOK
//****************************************************************************
    const [SS_EditColumn,setSS_EditColumn]=useState<0|1>(0)
 
}
 
    display:'grid'
 
<div
style={{
    width:'600px',
    height:'100vh',
    backgroundColor:'blue',
    display:'grid'
}}
>cec</div>
 
<div
style={{
    width:'600px',
    height:'100vh',
    backgroundColor:'blue',
    display:'grid'
}}
>cec</div>
 
{
// Input tab
}
<C_Input
SS_Row={SS_Row}
setSS_Row={setSS_Row}
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_EditColumn={SS_EditColumn}
setSS_EditColumn={setSS_EditColumn}
/>
 
        // Iterate through each input element and set its value to ''
 
        // Get all input elements in the DOM
 
            
 
        f_ResetInput()
 
        f_ResetInput()

 
        f_ResetInput()
 
        f_ResetInput()
 
        f_ResetInput()
 
        f_ResetInput()
 
        f_Open(THISCOLUMN,0)
 
        alert(JSON.stringify(SS_Columns))
        f_Open(THISCOLUMN,0)
 
        alert(JSON.stringify(SS_Columns))
        f_Open(THISCOLUMN,0)
 
        alert(JSON.stringify(let_UpdateColumn))
        alert(JSON.stringify(SS_Columns))
 
    useEffect(() => {
  // Code to run after SS_Columns state is updated
}, [SS_Columns]); 
 
        alert(JSON.stringify(let_UpdateColumn))
        alert(JSON.stringify(SS_Columns))
 
        alert(let_Input)
 
.C01id_SortButton input
 
:root{
    --let_Width:500px;
}
 
width:ver(--let_Width)
 
style={{paddingTop:'5px',paddingBottom:'5px'}}
 
style={{paddingTop:'5px',paddingBottom:'5px'}}
 
paddingBottom:'5px',
 
paddingTop:'5px',
 
,float:'left'
 
style={{float:'left'}}
 
display:'flex;',
 
 style={{width:'75px;',marginLeft:'5px;'}}
 
style={{margin:5}}
 
<div style={{display:'flex;',float:'right'}}>
                <button onClick={()=>f_Rename(Column)}>Ok</button>
                <button onClick={()=>f_Open(Column,0)} style={{width:'75px;',marginLeft:'5px;'}}>Cancel</button>
                </div>
 
Change 
 
lineHeight:css_LineHeight
 
 paddingTop: '0px', paddingBottom: '0px', marginTop: '0px' ,
 
div
 
div
 

/************************************************************************************************
// C_Row.tsx
************************************************************************************************/

 
.C01id_HeightLightRow {
    background-color: rgb(100, 100, 200);
}

.C01id_HeightLightRow input {
    font-size: var(--let_Font02);
}
 
#C01id_RenameColumn {
    background-color: #c794e3;
}
 
    display: flex;
    align-items: center;
 
    margin-top: 5px;
 
-buttom
 
            <div className='C01id_CreateRowDiv'>
                <h1>{Column.Name}:   </h1>
            </div>
 
<div className='C01id_CreateRowButton'>
                <button onClick={()=>f_Open(Column,2)}>X</button>
                <button onClick={()=>f_Open(Column,1)}>...</button>
                </div>
 
<button onClick={()=>f_Open(Column,2)}>X</button>
                <button onClick={()=>f_Open(Column,1)}>...</button>
 
    float: left;
 
<button onClick={()=>f_Open(Column,2)}>X</button>
                <button onClick={()=>f_Open(Column,1)}>...</button>
 
    white-space: nowrap;
 
    white-space: nowrap;
    justify-content: space-between;
 
    white-space: nowrap;
    justify-content: space-between;
 
    white-space: nowrap;
    justify-content: space-between;
 
    white-space: nowrap;
    justify-content: space-between;
 
    /* Aligns items with maximum space between them */
 
    /* Aligns items with maximum space between them */
 
import {C01_Create} from '../../T01_Row/C01_Create';
 
import {U01_CreateColumn} from '../../T01_Row/U01_CreateColumn'
 
        let let_ColumnIndex:number=
 
R02_ReturnIndex(THISCOLUMN,ss_Columns)
 
        for(let i=0;i<ss_Rows.length;i++){
            ss_Rows[i].Array.push('-')
        }
 
import {U01_CreateColumn} from '../../T01_Row/U01_CreateColumn'
 
    
 
for(let j=0;j<ss_Rows[i].Array.length;j++){
                
            }
 
        alert()
 
        alert('HelloWorld')
 
.C01id_SortButton {
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
}

.C01id_SortButton button,
.C01id_SortButton button {
    width: 100%;
    height: 100%;
}
 
thead {
    margin-right: 15px;
}

tbody {
    height: var(--let_DivHeight);
}
 
#C01id_Table th {
    background-color: #0481aa;
    color: rgb(255, 255, 255);
}

#C01id_Table th:not(#C01id_Table th:first-child, #C01id_Table th:last-child) {
    padding-top: 5px;
    padding-bottom: 5px;
    width: var(--let_RowWidth);
    height: 40px;
}

#C01id_Table td:not(#C01id_Table td:first-child, #C01id_Table td:last-child) {
    padding-top: 5px;
    padding-bottom: 5px;
    width: var(--let_RowWidth);
}
 
, index.tsx
 
, Right Table
 
Specific for C01id_Div2, 
 
    display: flex;
 
    width: 200px;
 
.C01id_EditRowButton {
    width: 200px;
    display: flex;
}
 
.C01id_EditRowButton {
    width: 200px;
    display: flex;
}
 
    background-color: aquamarine;
    height: 500px;
 
    width: 100%;
 
 | 1 | Row input                   |              |
 
| index.jsx    | 1 | Right Main Table            | 
 
| index.jsx    | 
 
 | All                         | C01id_Div    |
 

/************************************************************************************************
// C01id_Div2 Table Header
************************************************************************************************/

.C01id_DivHeader {
    display: flex;
}

.C01id_Header {
    background-color: rgb(255, 255, 255);
    font-size: 16px;
    margin-left: 5px;
}
 
    overflow-y: auto;
 

thead {
    margin-right: 15px;
}

 
    height: 500px;
 
/*
https: //stackoverflow.com/questions/17067294/html-table-with-100-width-with-vertical-scroll-inside-tbody
https: //stackoverflow.com/questions/11759934/aligning-divs-beside-each-other-and-adding-an-horizontal-scrollbar-in-html
*/
 
.C01id_HeightLightRow {
    background-color: rgb(100, 100, 200);
}

.C01id_HeightLightRow input {
    font-size: 18px;
}

 
    white-space: nowrap;
    justify-content: space-around;
 
    white-space: nowrap;
    justify-content: space-around;
 
    padding-top: 5px;
    padding-bottom: 5px;
    width: 300px;
 
    padding-top: 5px;
    padding-bottom: 5px;
    width: 300px;
    height: 40px;
 
/*
#C01id_Table td:first-child,
#C01id_Table th:first-child{
    width:60px;
}
#C01id_Table td:last-child,
#C01id_Table th:last-child{
    width:120px
}
*/
 
#C01id_Table th {
    background-color: #0481aa;
    color: rgb(255, 255, 255);
}
 
    margin: 0px;
    padding: 0px;
 
    height: 40px;
    width: 300px;
 
    margin-right: 2px;
    margin-left: 2px;
    font-size: 16px;
 
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
 
.C01id_Left {
    width: 100px;
}
 
    height: 100%;
 
    font-size: 16px;
 
    background-color: #0481aa;
 
.C01id_RightEmpty {
    width: 200px;
}
 

.C01id_SortRight {
    margin: 0px;
    padding: 0px;
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
    height: 100%;
    width: 200px;
}
 

.C01id_SortRight {
    margin: 0px;
    padding: 0px;
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
    height: 100%;
    width: 200px;
}
 
#C01id_Table td,
#C01id_Table th {
    border: 1px solid #000000;
    padding: 1px;
}

#C01id_Table tr:nth-child(even):not(.C01id_HeightLightRow) {
    background-color: #f2f2f2;
}

#C01id_Table tr:hover {
    background-color: rgb(120, 159, 85);
}

 
#C01id_Table th {
    height: 30px;
}

#C01id_Table td {
    height: 0px;
}
 
    overflow-x: auto;
 
    table-layout: fixed;
 
    border-collapse: collapse;
 
    height: 25px;
 
    max-height: 20px;
 
#C01id_Table {
    /*
    https: //stackoverflow.com/questions/5671098/how-can-i-force-all-rows-in-a-table-to-have-the-same-height
    */
    border-collapse: collapse;
    height: 25px;
    table-layout: fixed;
    max-height: 20px;
    overflow-x: auto;
}
 
.C01id_P {
/*
* https://www.w3schools.com/cssref/pr_text_white-space.php
* https://stackoverflow.com/questions/2787310/how-to-reduce-the-space-between-p-tags
*/
    white-space: nowrap;
    margin: 0;
    background-color: 'red';
}
 
.C01id_P {
/*
* https://www.w3schools.com/cssref/pr_text_white-space.php
* https://stackoverflow.com/questions/2787310/how-to-reduce-the-space-between-p-tags
*/
    white-space: nowrap;
    margin: 0;
}
 
#C01id_DivTable {
    margin-top: 0px;
    width: 100%;
}
 
#C01id_DivTable {
    margin-top: 0px;
    width: 100%;
}
 
display: flex;
 
font-size: 16px;
 
margin-right: 1px;
    margin-left: 1px;
 
font-size: 16px;
 
height: 30px;
    font-size: 16px;
 
.C01id_EditRowButton {
    display: flex;
    width: 200px;
}

.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}

 
.C01id_EditRowButton {
    display: flex;
    width: 200px;
}

.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}

 
.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}
 
.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}
 
.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}
 
This file contains only constant value
// Specific C_Input.jsx
 
This file contains only constant value
// Specific C_Input.jsx
 
This file contains only constant value
// Specific C_Input.jsx
 
This file contains only constant value
// Specific C_Input.jsx
 
.C01id_EditRowButton{
    width:200px;
}
 
    width:200px;
 
    width: 200px;
 
// Specific index.jsx part 0
 
General 
 
Specific 
 
  
 
eneral
 
  IsGeneral
 
General 
 
//
 
#C01id_Table {
    /*
    https: //stackoverflow.com/questions/5671098/how-can-i-force-all-rows-in-a-table-to-have-the-same-height
    */
    border-collapse: collapse;
    height: 25px;
    table-layout: fixed;
    max-height: 20px;
    overflow-x: auto;
}

#C01id_Table th {
    height: 30px;
}

#C01id_Table td {
    height: 0px;
}

#C01id_Table td,
#C01id_Table th {
    border: 1px solid #000000;
    padding: 1px;
}

#C01id_Table tr:nth-child(even):not(.C01id_HeightLightRow) {
    background-color: #f2f2f2;
}

#C01id_Table tr:hover {
    background-color: rgb(120, 159, 85);
}
 

.C01id_EditRowButton {
    display: flex;
    width: 200px;
}

.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}

.C01id_EditRowButton input {
    width: 100vh;
}
 
.C01id_EditRowButton {
    display: flex;
    width: 200px;
}

.C01id_EditRowButton button {
    margin-right: 1px;
    margin-left: 1px;
    height: 30px;
    font-size: 16px;
    width: 100vh;
}

.C01id_EditRowButton input {
    width: 100vh;
}
 
import './css00_index.css';
import './css01_C_Input.css';
 
import './css02_index.css';
 
#C01id_Div2 {
    background-color: aquamarine;
    height: 500px;
    width: 100%;
}
 
// C01id_Div2
 
// C01id_Div
 
// C01id_Div1
 
import './css_index.css';
 
 style={{height:css_HeightDiv}}
 
    const css_HeightDiv:number=300
 
    const css_WidthDiv:number=400
 
style={{width:css_WidthDiv}}
 
    margin-left: 10px;
 
    margin-top: 10px;
 
#C01id_Div1 td {
    margin-left: 10px;
}
 
01_
 
    height: 30px;
 
#C01id_Div1 h1 {
    font-size: 18px;
}
 
#C01id_Div1 h1 {
    font-size: 18px;
}
 
.C01id_CreateRowButton button {
    width: 40px;
    height: 20px;
}
 
/************************************************************************************************
// C01id_Div2
************************************************************************************************/
#C01id_Div2 {
    background-color: aquamarine;
    height: 500px;
    width: 100%;
}


.C01id_EditRowButton{
    display:flex;
    width:200px;
}

.C01id_EditRowButton button{
    margin-right: 1px;
    margin-left : 1px;
    height:30px;
    font-size: 16px;
    width:100vh;
}

.C01id_EditRowButton input{
    width:100vh;
}

#C01id_DivTable{
    margin-top: 0px;
    width: 100%;
}

.C01id_P {
/*
* https://www.w3schools.com/cssref/pr_text_white-space.php
* https://stackoverflow.com/questions/2787310/how-to-reduce-the-space-between-p-tags
*/
    white-space: nowrap;
    margin: 0;
}

#C01id_Table{
    /*
    https: //stackoverflow.com/questions/5671098/how-can-i-force-all-rows-in-a-table-to-have-the-same-height
    */
    border-collapse: collapse;
    height: 25px;
    table-layout: fixed;
    max-height: 20px;
    overflow-x: auto;
}

#C01id_Table th{
    height: 30px;
}

#C01id_Table td{
    height: 0px;
}

#C01id_Table td,
#C01id_Table th
{
    border: 1px solid #000000;
    padding: 1px;
}

#C01id_Table tr:nth-child(even):not(.C01id_HeightLightRow) {
    background-color: #f2f2f2;
}

#C01id_Table tr:hover {
    background-color: rgb(120, 159, 85);
}

.C01id_SortRight{
    margin: 0px;
    padding: 0px;
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
    height: 100%;
    width: 200px;
}

.C01id_SortButton {
    margin: 0px;
    padding: 0px;
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
    height: 40px;
    width: 300px;
}

.C01id_SortButton button,
.C01id_SortButton button {
    margin-right: 2px;
    margin-left: 2px;
    font-size: 16px;
    width:100%;
    height: 100%;
}

.C01id_RightEmpty{
    width: 200px;
}
.C01id_Right button{
    font-size: 16px;
    height: 100%;
    background-color: #0481aa;
}
.C01id_Left{
    width:100px;
}
#C01id_Table th{
    background-color: #0481aa;
    color: rgb(255, 255, 255);
}



#C01id_Table th:not(#C01id_Table th:first-child,#C01id_Table th:last-child) 
{
    padding-top: 5px;
    padding-bottom: 5px;
    width:300px;
    height:40px;
    white-space: nowrap;
    justify-content: space-around;
}

#C01id_Table td:not(#C01id_Table td:first-child, #C01id_Table td:last-child){
    padding-top: 5px;
    padding-bottom: 5px;
    width: 300px;
    white-space: nowrap;
    justify-content: space-around;
}
/*
#C01id_Table td:first-child,
#C01id_Table th:first-child{
    width:60px;
}
#C01id_Table td:last-child,
#C01id_Table th:last-child{
    width:120px
}
*/

.C01id_HeightLightRow{
    background-color: rgb(100,100,200);
}

.C01id_HeightLightRow input{
    font-size: 18px;
}

/*
https: //stackoverflow.com/questions/17067294/html-table-with-100-width-with-vertical-scroll-inside-tbody
https: //stackoverflow.com/questions/11759934/aligning-divs-beside-each-other-and-adding-an-horizontal-scrollbar-in-html
*/

thead,
tbody {
    display:block;
}

#C01id_InnerTable{
    width: 100%;
    overflow-x: scroll;
    background-color: antiquewhite;
}

thead{
    margin-right: 15px;
}

tbody {
    height: 500px;
    overflow-y: auto;
}

/************************************************************************************************
// C01id_Div2 Table Header
************************************************************************************************/

.C01id_DivHeader {
    display: flex;
}

.C01id_Header {
    background-color: rgb(255,255,255);
    font-size: 16px;
    margin-left: 5px;
}

 
/************************************************************************************************
// C01id_Div1
************************************************************************************************/
#C01id_Div1 {
    background-color: cadetblue;
}

#C01id_Div1 td {
    display: grid;
}

#C01id_RenameColumn {
    background-color: #c794e3;
}

#C01id_Div1 table {
    display: grid;
    width: 100%;
    overflow-y: scroll;
}

#C01id_Div1 table td{
    width:90%;
}
#C01id_Div1 td {
    margin-left: 10px;
}

#C01id_Div1 button {
    border: 2px solid rgb(0, 0, 0);
    background-color: rgb(255, 255, 255);
    height: 30px;
    margin-right:3px;
}

#C01id_Div1 hr {
    color: red;
    background-color: red;
    height: 2px;
    border: none;
    width: 100%;
}

#C01id_Div1Button {
    margin-top: 10px;
    margin-left: 0%;
    display: flex;
}

#C01id_Div1 h1 {
    font-size: 18px;
}

.C01id_CreateRowDiv {
    display: flex;
    white-space: nowrap;
    justify-content: space-between;
    /* Aligns items with maximum space between them */
    align-items: center;
}

.C01id_CreateColumnDiv{
    display: flex;
    white-space: nowrap;
    justify-content: space-between;
    /* Aligns items with maximum space between them */
    align-items: center;
}

.C01id_CreateColumnDiv input{
    margin-left:10px;
    width:58%;
}

.C01id_CreateRowButton{
    display: flex;
    white-space: nowrap;
    float: right;
}

.C01id_CreateRowButton button{
    width: 40px;
    height: 20px;
}
 
    const css_FontSize01:number=18
    const css_FontSize02:number=16
 
#C01id_Div1 input{
    font-size: 18px;
}
 
style={{fontSize:css_FontSize02}}
 
style={{fontSize:css_FontSize01}}
 
    font-size: 18px;
 
    font-size: 16px;
 
height:300px;
 
_C01idDiv1
 
_
 
    width: 448px;
 
<h3>C01_Table</h3>
 
        f_Open(THISCOLUMN,0)
 
        D02_Delete
 
1id_RenameColumn'+THISCOLUMN.Name)  as HTMLInputElement).value.toString();
 
        let let_Input:string=(document.getElementById('C0
 
    function f_Rename(N:string):void{
        alert(N)
    }
 
,INDEX:number
 
Row
 
else 
 
if (Column.Display===undefined || Column.Display===0)
        {return(
            <tr><td>

            <div className='C01id_CreateRowDiv'>
                <h1>{Column.Name}:   </h1>
                <div className='C01id_CreateRowButton'>
                <button onClick={()=>f_Open(Column,2)}>X</button>
                <button onClick={()=>f_Open(Column,1)}>...</button>
                </div>
            </div>

            <input id={'C01id_Input'+Column.Name}></input>

            </td></tr>
        )}
 
else{
        return (
            <td>
                <div className='C01id_SortButton'>
                    <div style={{whiteSpace: 'normal'}}>
                        Do you want to delete this column?
                    </div>
                    <button style={{width:'90px'}}>Ok</button>
                    <button style={{width:'90px'}} onClick={()=>f_Open(Column,0)}>Cancel</button>
                </div>
            </td>
        )}
 
else if(Column.Display===1){
        return (
            <td>
                <div className='C01id_SortButton'>
                    <input></input>
                    <button>Ok</button>
                    <button onClick={()=>f_Open(Column,0)}>Cancel</button>
                </div>
            </td>
        )}
 
<button onClick={()=>f_Sort(index)}>Sort</button>
 
<button onClick={()=>f_Open(Column,1)}>X</button>
 
,width:'300px'
 
</div>D
 
style={{whiteSpace: 'normal'}}
 
 column
 
 if(Column.Display===1)
 
 style={{width:'100px;',marginLeft:'-50px;'}}
 
 className='C01id_CreateRowButton'
 
className='C01id_CreateRowButton'
 
 style={{width:'100px;',marginLeft:'-50px;'}}
 
want 
 
            <tr className='C01id_HeightLightRow'><td>
            <div className='C01id_CreateRowDiv'>
                <h1>{Column.Name}?</h1>
            </div>
            </td></tr>
            
 
you want to delete {Column.Name}?
 
                <div className='C01id_CreateRowButton'>
                <button onClick={()=>f_Open(Column,2)}>Ok</button>
                <button onClick={()=>f_Open(Column,0)} style={{width:'75px;',marginLeft:'5px;'}}>Cancel</button>
                </div>
 
            <button onClick={()=>f_Open(Column,2)}>Ok</button>
            <button onClick={()=>f_Open(Column,0)} style={{width:'75px;',marginLeft:'5px;'}}>Cancel</button>
                
 
<button onClick={()=>f_Open(Column,2)}>Ok</button>
                <button onClick={()=>f_Open(Column,0)} style={{width:'75px;',marginLeft:'5px;'}}>Cancel</button>
                
 
            <input id={'C01id_Input'+Column.Name}></input>
 
margin-left:'5px'
 
                <input></input>
 
</div>
 
C01id_RenameColumn
 
#C01id_RenameColumn{
    
}
 
            <input id={'C01id_Input'+Column.Name}></input>
 

            <input id={'C01id_Input'+Column.Name}></input>
 
Rename
 
Rename
 
{}
 
Column
 
Column
 
export default {}
 
</>
 
setSS_Display(1)
 
    const [SS_Display,setSS_Display]=useState<0|1|2>(0)
 
    if(SS_Display===1){
        JSX_Input=ss_Columns.map((Column)=>{
        return(
            <h1>Hello {Column.Name}</h1>
        )
    })
    }
 
()=>
 
('C01id_Input'+Column.Name)
 
Column
 
<tr>
<td></td>
<td></td>

</tr>
 
{
// Row Input tab
JSX_Input}
 
<tr>
    <th className='C01id_Left'>Index </th>
    {JSX_ColumnsName}
    <th className='C01id_Right'>Edit  </th>
</tr>
 
</div>
 
<div className='C01id_EditRowButton'><input></input><button>Add Column</button>
 
*/}
 
/*
#C01id_Table td:first-child,
#C01id_Table th:first-child{
    width:60px;
}
#C01id_Table td:last-child,
#C01id_Table th:last-child{
    width:120px
}
*/
 
</div>
 

{
// Table tab
}
 
    /*
    const JSX_TH_Rows:JSX.Element[] = let_Rows.map((Column,index) => 
        {
        // https://stackoverflow.com/questions/44969877/if-condition-inside-of-map-react
        // Default Mode
        if (Column.Display===undefined || Column.Display===0)
        {return <th>{Column.Name}</th>}
        // Rename
        else if (Column.Display===1){
            return <th><input type='text' className='C01id' id={'C01id_Rename'+Column.Key.toString()}></input></th>
        }
        // Delete Warning
        else if (Column.Display===2){
            return  <th >
                    <p className='C01id_P'>Do you want to delete</p> 
                    <p className='C01id_P'>{Column.Name}</p> 
                    </th>
        }
        // Unselect Warning
        else{
            return  <th >
                    <p className='C01id_P'>Do you want to unselect</p> 
                    <p className='C01id_P'>{Column.Name}</p> 
                    </th>
        }
        }
        );
    
    const JSX_BUTTON_Rows:JSX.Element[] = let_Rows.map((Column)=>
        <td>
        <C_DefineColumnButton
            THISROW={Column}
            SS_IndexColumns={SS_IndexColumns}
            setSS_IndexColumns={setSS_IndexColumns}
            SS_Row={SS_Row}
            setSS_Row={setSS_Row}
        />
        </td>
        );
    */
 
<div id='MC_Empty'></div>
 
Button
 
C01id_SortButton 
 
 C01id_Right
 
</tr>
 
<hr />
 
<hr/>
 
.Array
 
Small 
 
//****************************************************************************
// FUNCTION_04: Update
//****************************************************************************

 

.C01id_TableCell{

}
 
width: 100vh;
 
NAME:string,
 
            //alert(let_UpdateRow)
            alert(ss_UpdateRow)
 
let let_UpdateRow=
 
            //alert(let_UpdateRow)
            alert(ss_UpdateRow)
 
.splice(INDEX, 1)
 
ss_UpdateRow.splice(INDEX, 1,NAME)
 
    const [SS_Reset,setSS_Reset]=useState<number>(0)
 

    useEffect(()=>{
        setSS_Reset(Math.random())
    },[SS_UpdateRow])
 
 key={SS_Reset}
 
div 
 
    const [SS_Reset,setSS_Reset]=useState<number>(0)
 
 className={SS_Reset.toString()}
 
            setSS_Reset(Math.random()
 
    //const [SS_UpdatedData,setSS_UpdateData]=useState<string[]>(['','',''])
    useEffect(()=>{
        setSS_UpdateRow(SS_UpdateRow)
    },
    [SS_UpdateRow])
 
        alert(NAME)
 
        alert(let_Input)
 
setSS_UpdateRow(ss_UpdateRow)
 
            let let_OldName:string=ss_UpdateRow[INDEX]
 
ss_UpdateRow[INDEX]
 
SS_UpdateRow
 
        // alert(JSON.stringify(ss_Columns))
        // alert(JSON.stringify(let_UpdateColumns))
        // alert(let_NewColumn.length)
        // alert((ss_Columns!==let_UpdateColumns).toString())
 
        /*
        // https://stackoverflow.com/questions/12989741/the-property-value-does-not-exist-on-value-of-type-htmlelement
        let let_Name:string=(document.getElementById('C01id_InputName')  as HTMLInputElement).value.toString();
        // By ChatGPT
        //let let_Price : number = parseFloat((document.getElementById('C01id_InputPrice') as HTMLInputElement).value);
        //let_Price = isNaN(let_Price) ? 0 : let_Price;
        
        let ss_Row:TS_Row[]=[... SS_Row]
        let let_NewRow:TS_Row={
            Key:0,
            Name:let_Name,
        }
        let let_UpdateRows:TS_Row[]=C_Create(ss_Row,let_NewRow)
        setSS_Row(let_UpdateRows)
        /*
        // Calculate the new SS_Column
        let let_NewName:string=(document.getElementById('C01id_CreateNewColumn') as HTMLInputElement).value.toString();
        let ss_Row:TS_Row[]=[... SS_Row]
        let let_UpdateColumns:TS_Row[]=C_Create(SS_Row,let_NewName)
        
        // Calculate the order of SS_Column inside of C01_Table
        let ss_IndexColumns:number[]=[...SS_IndexColumns]
        let let_UpdateIndexColumns:number[]=[...ss_IndexColumns,let_UpdateColumns[0].Key]
        
        // Update both the SS_IndexColumns and SS_Row
        setSS_IndexColumns(let_UpdateIndexColumns)
        setSS_Row(let_UpdateColumns)
        */
 
JSON.stringify
 
'C01id_Input'+Column
 
/*
 
            let let_Input:string=;
 
(document.getElementById('C01id_Input'+ss_Columns[i])  as HTMLInputElement).value.toString()
 
            let let_Input=document.getElementById('C01id_Input'+ss_Columns[i])
 
        {Key:20, Array:['Aaa','Xedni Wor'            ,'000']},
        {Key:21, Array:['Bbb','Weezer'               ,'001']},
        {Key:22, Array:['Ccc','Tally Hall'           ,'002']},
        {Key:23, Array:['Ddd','Que, The Human Editor','010']},
        {Key:24, Array:['Eee','Human Centipede'      ,'011']},
        {Key:30, Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:31, Array:['Weezer'               ,'Bbb','001']},
        {Key:32, Array:['Tally Hall'           ,'Ccc','002']},
        {Key:33, Array:['Que, The Human Editor','Ddd','010']},
        {Key:34, Array:['Human Centipede'      ,'Eee','011']},
        {Key:40, Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:41, Array:['Weezer'               ,'Bbb','001']},
        {Key:42, Array:['Tally Hall'           ,'Ccc','002']},
        {Key:43, Array:['Que, The Human Editor','Ddd','010']},
        {Key:44, Array:['Human Centipede'      ,'Eee','011']},
        {Key:50, Array:['Xedni Wor'            ,'Aaa','000']},
        {Key:51, Array:['Weezer'               ,'Bbb','001']},
        {Key:52, Array:['Tally Hall'           ,'Ccc','002']},
        {Key:53, Array:['Que, The Human Editor','Ddd','010']},
        {Key:54, Array:['Human Centipede'      ,'Eee','011']},
 
ColumnName
 
export default {}
 
ColumnName
 
.C01id_Right button{
    width:200px;
    color: rgb(255, 255, 255);
}
 
.C01id_Right button{
    width:200px;
    color: rgb(255, 255, 255);
}

 
,
#C01id_Table th:last-child 
 
color: rgb(255, 255, 255);
 
first-child,
#C01id_Table th:last-child
 
    background-color: #0481aa;
    color: rgb(255, 255, 255);
 
:last-child
 
background-color: #0481aa;
 
    background-color: #0481aa;
 
    font-size: 16px;
 
    width: 100%;
 
C01id_RightEmpty
 
<button>Add Column</button>
 
style={{color: "red"}} 
 
style={{display:'none'}}
 
Add Column
 
<button>Add Column</button>
 
className='C01id_UpdateOKButton'
 

.C01id_UpdateOKButton{
    width:100%
}
 
    width:100vh;
 
.C01id_EditRowButton input
 
.C01id_EditRowButton
 
    padding-left:2px;
    padding-right: 2px;
 
    */
 
    /*
 
setSS_Columns(let_UpdateColumns)
 
    /*
 
    white-space: nowrap;
    justify-content: space-around;
 
    grid-template: repeat(5, 300px);
 
let_NEWCOLUMN
 
    white-space: nowrap;
    justify-content: space-around;
 
    white-space: nowrap;
    justify-content: space-around;
 

    justify-content: space-around;
 

    justify-content: space-around;
 
    white-space: nowrap;
 
    white-space: nowrap;
 
    justify-content: space-around;
 
    justify-content: space-around;
 
    width:100%
 
.C01id_RightRow{
    
}
 
SortButton
 
SortButton
 
SortButton
 
 button 
 
    margin-right: 2px;
    margin-left: 2px;
    font-size: 16px;
    height: 30px;
 
*/
#C01id_Table th
 
/*
 
*/
#C01id_Table td
 
 th:not(#C01id_Table th:first-child, #C01id_Table th:last-child)
 
.C01id_SortButton{
    margin:0px;
    padding:0px;
    display: flex;
    white-space: nowrap;
    justify-content: space-around;
    align-items: center;
    height: 100%;
    width:500px;
}

.C01id_SortButton button{
    margin-right: 2px;
    margin-left:  2px;
    font-size: 16px;
    height:30px;
}

 
#C01id_Table th
/* 
 
/* 
 
    width:10px
 
    width: 100%;
 
    width:100%;
    height:100%
 
</div>
 
</div>
 
    width: 100%;
        height: 100%;
 
-columns
 
    grid-template-rows: 300px repeat(8, 80px) 300px;
 
:not(#C01id_Table td:first-child, #C01id_Table td:last-child)
{
 
:not(#C01id_Table th:first-child, #C01id_Table th:last-child) 
 
#C01id_Table td:not(#C01id_Table td:first-child,#C01id_Table td:last-child){
    padding-top: 5px;
    padding-bottom: 5px;
    width:300px;
}
 
#C01id_Table th,
#C01id_Table td {
    display:grid;
    text-align: left;
    padding: 8px;
}
 
    border: 1px solid #dddddd;
 
    display: block
 
    display:block
 
    display: flex;
    flex-direction: column;
 
    display: block
 
    display:block
 
block
 
    display:block
 
<tr><td></td><td>i</td></tr>
<tr><td></td><td>i</td></tr>
 
    position:absolute
 
<tr></tr>
<tr></tr>
 
    display: inline-block;
 
    float: left;
 
New 
 
    white-space: nowrap;
 
#C01id_Table th:last-child,
 
#C01id_Table td:last-child,
#C01id_Table th:last-child
 
    overflow-y: auto;
 
width: 100%;
 
</div>
 
    background-color: bisque;
 
    float: left;
 
    overflow-y: auto;
 
inline-
 
    position: absolute;
 
    display:block
 
position: absolute;
 
inline-
 
    display: block;
 
    display: grid;
 
display: block;
 
display: block;
 
    display: block;
 
    margin-right:12px
 
#C01id_Table table {
    overflow-x: scroll;
    width: 500px;
}
 
#C01id_Table table{
    overflow-x: scroll;
    width:500px;
}
 
#C01id_Div1 table{
    overflow-x: scroll;
    width:100px;
}

 
overflow-x:auto;
 
    width: 1200px;
 
overflow-x:auto;
 
    width: 1200px;
 
width:100%;
 
    width: 140px;
 
    width: 140px;
 
    width:220px;
 
    width:220px;
 
    width: 100%;
 
    width: 100%;
 
    width: 100%;
 
    width:100%;
 
    width: 1200px;
 
    width:90%;
 
    width: 400px;
 
    width: 100%;
 
    display: grid;
 
    width: 1000px;
 
    width: 100px;
 
        width: 1000px;
 
    width: 1000px;
 
    height: 500px;
    overflow-y: auto;
 
    width: 1000px;
 
    width: 1000px;
 
overflow-x: auto;
 
#C01id_Table td:first-child {
    width: 50px;
}
 
    width:100%;
 
    /* Just for the demo          */
 
    /* Trigger vertical scroll    */
 
    /* Hide the horizontal scroll */
 
vh
 
    overflow-x: scroll;
 
<thead>
 
</thead>
 
</tbody>
 
overflow-y: scroll;
 
let_NEWCOLUMN
 
Column
 
.Name
 
.Name
 
                Key: let_NewKey,    
 
[]
 
    */
 
    // Generate New Key
    let let_NewKey:number = Math.random()
    while(ROWS.map(ROW=>ROW.Key).includes(let_NewKey)===true){
        let_NewKey = Math.random()
    }
    // Add New Column in List of All Columns
    // https://stackoverflow.com/questions/31048953/what-are-these-three-dots-in-react-doing
    const let_NewROW:TS_Row={
        Key: let_NewKey,    
        Array: NEWROW,
        }
    return [let_NewROW,...ROWS]
    // We might check the length of the element inside array later.

    /*
 

export default {}
 

        let let_Name:string
 
 onClick={f_ResetInput}
 
 button
 
    /* Aligns items with maximum space between them */
    align-items: center;
 
    justify-content: space-between;
 
<hr />
 
<div>
<input></input>
<button>Add New Column</button>
</div>
 
<hr />
 
<hr />

<div>
<input></input>
<button>Add New Column</button>
</div>
 
<div>
<input></input>
<button>Add New Column</button>
</div>
 

#C01id_Table table{
    overflow-y: scroll;
}

 
overflow-y: scroll;
 
overflow-y: scroll;
 
overflow-y: scroll;
 
</table>
 
<table>
 
</table>
 
    overflow-y: scroll;
 
overflow-y: scroll;
 
overflow-y: scroll;
 
    scroll-
 
:string[]
 
,'Price','Amount'
 
string
 
    margin-top: 10px;
 
</div>
 
<input></input>
 
background-color: #000000;
 
    float: right;
    justify-content: flex-end;
 
float:right;
    justify-content: flex-end;
 
    justify-content: flex-start;
 
    margin-left: 10px;
 
</div>
 
<h1>{Column}:   </h1>
 
<h1>{Column}:   </h1>
 
    margin-left:10px;
    padding: 0px;
 
<input id={'C01id_Input'+Column}></input>
 
</div>
 
        */
 
        alert('Hello')
        /*
 
        // https://stackoverflow.com/questions/11182924/how-to-check-if-javascript-object-is-json
 

//****************************************************************************
// FUNCTION_01: Sort SS_Row
//****************************************************************************
    function f_DSort(COLUMN:string):void{
        // Get the Alphabet Name Order of SS_Row
        let ss_Row:TS_Row[] = [...SS_Row]
        ss_Row.sort(f_Sort(COLUMN));
        if(SS_IsD===true){
            ss_Row.reverse();
            setSS_IsD(false)
        }
        else{
            setSS_IsD(true)
        }
        
        
        
        // Update SS_IndexColumns
        setSS_Row(ss_Row)
    }
 
/*
*/
 
/*
 

    /*
        // Check duplicate Column Name
        if(ROWS.map(Column=>Column.Name).includes(NEWNAME)===false){
            // Replace the previous name (the name with selected key) with new name
            for(let i:number=0;i<ROWS.length;i++){
                if(ROWS[i].Key===THISROW.Key){
                    ROWS.splice(i, 1,{
                    Key: THISROW.Key,
                    Name: NEWNAME, 
                });
                }
            }
            return ROWS
        }
    return ROWS
    */
 
/*
 
/*
 
.Array
 
    let 
 
/*
 
//****************************************************************************
// JSX_00: JSX_SubRow
//****************************************************************************
 
    const ss_Row=[...SS_Row]
    const JSX_Row_TD=ss_Row.map((Row)=>{
        let JSX_R=[]
        return (
            <td>{Row.}</td>
        )
    }
    )
 
        for(let i=0;i<Row.Array.length;i++){
            JSX_R.apprnd()
        }
 
        Row.Array.map()
 
return (
            <td>{Row.}</td>
        )
 
index
 
<td><div className='C01id_SortButton'><button onClick={()=>f_DSort('Name')}>Sort</button><button>Rename</button><button>Type</button><button>X</button></div></td>
 
et
 
        let_Amount = isNaN(let_Amount) ? 0 : let_Amount;
 
        let let_Amount:number = parseFloat((document.getElementById('C01id_InputAmount') as HTMLInputElement).value);
 
    <td><div className='C01id_SortButton'><button onClick={()=>f_DSort('Price')}>Sort</button><button>Rename</button><button>Type</button><button>X</button></div></td>
    <td><div className='C01id_SortButton'><button onClick={()=>f_DSort('Amount')}>Sort</button><button>Rename</button><button>Type</button><button>X</button></div></td>
 
    <th>Price </th>
    <th>Amount</th>
 
                    Price: THISROW.Price,
                    Amount: THISROW.Amount
 
                Price: NEWROW.Price,
                Amount:NEWROW.Amount
 
    <td>{THISROW.Price}</td>
    <td>{THISROW.Amount}</td>
 
    <td>{THISROW.Price}</td>
    <td>{THISROW.Amount}</td>
 
    <td>{THISROW.Price}</td>
    <td>{THISROW.Amount}</td>
 
    <td>{THISROW.Price}</td>
    <td>{THISROW.Amount}</td>
 
            Price :let_Price ,
            Amount:let_Amount,
 
        // DEFAULT: have no default
                        // Unique Column Name 
                        // (Less than 50 letters)
    Price :number,
    Amount:number,
 
        // DEFAULT: have no default
                        // Unique Column Name 
                        // (Less than 50 letters)
    Price :number,
    Amount:number,
 
const [SS_Row,setSS_Row]=useState<TS_Row[]>([
        {Key: 0, Name: 'Xedni Wor'            ,Price:1.7,Amount:11.7},
        {Key: 1, Name: 'Weezer'               ,Price:2.0,Amount:12.0},
        {Key: 2, Name: 'Tally Hall'           ,Price:3.2,Amount:33.2},
        {Key: 3, Name: 'Que, The Human Editor',Price:5.1,Amount:15.1},
        {Key: 4, Name: 'Human Centipede'      ,Price:4.5,Amount:34.5},
        ]);
 
Name
 
Column
 
<input></input>
 
Create 
 
Create 
 
    <th>Create New Column</th>
 
    <td><div className='C01id_SortButton'><button onClick={()=>f_DSort('Amount')}>Create New Column</button></div></td>
 
<button>
 
    width:200px;
 
Change 
 
Change 
 
Change 
 
    

    // Copy SS_Column usinf useState, because I want to rememder the index of each object inside SS_Row of C01_Table.
    const [SS_UpdateRow,setSS_UpdateRow]=useState<TS_Row[]>(SS_Row)
    
    useEffect(()=>{
        //alert(JSON.stringify(SS_Row))
        // https://stackoverflow.com/questions/53332321/react-hook-warnings-for-async-function-in-useeffect-useeffect-function-must-ret
        setSS_UpdateRow(SS_Row)
    },[SS_Row])
 
Update
 
<td><div className='C01id_EditRowButton'><button onClick={f_Cancel}>Ok</button></div></td>
    <td><div className='C01id_EditRowButton'><button onClick={f_Cancel}>Cancel</button></div></td>
 
"3"
 
    <td></td>
    <td></td>
    <td>Do you sure you want to delete this row?</td>
 
    <td></td>
 
    <td></td>
 
<h1>
 
<tr className='C01id_HeightLightRow'>
    <td></td>
    <td><div className='C01id_EditRowButton'><input></input><button>Ok</button></div></td>
    <td><div className='C01id_EditRowButton'><input></input><button>Ok</button></div></td>
    <td><div className='C01id_EditRowButton'><input></input><button>Ok</button></div></td>
    <td><div className='C01id_EditRowButton'><button onClick={f_Cancel}>Cancel</button></div></td>
</tr>
 
Edited
 
        //setSS_Display(1)
 
        setSS_Display(0)
 
        //alert('Working')
 
            alert(THISROW.Key)
 
,SS_IndexColumns,SS_PrivateReset
 
,SS_IndexColumns,SS_PrivateReset
 
    const [SS_PrivateReset,setSS_PrivateReset]=useState<boolean>(true)
    // SS_PrivateColumns only updated onces in useEffect.
    // It determine the order of SS_Row
 
        setSS_Display(1)
 
            break;
 
 table 
 
    border-collapse: collapse;
 

.C01id_HeightLightRow tr{
    display:flex;
}
 
    background-color: rgb(100, 100, 200);
 
:not(.C01id_HeightLightRow)
 

#C01id_Table tr:nth-child(even) {
    background-color: #f2f2f2;
}
 
className='C01id_HeightLightRow'
 
    let let_Display:0|1|2|3=0
    if(typeof THISROW.Display!==undefined){
        let_Display!=THISROW.Display
    }
 
0
    
 
<div className='C01id_EditRowButton'></div>
 
<button onClick={f_OpenRename}>Edit</button><button onClick={f_OpenDelete}>X</button>
 
: {INDEX}
 
Editor
 
: {INDEX}
 
<button onClick={f_OpenRename}>Ok</button>
 
<button onClick={f_OpenDelete}>Cancel</button>
 
: {INDEX}
 
</>
 
    const C01id_Rename:string='C01id_Rename'+THISROW.Key.toString()
 
//****************************************************************************
// FUNCTION_00: Change Mode of C_DefineColumn Components for Rename and Delete 
//****************************************************************************

    function f_Display(D:0|1|2|3){
        //let ss_Row:TS_Row[]=[...SS_Row]
        //let let_UpdateColumns:TS_Row[]=U_UpdateDisplay(THISROW,ss_Row,D)
        //setSS_Row(let_UpdateColumns)   
    }

    function f_Cancel():void{
        f_Display(0)
    }

 
/*
 
    let let_DefaultDisplay:0|1|2
    if(THISROW.Display===undefined || THISROW.Display===3){
        let_DefaultDisplay=0
    }else{
        let_DefaultDisplay=THISROW.Display
    }

 
</>
 
</>
 
    SS_IndexColumns:number[],
    setSS_IndexColumns:(S:number[])=>void,
 
    // https://stackoverflow.com/questions/56649094/how-to-reload-a-component-part-of-page-in-reactjs
    SS_IndexColumns,    // Only used in f_Delete
    setSS_IndexColumns,
 
<div 
    className={'C01id'} 
    key={THISROW.Key} 
>
 
</div>
 
import C_DefineColumnButton from './Coms/useless01'
import C_CreateColumn from './Coms/useless00';
 
    let let_NewKey:number=Math.random()
    while(ROWS.map(ROW=>ROW.Key).includes(let_NewKey)===true){
        let_NewKey=Math.random()
    }
 
:number
 
let let_Amount:number = parseFloat((document.getElementById('C01id_InputAmount') as HTMLInputElement).value);
 
et_Price
 

        // Check if the value is a valid number
 
.toString()
 
.toString()
 
alert('Hello The World')
 
        if()
 
)
 
    SS_IndexColumns   :number[],
    setSS_IndexColumns:(S:number[])=>void,
 
    SS_IndexColumns,    // Update the index of Column inside C01_Table
    setSS_IndexColumns, // -
 
<div id='C01id_Div1'>
<table>
<h1 id='C01id_Div1Header'>Create New Row</h1>
<hr/>
<div >
<tr><td><h1>Name:   </h1><input></input></td></tr>
<tr><td><h1>Price:  </h1><input></input></td></tr>
<tr><td><h1>Amount: </h1><input></input></td></tr>
</div>
<hr />
<tr><td>
<div id='C01id_Div1Button'>
<button>Ok</button>
<button>Cancel</button>
</div>
</td></tr>
</table>
</div>
 
<div className='C01id_SortButton'><button onClick={()=>alert('KK')}>Sort</button></div>
 
//****************************************************************************
// FUNCTION_01: Sort Index
//****************************************************************************
    function f_SortIndex(COLUMN:string):void{
        // Get the Alphabet Name Order of SS_Row
        let ss_Row:TS_Row[] = [...SS_Row]
        ss_Row.sort(f_Sort(COLUMN));
        if(SS_IsD===true){
            ss_Row.reverse();
            setSS_IsD(false)
        }
        else{
            setSS_IsD(true)
        }
        // https://www.w3schools.com/jsref/jsref_sort.asp
        // https://stackoverflow.com/questions/11182924/how-to-check-if-javascript-object-is-json
        
        // Update SS_IndexColumns
        setSS_Row(ss_Row)
    }
 
SS_Column
 
import U_DefineTableHeader from './Coms/U_DefineTableHeader'
 
()=>f_DSort()
 
    Column:string,
 
    Column,
 
Name
 
IsD:boolean
 
    SS_IndexColumns,    // Update the index of Column inside C01_Table
    setSS_IndexColumns, // -
 
    SS_IndexColumns   :number[],
    setSS_IndexColumns:(S:number[])=>void,
 
 , useEffect
 
onClick={f_CreateColumn}
 
{/*
//****************************************************************************
// Edited Data
//****************************************************************************
<tr>
    <td>Original: 2</td>
    <td>Coffee</td>
    <td>100</td>
    <td>Delicious</td>
    <td></td>
</tr>
<tr>
    <td>Edited: 2</td>
    <td>Cake</td>
    <td>100</td>
    <td>Delicious</td>
    <td></td>
</tr>
<tr>
    <td>Editor</td>
    <td><button>Edit</button><button>Reset</button></td>
    <td><input></input><button>Ok</button><button>Cancel</button></td>
    <td><input></input><button>Ok</button><button>Cancel</button></td>
    <td><button>Ok</button><button>Cancel</button></td>
</tr>
*/}

{/*
//****************************************************************************
// The Mind Electric
//****************************************************************************
<tr>
    <th>Row Index</th>
    {JSX_TH_Rows}
    <th>Create new column as</th>
</tr>
<tr>
    <td></td>
    {JSX_BUTTON_Rows}
    <C_CreateColumn
// When create new columns
// SS_Column has to be updated
// and we have to calculate the order of new column.
        SS_Row={SS_Row}
        setSS_Row={setSS_Row}
        SS_IndexColumns={SS_IndexColumns}
        setSS_IndexColumns={setSS_IndexColumns}
    />
</tr>
    */}
 

.C01id_SortButtonLong button{
    margin-right: 5px;
    font-size: 16px;
    width: 100%;
    height: 30px
}
 
.C01id_EditRowButton{
    display:flex;
}
 
    <td><div className='C01id_SortButton'><button>Sort</button></div></td>
 
 Time, The Liminal Space Editor'},
 
interested in Homo Sapien, The Insect futuristic human, The Caregiver, Everywhere at the end of Space
 
re, The Khama Universal Police, The Better than Man after Man, The Bug who 
 
 God of Sci Fic, The Realistic Frizer, The Owner of Omnitrix, The Devil of the Futu
 
        //{Key: 3, Name: 'Que, The Human Editor, The Last Alien Bender, The
 
    margin-right: 5px;
 
    border: 1px solid rgb(205, 205, 205, 1);
 
    border-left: 5px solid rgb(205, 205, 205, 0);
    border-right: 5px solid rgb(205, 205, 205, 0);
 
.C01id_DivHeader{
    display: flex;
}

.C01id_Header {
     background-color: rgb(193, 193, 193);
     font-size: 16px;
     border: 1px solid rgb(205, 205, 205, 0);
     border-left: 5px solid rgb(205, 205, 205, 0);
     border-right: 5px solid rgb(205, 205, 205, 0);
}

 

#C01id_Div1Header{
    margin-left:0px;
}
 
    margin-top:0px;
 
    display: grid;
    margin-top:0px;
 

.C01id_Delete{
    font-size: 16px;
}
 
#C01_Button button {
    font-size: 17px;
}
 
    padding-left:5px;

 
    text-align: left;
 
    padding-left:20px;
 
margin-left:20px;
 
    overflow: hidden;
 
#C01id_Table th{
    height: 50px;
    overflow: hidden;
}
 
#C01id_Table table {
    /*
    https: //stackoverflow.com/questions/5671098/how-can-i-force-all-rows-in-a-table-to-have-the-same-height
    */
    border-collapse: collapse;
    width: 100%;
    height: 25px;
    table-layout: fixed;
    max-height: 20px;
}
 
#C01id_Div2{
    width: 500px;
    height:500px;
    overflow-y: scroll;
}
 

#C01id_Div2{
    width: 500px;
    height:500px;
    overflow-y: scroll;
}
 

td.C01id{
    height:0px;
}

 

.C01id_Header {
     background-color: rgb(193, 193, 193);
     font-size: 16px;
     border: 1px solid rgb(205, 205, 205, 0);
     border-left: 5px solid rgb(205, 205, 205, 0);
     border-right: 5px solid rgb(205, 205, 205, 0);
 }
 


.C01id_Header {
     background-color: rgb(193, 193, 193);
     font-size: 16px;
     border: 1px solid rgb(205, 205, 205, 0);
     border-left: 5px solid rgb(205, 205, 205, 0);
     border-right: 5px solid rgb(205, 205, 205, 0);
 }
 


.C01id_DivHeader{
    background-color: #023445;
    position:absolute;
}
 
.C01id {
    font-size: 16px;
    border: 1px solid rgb(205, 205, 205, 0);
    border-left: 5px solid rgb(205, 205, 205, 0);
    border-right: 5px solid rgb(205, 205, 205, 0);
    height: 30px;
    display: flex
}
 
#C01id_Div1 hr{
    color: red;
    background-color: red;
    height: 2px;
    border:none;
    width:100%;
}

#C01id_Div1Button{
    margin-top: 10px;
    margin-left: 0%;
    display:flex;
}

#C01id_Div1 h1{
    font-size: 18px;
}

 
#C01id_Div1 hr{
    color: red;
    background-color: red;
    height: 2px;
    border:none;
    width:100%;
}
 
#C01id_Div1{
    background-color: cadetblue;
    width:200px;
}

#C01id_Div1 td{
    display:grid;
}

#C01id_Div1 table{
    display:grid;
}

#C01id_Div1 td{
    margin-left:10px;
}

#C01id_Div1 button{
    border: 2px solid rgb(0, 0, 0);
    background-color: rgb(255, 255, 255);
    height: 30px;
}

 
#C01id_Div1{
    background-color: cadetblue;
    width:200px;
}
 
#C01id_Div{
    display:flex;
    background-color: #c794e3;
}
 
, The Last Alien Bender, The God of Sci Fic, The Realistic Frizer, The Owner of Omnitrix, The Devil of the Future, The Khama Universal Police, The Better than Man after Man, The Bug who interested in Homo Sapien, The Insect futuristic human, The Caregiver, Everywhere at the end of Space Time, The Liminal Space Editor
 
100000001000000010000000
 
000000010000000100000001000000010000000100000001
 
</div>
 
className='C01id_EditRowButton'
 
<h1>ww</h1>
 
className='C01id_EditRowButton'
 
    border: 2px solid rgb(0, 0, 0);
 
    border: 0px rgb(0,0,0,0);
 
    width: 100px;
    height:40px;
 
td
 
 className='C01id_EditRow'
 
button
 
     border: 2px solid rgb(0, 0, 0);
     background-color: rgb(255, 255, 255);
     height: 30px;
 
#C01id_Div1 button,
 
#C01id_Div1 button,
 
{
    
}

button.C01id {
 
button.C01id{
    border: 2px solid rgb(0, 0, 0);
    background-color: rgb(255, 255, 255);
    height: 30px;
}
 
tr,
 
    margin-left: 10px;
 
    flex:1;
 
className='C01id_hr'
 
id='C01id_Div1'
 
id='C01id_Div1Input'
 
id='C01id_Div1InputHeader'
 
className='C01id_hr'
 
    border: 3px;
 
#C01id_Div1Input{
    background-color: #c794e3;
}

#C01id_Div1InputHeader{
    background-color: aquamarine;
}

 
id='C01id_Div1InputHeader'
 
</div>
 
</div>
 
/*
 
*/
 
</td>
 
<button>Ok</button>
<button>Cancel</button>
 
<button>Ok</button>
<button>Cancel</button>
 
    display:flex;
 
<button>Ok</button>
<button>Cancel</button>
 
<h1>Create New Row</h1>
 
    display: block;
 
    overflow-x: scroll;
 
    overflow-x: scroll;
 
background-color: #023445;
 
    background-color: #023445;
 
</table>
 
</td>
 
</div>
 
Input
 
Input
 
</div>
 
</>
 
<>
 
</>
 
<h1>hh</h1>
 
    function f_Display(
            D:0|1|2|3,
            s_Row:TS_Row[],
            setS_Row:(S:TS_Row[])=>void):void{
        let let_UpdateColumns:TS_Row[]=U_UpdateDisplay(THISROW,s_Row,D)
        setS_Row(let_UpdateColumns)    
    }
 


 

        f_Display(D,ss_Row,setSS_Row)
        
 
,true
 
        IsNewSelect:boolean,
 
ColumnName
 
    setSS_IndexColumns = {setSS_IndexColumns}
 
<td><button className='C01id_Header' onClick={()=>f_DSort(true)}>Descending Sort Columns</button></td>
<td><button className='C01id_Header' onClick={()=>f_DSort(false)}>Ascending Sort Columns</button></td>
 
    setSS_IndexColumns,   // from ../index.js, Sort Column
 
    setSS_IndexColumns:(S:number[])=>void
 
{
/*
 

*/}
 
SS_IndexColumns:number[],
setSS_IndexColumns:(S:number[])=>void,
 
SS_IndexColumns,
setSS_IndexColumns
 
SS_IndexColumns={SS_IndexColumns01}
setSS_IndexColumns={setSS_IndexColumns01}
 
//****************************************************************************
 

    // Index Columns of C01_Table
    const [SS_IndexColumns01,setSS_IndexColumns01]=useState<number[]>(SS_Columns.map(Column=>Column.Key))
    // Index Columns of C02_ColumnName
    const [SS_IndexColumns02,setSS_IndexColumns02]=useState<number[]>(SS_Columns.map(Column=>Column.Key))

//****************************************************************************
// USEEFFECT_00: Update SS_IndexColumns01 and SS_IndexColumns02
//****************************************************************************
    useEffect(() => {
    // Variable
    let ss_IndexColumns:number[]=[...SS_Columns].map(Column=>Column.Key)
//****************************************************************************
    // Add object key inside SS_IndexColumns01 
    for(let i:number=0;i<ss_IndexColumns.length;i++){
        if(SS_IndexColumns01.includes(ss_IndexColumns[i])===false){
            let ss_IndexColumns01 =[...SS_IndexColumns01] 
            setSS_IndexColumns01([...ss_IndexColumns01,ss_IndexColumns[i]]);
        }
    }
//****************************************************************************
    // Add object key inside SS_IndexColumns02
    for(let i:number=0;i<ss_IndexColumns.length;i++){
        if(SS_IndexColumns02.includes(ss_IndexColumns[i])===false){
            let ss_IndexColumns02 =[...SS_IndexColumns02] 
            setSS_IndexColumns02([ss_IndexColumns[i],...ss_IndexColumns02]);
        }
    }
//****************************************************************************
    // Delete undefined SS_IndexColumns01 object
    let let_DeleteTarget01:number[]=[]
    let IsDelete01:boolean=false
    for(let i:number=0;i<SS_IndexColumns01.length;i++){
        const let_Name:TS_Row|undefined=SS_Columns.find(({Key})=>Key === SS_IndexColumns01[i])
        if(typeof let_Name==='undefined'){
            // https://www.tutorialspoint.com/typescript/typescript_array_push.htm
            let_DeleteTarget01.push(SS_IndexColumns01[i])
            IsDelete01=true
        }
    }
    if(IsDelete01===true){
        // https://stackoverflow.com/questions/5767325/how-can-i-remove-a-specific-item-from-an-array-in-javascript
        let ss_IndexColumns01:number[]=[...SS_IndexColumns01]
        let let_UpdateColumns01:number[]=ss_IndexColumns01.filter(Key=>!let_DeleteTarget01.includes(Key))
        setSS_IndexColumns01(let_UpdateColumns01)
        let_DeleteTarget01=[]
        IsDelete01=false
    }
//****************************************************************************
    // Delete undefined SS_IndexColumns02 object
    let let_DeleteTarget02:number[]=[]
    let IsDelete02:boolean=false
    for(let i:number=0;i<SS_IndexColumns02.length;i++){
        const let_Name:TS_Row|undefined=SS_Columns.find(({Key})=>Key === SS_IndexColumns02[i])
        if(typeof let_Name==='undefined'){
            // https://www.tutorialspoint.com/typescript/typescript_array_push.htm
            let_DeleteTarget02.push(SS_IndexColumns02[i])
            IsDelete02=true
        }
    }
    if(IsDelete02===true){
        // https://stackoverflow.com/questions/5767325/how-can-i-remove-a-specific-item-from-an-array-in-javascript
        let ss_IndexColumns02:number[]=[...SS_IndexColumns02]
        let let_UpdateColumns02:number[]=ss_IndexColumns02.filter(Key=>!let_DeleteTarget02.includes(Key))
        setSS_IndexColumns02(let_UpdateColumns02)
        let_DeleteTarget02=[]
        IsDelete02=false
    }
//****************************************************************************
    }, [SS_Columns,SS_IndexColumns01,SS_IndexColumns02]);
 
SS_IndexColumns={SS_IndexColumns01}
setSS_IndexColumns={setSS_IndexColumns01}
 
import { U_IsSelect } from '../../T02_ColumnName/U_IsSelect';
 
                    IsSelect: ThisColumn.IsSelect,
                    IsVisible: true
 
                IsSelect:IsNewSelect,
                IsVisible: true
 
.filter(Column=>
        Column.IsSelect===true
        // https://react.dev/learn/rendering-lists
    ));
 
    const let_Columns:TS_ColumnName[] = ([...SS_PrivateColumns].filter(Column=>
        Column.IsSelect===true
        // https://react.dev/learn/rendering-lists
    ));
 
    // Drag and Drop Columns
    const Ref_DragColumn = useRef<number>(0)
    const Ref_DragOverColumn = useRef<number>(0)
 
/*
 
//****************************************************************************
 
//****************************************************************************
// JSX_01: Testing, Debugging
//****************************************************************************
    const JSX_TestColumn:JSX.Element[] = SS_Columns.map((Column)=>
        <tr>
        <td>{Column.Name}</td>
        <td>|{Column.Key}</td>
        <td>|{Column.IsSelect.toString()}</td>
        <td>|{Column.IsVisible.toString()}</td>
        </tr>
        );
    function JSXName(ThisKey:number):string{
        const let_Name=SS_Columns.find(({Key})=>Key === ThisKey)
        if (let_Name===undefined){
            return 'undefined'
        }
        else{
            return let_Name.Name
        }
    }
    const JSX_TestColumn01:JSX.Element[] = SS_IndexColumns01.map((Key)=>
        <div>
        <td>* {Key}</td>
        <td>| {JSXName(Key)}</td>
        </div>
        );
    const JSX_TestColumn02:JSX.Element[] = SS_IndexColumns02.map((Key)=>
        <div>
        <td>* {Key}</td>
        <td>| {JSXName(Key)}</td>
        </div>
        );
    
    const JSX_DivTestColumn:JSX.Element=<
div id='Body' >
<hr/>
    <div>
    <h1>Testing (Main)</h1>
    <h2>Length:{SS_Columns.length}</h2>
    {JSX_TestColumn}
    </div>
<hr/>
    <div>
    <h1>JSX_TestColumn01</h1>
    <h2>Length:{SS_IndexColumns01.length}</h2>
    {JSX_TestColumn01}
    </div>
<hr/>
    <div>
    <h1>JSX_TestColumn02</h1>
    <h2>Length:{SS_IndexColumns02.length}</h2>
    {JSX_TestColumn02}
    </div>
<hr/>
</div>
 
    IsSelect:boolean,   // DEFAULT: false
                        // Is the Column display in C01_Table
                        // const [SS_IsSelect,setSS_IsSelect]=useState<boolean>(false)

    IsVisible:boolean,  // DEFAULT: true
                        // Is the Column display in C02_Column
                        // If the column satisfy 1 of 3 conditions
                        // 1. Consist of SS_Filter in their name
                        // 2. New Column 
                        // 3. Renamed Column 
                        // Then it is visible in C02_Column and IsVisible = true
 
// f_DSort is used for sort SS_Column in Alphabet order
// We want to access SS_Columns.Name,
// so that we can calculate valid SS_IndexColumns
    SS_Columns    = {SS_Columns}
    setSS_IndexColumns = {setSS_IndexColumns}

 
<button>Edit</button><button>X</button>
 
<button>Edit</button><button>X</button>
 
: 2
 
<input></input>
 
<button>Sort</button>
 

{
/*
 
{JSX_TH_Columns}
 
</tr>
 
</tr>
 
    <th>Row Index</th>
 
<tr>
    <th>Row Index</th>
    {JSX_TH_Columns}
    <th>Create new column as</th>
</tr>
 
<button>...</button>
 
<td><button className='C01id_Header' /*onClick={()=>f_DSort(true)}*/>Import Data</button></td>
 
<td><button className='C01id_Header' /*onClick={()=>f_DSort(true)}*/>Export Filtered Data</button></td>
<td><button className='C01id_Header' /*onClick={()=>f_DSort(true)}*/>Rename Table</button></td>
<td><button className='C01id_Header' /*onClick={()=>f_DSort(true)}*/>Inspecting Table</button></td>
 
        
 
            draggable
            onDragStart={()=>{Ref_DragColumn.current=index}}
            onDragEnter={()=>{Ref_DragOverColumn.current=index}}
            onDragEnd={()=>f_Drag()}
            onDragOver={(e)=>e.preventDefault()}
 

//****************************************************************************
// FUNCTION_01: Drag and Drop Column
//****************************************************************************
    // https://youtu.be/_nZCvxJOPwU?si=ixJXOlrb40z19L2p
    function f_Drag():void{
        let ss_IndexColumns:number[]=SS_IndexColumns
        const let_DragColumnCurrent:number=ss_IndexColumns[Ref_DragColumn.current]
        ss_IndexColumns[Ref_DragColumn.current] = ss_IndexColumns[Ref_DragOverColumn.current]
        ss_IndexColumns[Ref_DragOverColumn.current] = let_DragColumnCurrent
        setSS_IndexColumns(ss_IndexColumns)
        setSS_PrivateReset(true)
    }
 
//****************************************************************************
// FUNCTION_02: Utility, Will Develop Later
//****************************************************************************
    function f_OpenSetting():void{
        let ss_Columns:TS_ColumnName[] = [...SS_Columns];
        //alert(JSON.stringify(list))
        alert(ss_Columns.length)
        // https://stackoverflow.com/questions/5612787/converting-an-object-to-a-string

        // * [C]: Create Copy Column
        // * [R]: Filter Data
        // * [R]: Inspect Column
        // * [R]: Data Visualization with Filter Condition
        // * [U]: Transform Column
        // * [U]: Replace Data
        // * [U]: Delete Data with Filter Condition
    }

 
<button className={'C01id'} onClick={f_OpenSetting}>...</button>
 
else if (let_DefaultDisplay===3){
        JSX_Column=
<>
<button className={'C01id'} onClick={f_UnSelect}>OK</button>
<button className={'C01id'} onClick={f_Cancel}>Cancel</button>
</>
    }
 
<button className={'C01id'} onClick={f_OpenDelete}>X</button>
 
<button className={'C01id'} onClick={f_OpenUnselect} id={C02id_CheckButton} style={{backgroundColor: "white"}}>X</button>
 
//****************************************************************************
// FUNCTION_03: Unselect Column
//****************************************************************************
    const C02id_CheckButton:string = 'C01id_CheckButton'+ThisColumn.Key.toString()
    function f_OpenUnselect():void{
        f_UpdateDisplay(3)
    }

    function f_UnSelect():void{
        // https://react.dev/learn/responding-to-events#preventing-default-behavior
        // https://www.w3schools.com/jsref/met_document_getelementbyid.asp
        let ss_Columns:TS_ColumnName[]= [...SS_Columns];
        let let_UpdateColumn:TS_ColumnName[]=U_IsSelect(ss_Columns,false,undefined,ThisColumn)
        setSS_Columns(let_UpdateColumn);
        // https://stackoverflow.com/questions/11688692/how-to-create-a-list-of-unique-items-in-javascript
    }
 
    //      3|  // UnSelect JSX Column| f_OpenUnSelect => let_DefaultDisplay(3) => Open UnSelect JSX Column
 

// ColumnName Panel
<C02_ColumnName 
SS_Columns={SS_Columns}
setSS_Columns={setSS_Columns}
SS_IndexColumns={SS_IndexColumns02}
setSS_IndexColumns={setSS_IndexColumns02}
/>

// Table Panel
 
// 
 
//
 

// <P00_Header/>

//<div id='Body' >

// ColumnName Panel
// <C02_ColumnName 
// SS_Columns={SS_Columns}
// setSS_Columns={setSS_Columns}
// SS_IndexColumns={SS_IndexColumns02}
// setSS_IndexColumns={setSS_IndexColumns02}
// />

// Table Panel
// <C01_Table 
// SS_Columns={SS_Columns}
// setSS_Columns={setSS_Columns}
// SS_IndexColumns={SS_IndexColumns01}
// setSS_IndexColumns={setSS_IndexColumns01}
// />

// </div>
//****************************************************************************

// <>
// <P00_Header/>
// <P01_Panel/>
// </>
 
import TS_ColumnName from "./T02_ColumnName/An_Index";
 
import C02_ColumnName from "./C02_ColumnName";
import P00_Header from './P00_Header'
import P01_Panel from './P01_Panel_H/index'
 
eng+
 
'/Users/imac/Desktop/SoloOpenSourceProject/JOCR/TestImage/Expenses_Macro/IMG_7553.jpeg'
 
img=img[:,200:1000]
 
ShowMustGoOn(img)
 
#img=Image.open(img)
 
txts.append(txt)
 
txts=[]
 
'''
 
    
 
for path in paths:
    # Modify image
 
print('Hii')
 
img = get_grayscale(img)
 

Hellp
 
Day 17
* Learn how to create hook 
* Try to avoid creating nested component, but it does not works, even with the help of chat gpt 
* 
To Do Now (Read and fix this)
 * Create custom hook 
 * avoid nested component
1. https://blog.webdevsimplified.com/2019-11/how-to-write-custom-hooks/?fbclid=IwAR11CqBKZB1UttksdQe_VEOWClHARAHaRP7LfEHwTC9YwMIz--ha3DvNAXc
2. https://youtu.be/b0IZo2Aho9Y?si=Fu1eHkhY29AigPgA
3. https://youtu.be/TNhaISOUy6Q?si=MewpxqgUjrDNFUSX
4. https://youtu.be/QQYeipc_cik?si=WZspHtbEE5Okbm0f
 
img = sharpen(img)
 
img = erode(img)
 
img = erode(img)
 
k3*24+
 
k3*24+
 
'''
 
eng+
 
+tha
 
eng+
 
JoJOCR.
 
    
    
 
k1=-2
 
k2=-0.1
 
2*
 
+2*0.1
 
-0.1,-0.1,-0.1,-0.1
 
'''
 
'''
 
      
 
'''
 
'''
 
import cv2
from kernel import ShowMustGoOn 
path='/Users/imac/Desktop/SoloOpenSourceProject/JOCR/TestImage/Expenses_Macro/IMG_7553.jpeg'
image = cv2.imread(path)

filtered_image = image#cv2.medianBlur(image, 5)
ShowMustGoOn(filtered_image)

# Bilateral filtering
filtered_image = cv2.bilateralFilter(image, 9, 75, 75)
ShowMustGoOn(filtered_image)

# Adaptive threshold method
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
_, adaptive_threshold = cv2.threshold(gray_image, 0, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 25, 10)
ShowMustGoOn(adaptive_threshold)
 
'image.jpg
 
cv2.waitKey(0)
cv2.destroyAllWindows()
 
cv2.waitKey(0)
cv2.destroyAllWindows()
 
cv2.waitKey(0)
cv2.destroyAllWindows()
 
'median-filtered image', 
 
import cv2
image = cv2.imread('image.jpg')
 
import cv2
image = cv2.imread('image.jpg')
 
filtered_image = cv2.medianBlur(image, 5)
 
# Saving Text
f = open("demo.txt", "a",encoding="utf-8")
f.write(''.join(txt))
f.close()
 
from kernel import canny,get_grayscale,sharpen,erode,dilate,opening,ShowMustGoOn 
from txt import pensil, eraser
 
ile_to_delete
 

2ÇØÇ
ÇØÇiÇØÇsÇØÇ ÇØÇsÇØÇcÇØÇeÇØÇ ÇØÇSÇØÇHÇØÇ ÇØÇwÇØÇaÇØÇeÇØÇeÇØÇnÇØÇtÇØÇ)ÇØÇ ÇØÇoÇØÇnÇØÇeÇØÇ ÇØÇ"ÇØÇ
ÇØÇvÇØÇiÇØÇnÇØÇ ÇØÇFÇØÇHÇØÇ ÇØÇWÇØÇoÇØÇrÇØÇ ÇØÇ7ÇØÇ7ÇØÇ7ÇØÇ)ÇØÇ ÇØÇGÇØÇiÇØÇnÇØÇaÇØÇ ÇØÇGÇØÇmÇØÇnÇØÇwÇØÇyÇØÇ ÇØÇ:ÇØÇ
ÇØÇgÇØÇeÇØÇiÇØÇiÇØÇnÇØÇeÇØÇwÇØÇ ÇØÇrÇØÇyÇØÇ ÇØÇPÇØÇhÇØÇ ÇØÇOÇØÇTÇØÇ ÇØÇeÇØÇeÇØÇ ÇØÇDÇØÇeÇØÇnÇØÇeÇØÇ,ÇØÇ ÇØÇmÇØÇeÇØÇnÇØÇeÇØÇ ÇØÇ7ÇØÇ
ÇØÇ‘ÇØÇ ÇØÇ;ÇØÇ ÇØÇ7ÇØÇ ÇØÇ;ÇØÇ
ÇØÇcÇØÇuÇØÇlÇØÇtÇØÇiÇØÇeÇØÇsÇØÇ ÇØÇwÇØÇeÇØÇ ÇØÇHÇØÇFÇØÇ ÇØÇeÇØÇrÇØÇiÇØÇnÇØÇ ÇØÇhÇØÇeÇØÇtÇØÇuÇØÇtÇØÇuÇØÇmÇØÇ ÇØÇnÇØÇeÇØÇiÇØÇiÇØÇdÇØÇ ÇØÇ‘ÇØÇ
ÇØÇoÇØÇrÇØÇpÇØÇ ÇØÇeÇØÇrÇØÇeÇØÇ ÇØÇ-ÇØÇ
ÇØÇ~ÇØÇ ÇØÇ©ÇØÇ ÇØÇPÇØÇeÇØÇtÇØÇ ÇØÇhÇØÇuÇØÇeÇØÇ ÇØÇnÇØÇaÇØÇnÇØÇ ÇØÇoÇØÇnÇØÇeÇØÇ ÇØÇ—ÇØÇ
ÇØÇrÇØÇaÇØÇ ÇØÇeÇØÇaÇØÇeÇØÇ ÇØÇ.ÇØÇ
ÇØÇtÇØÇoÇØÇnÇØÇsÇØÇ ÇØÇaÇØÇTÇØÇ
ÇØÇ©ÇØÇ ÇØÇ«ÇØÇ ÇØÇwÇØÇrÇØÇ ÇØÇPÇØÇaÇØÇlÇØÇsÇØÇ ÇØÇ©ÇØÇ
ÇØÇoÇØÇnÇØÇ ÇØÇ:ÇØÇ ÇØÇaÇØÇrÇØÇtÇØÇeÇØÇ ÇØÇaÇØÇeÇØÇfÇØÇuÇØÇiÇØÇeÇØÇ
ÇØÇfÇØÇrÇØÇsÇØÇvÇØÇeÇØÇuÇØÇsÇØÇ ÇØÇaÇØÇnÇØÇtÇØÇ
ÇØÇsÇØÇrÇØÇoÇØÇ ÇØÇaÇØÇ*ÇØÇ ÇØÇaÇØÇdÇØÇ ÇØÇoÇØÇ
ÇØÇEÇØÇEÇØÇ ÇØÇiÇØÇeÇØÇ ÇØÇaÇØÇ
ÇØÇaÇØÇpÇØÇnÇØÇiÇØÇeÇØÇ ÇØÇ-ÇØÇ ÇØÇSÇØÇAÇØÇGÇØÇAÇØÇSÇØÇ ÇØÇsÇØÇiÇØÇdÇØÇlÇØÇiÇØÇaÇØÇtÇØÇaÇØÇaÇØÇdÇØÇeÇØÇsÇØÇaÇØÇiÇØÇaÇØÇeÇØÇaÇØÇnÇØÇeÇØÇnÇØÇsÇØÇiÇØÇlÇØÇiÇØÇeÇØÇaÇØÇiÇØÇaÇØÇsÇØÇ ÇØÇtÇØÇoÇØÇnÇØÇsÇØÇ ÇØÇeÇØÇtÇØÇ ÇØÇrÇØÇeÇØÇ ÇØÇhÇØÇeÇØÇ ÇØÇaÇØÇgÇØÇaÇØÇtÇØÇeÇØÇ
ÇØÇ©ÇØÇ ÇØÇ-ÇØÇ ÇØÇ_ÇØÇ ÇØÇeÇØÇ
ÇØÇsÇØÇuÇØÇaÇØÇ ÇØÇtÇØÇ ÇØÇ-ÇØÇ
ÇØÇ€ÇØÇ ÇØÇaÇØÇ ÇØÇ¥ÇØÇ ÇØÇaÇØÇ?ÇØÇ ÇØÇ.ÇØÇ ÇØÇ-ÇØÇ ÇØÇwÇØÇaÇØÇ ÇØÇ-ÇØÇ ÇØÇ'ÇØÇ ÇØÇ°ÇØÇ
ÇØÇ5ÇØÇ.ÇØÇeÇØÇ@ÇØÇ ÇØÇ“ÇØÇAÇØÇsÇØÇ ÇØÇcÇØÇ ÇØÇ.ÇØÇ ÇØÇ‘ÇØÇ?ÇØÇ@ÇØÇ ÇØÇcÇØÇeÇØÇ ÇØÇhÇØÇtÇØÇsÇØÇ
ÇØÇeÇØÇ ÇØÇ,ÇØÇ ÇØÇmÇØÇaÇØÇoÇØÇ ÇØÇsÇØÇeÇØÇeÇØÇsÇØÇ?ÇØÇ ÇØÇMÇØÇaÇØÇrÇØÇeÇØÇ ÇØÇeÇØÇsÇØÇtÇØÇoÇØÇyÇØÇ ÇØÇ1ÇØÇ.ÇØÇ ÇØÇ;ÇØÇ ÇØÇ3ÇØÇ0ÇØÇ.ÇØÇ ÇØÇaÇØÇoÇØÇ ÇØÇnÇØÇyÇØÇ
ÇØÇ:ÇØÇ ÇØÇ>ÇØÇ.ÇØÇ«ÇØÇ ÇØÇ?ÇØÇ_ÇØÇ-ÇØÇ
ÇØÇaÇØÇ ÇØÇbÇØÇeÇØÇ,ÇØÇ ÇØÇSÇØÇOÇØÇ ÇØÇaÇØÇ”ÇØÇ ÇØÇmÇØÇeÇØÇrÇØÇ ÇØÇ'ÇØÇ ÇØÇrÇØÇeÇØÇ ÇØÇ7ÇØÇ?ÇØÇ)ÇØÇ ÇØÇ’ÇØÇ ÇØÇ‘ÇØÇ ÇØÇ'ÇØÇ
ÇØÇ ÇØÇ)ÇØÇ ÇØÇ.ÇØÇoÇØÇ5ÇØÇ ÇØÇsÇØÇeÇØÇeÇØÇsÇØÇoÇØÇoÇØÇeÇØÇrÇØÇtÇØÇsÇØÇeÇØÇ ÇØÇcÇØÇoÇØÇvÇØÇeÇØÇtÇØÇ ÇØÇmÇØÇnÇØÇ.ÇØÇ ÇØÇAÇØÇTÇØÇWÇØÇ ÇØÇ:ÇØÇ ÇØÇ~ÇØÇ~ÇØÇ ÇØÇ_ÇØÇ ÇØÇiÇØÇ)ÇØÇ
ÇØÇLÇØÇ2ÇØÇ1ÇØÇ9ÇØÇ ÇØÇ2ÇØÇiÇØÇ4ÇØÇlÇØÇSÇØÇiÇØÇeÇØÇvÇØÇsÇØÇ,ÇØÇ.ÇØÇ ÇØÇ7ÇØÇ6ÇØÇ ÇØÇGÇØÇoÇØÇeÇØÇrÇØÇ ÇØÇeÇØÇTÇØÇ ÇØÇrÇØÇyÇØÇoÇØÇsÇØÇ ÇØÇfÇØÇeÇØÇ ÇØÇAÇØÇTÇØÇwÇØÇ ÇØÇ-ÇØÇ ÇØÇwÇØÇwÇØÇ.ÇØÇ ÇØÇcÇØÇoÇØÇ
ÇØÇeÇØÇ ÇØÇ2ÇØÇ@ÇØÇeÇØÇ)ÇØÇ ÇØÇ2ÇØÇ1ÇØÇ4ÇØÇ5ÇØÇ7ÇØÇ0ÇØÇ4ÇØÇ ÇØÇSÇØÇOÇØÇPÇØÇ.ÇØÇ ÇØÇ7ÇØÇ ÇØÇWÇØÇeÇØÇ ÇØÇ4ÇØÇmÇØÇ ÇØÇmÇØÇuÇØÇtÇØÇeÇØÇ ÇØÇ1ÇØÇ ÇØÇrÇØÇvÇØÇ ÇØÇ4ÇØÇ.ÇØÇ ÇØÇOÇØÇOÇØÇ ÇØÇ4ÇØÇ ÇØÇeÇØÇ
ÇØÇ.ÇØÇ-ÇØÇ ÇØÇ=ÇØÇ ÇØÇ«ÇØÇ
ÇØÇoÇØÇvÇØÇrÇØÇ ÇØÇ4ÇØÇ5ÇØÇ8ÇØÇ ÇØÇOÇØÇOÇØÇRÇØÇsÇØÇ,ÇØÇ ÇØÇMÇØÇIÇØÇUÇØÇRÇØÇAÇØÇ ÇØÇSÇØÇyÇØÇ)ÇØÇ.ÇØÇ ÇØÇmÇØÇeÇØÇ ÇØÇAÇØÇrÇØÇTÇØÇ ÇØÇ1ÇØÇ ÇØÇfÇØÇyÇØÇ ÇØÇ3ÇØÇ.ÇØÇcÇØÇ8ÇØÇ ÇØÇiÇØÇ ÇØÇ4ÇØÇ5ÇØÇ.ÇØÇ2ÇØÇ
ÇØÇpÇØÇdÇØÇ ÇØÇoÇØÇrÇØÇ ÇØÇ'ÇØÇ ÇØÇ—ÇØÇ
ÇØÇ°ÇØÇ ÇØÇBÇØÇeÇØÇsÇØÇtÇØÇ ÇØÇ2ÇØÇiÇØÇlÇØÇeÇØÇsÇØÇwÇØÇeÇØÇ7ÇØÇTÇØÇsÇØÇeÇØÇsÇØÇsÇØÇ ÇØÇWÇØÇrÇØÇoÇØÇmÇØÇsÇØÇ ÇØÇ1ÇØÇ ÇØÇ¥ÇØÇ ÇØÇ7ÇØÇ9ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ9ÇØÇ ÇØÇ1ÇØÇ ÇØÇ7ÇØÇ5ÇØÇ.ÇØÇ2ÇØÇ3ÇØÇ ÇØÇ¢ÇØÇ
ÇØÇOÇØÇ.ÇØÇ4ÇØÇ%ÇØÇ%ÇØÇ ÇØÇ2ÇØÇ ÇØÇlÇØÇoÇØÇoÇØÇsÇØÇeÇØÇ ÇØÇiÇØÇ ÇØÇ.ÇØÇ ÇØÇ.ÇØÇ ÇØÇ3ÇØÇ7ÇØÇ ÇØÇ.ÇØÇ@ÇØÇ ÇØÇiÇØÇ ÇØÇiÇØÇ8ÇØÇ.ÇØÇ2ÇØÇ3ÇØÇ
ÇØÇrÇØÇaÇØÇ)ÇØÇ ÇØÇ4ÇØÇ.ÇØÇ3ÇØÇ8ÇØÇ:ÇØÇ ÇØÇ2ÇØÇ1ÇØÇ3ÇØÇ1ÇØÇ3ÇØÇ5ÇØÇ0ÇØÇ1ÇØÇ7ÇØÇ5ÇØÇ2ÇØÇ5ÇØÇ1ÇØÇ ÇØÇsÇØÇhÇØÇeÇØÇeÇØÇtÇØÇ ÇØÇMÇØÇeÇØÇtÇØÇ ÇØÇiÇØÇ)ÇØÇ ÇØÇ7ÇØÇ ÇØÇ4ÇØÇ0ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ ÇØÇ1ÇØÇ7ÇØÇ4ÇØÇ.ÇØÇ2ÇØÇ5ÇØÇ ÇØÇ¢ÇØÇCÇØÇ
ÇØÇDÇØÇLÇØÇ ÇØÇ2ÇØÇiÇØÇlÇØÇeÇØÇ7ÇØÇTÇØÇeÇØÇOÇØÇlÇØÇeÇØÇcÇØÇeÇØÇeÇØÇeÇØÇ ÇØÇWÇØÇNÇØÇ ÇØÇ1ÇØÇ ÇØÇ'ÇØÇ ÇØÇ9ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ ÇØÇ|ÇØÇ ÇØÇ1ÇØÇ8ÇØÇ6ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ
ÇØÇ@ÇØÇ ÇØÇ|ÇØÇ ÇØÇtÇØÇeÇØÇ ÇØÇ2ÇØÇ0ÇØÇ7ÇØÇ0ÇØÇ1ÇØÇ1ÇØÇ2ÇØÇ8ÇØÇ2ÇØÇ ÇØÇrÇØÇaÇØÇhÇØÇ ÇØÇnÇØÇmÇØÇ ÇØÇiÇØÇnÇØÇ ÇØÇ2ÇØÇ9ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ ÇØÇ1ÇØÇ ÇØÇMÇØÇzÇØÇsÇØÇeÇØÇ ÇØÇ8ÇØÇ ÇØÇ¢ÇØÇ
ÇØÇhÇØÇeÇØÇlÇØÇ
ÇØÇPÇØÇeÇØÇ ÇØÇLÇØÇlÇØÇ ÇØÇ2ÇØÇLÇØÇIÇØÇ@ÇØÇMÇØÇOÇØÇIÇØÇIÇØÇ ÇØÇWÇØÇaÇØÇrÇØÇiÇØÇ ÇØÇ.ÇØÇ*ÇØÇ ÇØÇtÇØÇnÇØÇ ÇØÇaÇØÇ7ÇØÇ.ÇØÇ ÇØÇ|ÇØÇ ÇØÇ1ÇØÇ2ÇØÇ ÇØÇ.ÇØÇ@ÇØÇoÇØÇ
ÇØÇiÇØÇ)ÇØÇ ÇØÇsÇØÇ ÇØÇnÇØÇeÇØÇeÇØÇ ÇØÇ4ÇØÇdÇØÇ)ÇØÇ ÇØÇWÇØÇEÇØÇSÇØÇ ÇØÇaÇØÇpÇØÇcÇØÇ)ÇØÇ ÇØÇUÇØÇoÇØÇrÇØÇuÇØÇ ÇØÇaÇØÇrÇØÇnÇØÇ ÇØÇ”ÇØÇ ÇØÇaÇØÇ ÇØÇ2ÇØÇ ÇØÇ1ÇØÇ2ÇØÇ9ÇØÇ.ÇØÇ@ÇØÇ0ÇØÇ ÇØÇ4ÇØÇ
ÇØÇDÇØÇEÇØÇ,ÇØÇ ÇØÇMÇØÇBÇØÇBÇØÇSÇØÇ ÇØÇTÇØÇIÇØÇOÇØÇOÇØÇIÇØÇSÇØÇEÇØÇ?ÇØÇ ÇØÇAÇØÇCÇØÇFÇØÇEÇØÇ!ÇØÇ ÇØÇOÇØÇrÇØÇ ÇØÇOÇØÇEÇØÇMÇØÇ ÇØÇIÇØÇDÇØÇ ÇØÇoÇØÇeÇØÇsÇØÇ ÇØÇ9ÇØÇ ÇØÇvÇØÇwÇØÇ.ÇØÇ ÇØÇ5ÇØÇ.ÇØÇ0ÇØÇ9ÇØÇ ÇØÇ2ÇØÇ ÇØÇ1ÇØÇ2ÇØÇ.ÇØÇ2ÇØÇ0ÇØÇ ÇØÇSÇØÇ
ÇØÇ'ÇØÇ ÇØÇPÇØÇoÇØÇ ÇØÇ.ÇØÇ ÇØÇ.ÇØÇ ÇØÇ.ÇØÇ
ÇØÇ:ÇØÇ ÇØÇ7ÇØÇ1ÇØÇ9ÇØÇ1ÇØÇ1ÇØÇ ÇØÇ7ÇØÇSÇØÇSÇØÇOÇØÇSÇØÇ ÇØÇTÇØÇhÇØÇoÇØÇmÇØÇeÇØÇ.ÇØÇ ÇØÇ1ÇØÇ ÇØÇiÇØÇrÇØÇ ÇØÇ1ÇØÇsÇØÇ ÇØÇoÇØÇoÇØÇ ÇØÇ|ÇØÇ ÇØÇ1ÇØÇ7ÇØÇ5ÇØÇ.ÇØÇ%ÇØÇ
ÇØÇ¥ÇØÇ ÇØÇ-ÇØÇ ÇØÇ1ÇØÇ9ÇØÇ)ÇØÇ ÇØÇ<ÇØÇ
ÇØÇGÇØÇOÇØÇ ÇØÇAÇØÇeÇØÇ ÇØÇcÇØÇwÇØÇaÇØÇpÇØÇhÇØÇaÇØÇwÇØÇyÇØÇ:ÇØÇ ÇØÇ1ÇØÇ)ÇØÇ.ÇØÇ ÇØÇvÇØÇeÇØÇ ÇØÇ’ÇØÇ ÇØÇ1ÇØÇ7ÇØÇ2ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ ÇØÇ|ÇØÇ ÇØÇ1ÇØÇ2ÇØÇ6ÇØÇ.ÇØÇ0ÇØÇ
ÇØÇ*ÇØÇ ÇØÇoÇØÇ
ÇØÇMÇØÇeÇØÇeÇØÇeÇØÇ ÇØÇfÇØÇrÇØÇeÇØÇ ÇØÇeÇØÇsÇØÇcÇØÇ ÇØÇoÇØÇnÇØÇ ÇØÇ;ÇØÇ ÇØÇ1ÇØÇ ÇØÇwÇØÇuÇØÇ ÇØÇ9ÇØÇ9ÇØÇ.ÇØÇ@ÇØÇ0ÇØÇ ÇØÇ|ÇØÇ ÇØÇ7ÇØÇ.ÇØÇcÇØÇeÇØÇ ÇØÇ‘ÇØÇ
ÇØÇ>ÇØÇ
ÇØÇsÇØÇtÇØÇeÇØÇhÇØÇtÇØÇ ÇØÇPÇØÇeÇØÇrÇØÇnÇØÇtÇØÇ ÇØÇiÇØÇcÇØÇ-ÇØÇ2ÇØÇ5ÇØÇ ÇØÇwÇØÇhÇØÇyÇØÇ.ÇØÇ ÇØÇ(ÇØÇ>ÇØÇ ÇØÇ7ÇØÇ ÇØÇ2ÇØÇ5ÇØÇ.ÇØÇ2ÇØÇ ÇØÇ1ÇØÇ ÇØÇ3ÇØÇ1ÇØÇ7ÇØÇ.ÇØÇ5ÇØÇ0ÇØÇ
ÇØÇ¢ÇØÇ ÇØÇ7ÇØÇ3ÇØÇ2ÇØÇ ÇØÇoÇØÇwÇØÇnÇØÇ ÇØÇSÇØÇaÇØÇnÇØÇ.ÇØÇ ÇØÇ(ÇØÇeÇØÇeÇØÇ ÇØÇiÇØÇ.ÇØÇ ÇØÇ4ÇØÇ2ÇØÇ.ÇØÇ0ÇØÇ0ÇØÇ ÇØÇ2ÇØÇ ÇØÇeÇØÇaÇØÇ.ÇØÇ ÇØÇ‘ÇØÇ
ÇØÇ7ÇØÇ ÇØÇ-ÇØÇ ÇØÇ-ÇØÇ
ÇØÇaÇØÇ ÇØÇeÇØÇaÇØÇeÇØÇ ÇØÇBÇØÇeÇØÇgÇØÇ.ÇØÇ ÇØÇHÇØÇaÇØÇ ÇØÇeÇØÇwÇØÇeÇØÇ ÇØÇvÇØÇeÇØÇrÇØÇeÇØÇ ÇØÇpÇØÇeÇØÇcÇØÇsÇØÇ ÇØÇlÇØÇwÇØÇ ÇØÇ7ÇØÇ5ÇØÇ.ÇØÇ@ÇØÇ ÇØÇ2ÇØÇ ÇØÇmÇØÇoÇØÇsÇØÇ
ÇØÇtÇØÇeÇØÇ.ÇØÇ ÇØÇ-ÇØÇ ÇØÇ-ÇØÇ ÇØÇ‘ÇØÇ
ÇØÇ<ÇØÇ1ÇØÇ ÇØÇ=ÇØÇ ÇØÇPÇØÇ
ÇØÇ.ÇØÇ ÇØÇTÇØÇwÇØÇiÇØÇ ÇØÇaÇØÇ
ÇØÇeÇØÇeÇØÇrÇØÇ ÇØÇoÇØÇ ÇØÇ:ÇØÇ ÇØÇ‘ÇØÇ
ÇØÇbÇØÇsÇØÇ
ÇØÇ:ÇØÇ ÇØÇeÇØÇeÇØÇ
ÇØÇ.ÇØÇ ÇØÇéÇØÇ ÇØÇaÇØÇeÇØÇ.ÇØÇ ÇØÇaÇØÇiÇØÇ

 
2Ç
ÇiÇsÇ ÇsÇcÇeÇ ÇSÇHÇ ÇwÇaÇeÇeÇnÇtÇ)Ç ÇoÇnÇeÇ Ç"Ç
ÇvÇiÇnÇ ÇFÇHÇ ÇWÇoÇrÇ Ç7Ç7Ç7Ç)Ç ÇGÇiÇnÇaÇ ÇGÇmÇnÇwÇyÇ Ç:Ç
ÇgÇeÇiÇiÇnÇeÇwÇ ÇrÇyÇ ÇPÇhÇ ÇOÇTÇ ÇeÇeÇ ÇDÇeÇnÇeÇ,Ç ÇmÇeÇnÇeÇ Ç7Ç
Ç‘Ç Ç;Ç Ç7Ç Ç;Ç
ÇcÇuÇlÇtÇiÇeÇsÇ ÇwÇeÇ ÇHÇFÇ ÇeÇrÇiÇnÇ ÇhÇeÇtÇuÇtÇuÇmÇ ÇnÇeÇiÇiÇdÇ Ç‘Ç
ÇoÇrÇpÇ ÇeÇrÇeÇ Ç-Ç
Ç~Ç Ç©Ç ÇPÇeÇtÇ ÇhÇuÇeÇ ÇnÇaÇnÇ ÇoÇnÇeÇ Ç—Ç
ÇrÇaÇ ÇeÇaÇeÇ Ç.Ç
ÇtÇoÇnÇsÇ ÇaÇTÇ
Ç©Ç Ç«Ç ÇwÇrÇ ÇPÇaÇlÇsÇ Ç©Ç
ÇoÇnÇ Ç:Ç ÇaÇrÇtÇeÇ ÇaÇeÇfÇuÇiÇeÇ
ÇfÇrÇsÇvÇeÇuÇsÇ ÇaÇnÇtÇ
ÇsÇrÇoÇ ÇaÇ*Ç ÇaÇdÇ ÇoÇ
ÇEÇEÇ ÇiÇeÇ ÇaÇ
ÇaÇpÇnÇiÇeÇ Ç-Ç ÇSÇAÇGÇAÇSÇ ÇsÇiÇdÇlÇiÇaÇtÇaÇaÇdÇeÇsÇaÇiÇaÇeÇaÇnÇeÇnÇsÇiÇlÇiÇeÇaÇiÇaÇsÇ ÇtÇoÇnÇsÇ ÇeÇtÇ ÇrÇeÇ ÇhÇeÇ ÇaÇgÇaÇtÇeÇ
Ç©Ç Ç-Ç Ç_Ç ÇeÇ
ÇsÇuÇaÇ ÇtÇ Ç-Ç
Ç€Ç ÇaÇ Ç¥Ç ÇaÇ?Ç Ç.Ç Ç-Ç ÇwÇaÇ Ç-Ç Ç'Ç Ç°Ç
Ç5Ç.ÇeÇ@Ç Ç“ÇAÇsÇ ÇcÇ Ç.Ç Ç‘Ç?Ç@Ç ÇcÇeÇ ÇhÇtÇsÇ
ÇeÇ Ç,Ç ÇmÇaÇoÇ ÇsÇeÇeÇsÇ?Ç ÇMÇaÇrÇeÇ ÇeÇsÇtÇoÇyÇ Ç1Ç.Ç Ç;Ç Ç3Ç0Ç.Ç ÇaÇoÇ ÇnÇyÇ
Ç:Ç Ç>Ç.Ç«Ç Ç?Ç_Ç-Ç
ÇaÇ ÇbÇeÇ,Ç ÇSÇOÇ ÇaÇ”Ç ÇmÇeÇrÇ Ç'Ç ÇrÇeÇ Ç7Ç?Ç)Ç Ç’Ç Ç‘Ç Ç'Ç
Ç Ç)Ç Ç.ÇoÇ5Ç ÇsÇeÇeÇsÇoÇoÇeÇrÇtÇsÇeÇ ÇcÇoÇvÇeÇtÇ ÇmÇnÇ.Ç ÇAÇTÇWÇ Ç:Ç Ç~Ç~Ç Ç_Ç ÇiÇ)Ç
ÇLÇ2Ç1Ç9Ç Ç2ÇiÇ4ÇlÇSÇiÇeÇvÇsÇ,Ç.Ç Ç7Ç6Ç ÇGÇoÇeÇrÇ ÇeÇTÇ ÇrÇyÇoÇsÇ ÇfÇeÇ ÇAÇTÇwÇ Ç-Ç ÇwÇwÇ.Ç ÇcÇoÇ
ÇeÇ Ç2Ç@ÇeÇ)Ç Ç2Ç1Ç4Ç5Ç7Ç0Ç4Ç ÇSÇOÇPÇ.Ç Ç7Ç ÇWÇeÇ Ç4ÇmÇ ÇmÇuÇtÇeÇ Ç1Ç ÇrÇvÇ Ç4Ç.Ç ÇOÇOÇ Ç4Ç ÇeÇ
Ç.Ç-Ç Ç=Ç Ç«Ç
ÇoÇvÇrÇ Ç4Ç5Ç8Ç ÇOÇOÇRÇsÇ,Ç ÇMÇIÇUÇRÇAÇ ÇSÇyÇ)Ç.Ç ÇmÇeÇ ÇAÇrÇTÇ Ç1Ç ÇfÇyÇ Ç3Ç.ÇcÇ8Ç ÇiÇ Ç4Ç5Ç.Ç2Ç
ÇpÇdÇ ÇoÇrÇ Ç'Ç Ç—Ç
Ç°Ç ÇBÇeÇsÇtÇ Ç2ÇiÇlÇeÇsÇwÇeÇ7ÇTÇsÇeÇsÇsÇ ÇWÇrÇoÇmÇsÇ Ç1Ç Ç¥Ç Ç7Ç9Ç.Ç0Ç0Ç9Ç Ç1Ç Ç7Ç5Ç.Ç2Ç3Ç Ç¢Ç
ÇOÇ.Ç4Ç%Ç%Ç Ç2Ç ÇlÇoÇoÇsÇeÇ ÇiÇ Ç.Ç Ç.Ç Ç3Ç7Ç Ç.Ç@Ç ÇiÇ ÇiÇ8Ç.Ç2Ç3Ç
ÇrÇaÇ)Ç Ç4Ç.Ç3Ç8Ç:Ç Ç2Ç1Ç3Ç1Ç3Ç5Ç0Ç1Ç7Ç5Ç2Ç5Ç1Ç ÇsÇhÇeÇeÇtÇ ÇMÇeÇtÇ ÇiÇ)Ç Ç7Ç Ç4Ç0Ç.Ç0Ç0Ç Ç1Ç7Ç4Ç.Ç2Ç5Ç Ç¢ÇCÇ
ÇDÇLÇ Ç2ÇiÇlÇeÇ7ÇTÇeÇOÇlÇeÇcÇeÇeÇeÇ ÇWÇNÇ Ç1Ç Ç'Ç Ç9Ç.Ç0Ç0Ç Ç|Ç Ç1Ç8Ç6Ç.Ç0Ç0Ç
Ç@Ç Ç|Ç ÇtÇeÇ Ç2Ç0Ç7Ç0Ç1Ç1Ç2Ç8Ç2Ç ÇrÇaÇhÇ ÇnÇmÇ ÇiÇnÇ Ç2Ç9Ç.Ç0Ç0Ç Ç1Ç ÇMÇzÇsÇeÇ Ç8Ç Ç¢Ç
ÇhÇeÇlÇ
ÇPÇeÇ ÇLÇlÇ Ç2ÇLÇIÇ@ÇMÇOÇIÇIÇ ÇWÇaÇrÇiÇ Ç.Ç*Ç ÇtÇnÇ ÇaÇ7Ç.Ç Ç|Ç Ç1Ç2Ç Ç.Ç@ÇoÇ
ÇiÇ)Ç ÇsÇ ÇnÇeÇeÇ Ç4ÇdÇ)Ç ÇWÇEÇSÇ ÇaÇpÇcÇ)Ç ÇUÇoÇrÇuÇ ÇaÇrÇnÇ Ç”Ç ÇaÇ Ç2Ç Ç1Ç2Ç9Ç.Ç@Ç0Ç Ç4Ç
ÇDÇEÇ,Ç ÇMÇBÇBÇSÇ ÇTÇIÇOÇOÇIÇSÇEÇ?Ç ÇAÇCÇFÇEÇ!Ç ÇOÇrÇ ÇOÇEÇMÇ ÇIÇDÇ ÇoÇeÇsÇ Ç9Ç ÇvÇwÇ.Ç Ç5Ç.Ç0Ç9Ç Ç2Ç Ç1Ç2Ç.Ç2Ç0Ç ÇSÇ
Ç'Ç ÇPÇoÇ Ç.Ç Ç.Ç Ç.Ç
Ç:Ç Ç7Ç1Ç9Ç1Ç1Ç Ç7ÇSÇSÇOÇSÇ ÇTÇhÇoÇmÇeÇ.Ç Ç1Ç ÇiÇrÇ Ç1ÇsÇ ÇoÇoÇ Ç|Ç Ç1Ç7Ç5Ç.Ç%Ç
Ç¥Ç Ç-Ç Ç1Ç9Ç)Ç Ç<Ç
ÇGÇOÇ ÇAÇeÇ ÇcÇwÇaÇpÇhÇaÇwÇyÇ:Ç Ç1Ç)Ç.Ç ÇvÇeÇ Ç’Ç Ç1Ç7Ç2Ç.Ç0Ç0Ç Ç|Ç Ç1Ç2Ç6Ç.Ç0Ç
Ç*Ç ÇoÇ
ÇMÇeÇeÇeÇ ÇfÇrÇeÇ ÇeÇsÇcÇ ÇoÇnÇ Ç;Ç Ç1Ç ÇwÇuÇ Ç9Ç9Ç.Ç@Ç0Ç Ç|Ç Ç7Ç.ÇcÇeÇ Ç‘Ç
Ç>Ç
ÇsÇtÇeÇhÇtÇ ÇPÇeÇrÇnÇtÇ ÇiÇcÇ-Ç2Ç5Ç ÇwÇhÇyÇ.Ç Ç(Ç>Ç Ç7Ç Ç2Ç5Ç.Ç2Ç Ç1Ç Ç3Ç1Ç7Ç.Ç5Ç0Ç
Ç¢Ç Ç7Ç3Ç2Ç ÇoÇwÇnÇ ÇSÇaÇnÇ.Ç Ç(ÇeÇeÇ ÇiÇ.Ç Ç4Ç2Ç.Ç0Ç0Ç Ç2Ç ÇeÇaÇ.Ç Ç‘Ç
Ç7Ç Ç-Ç Ç-Ç
ÇaÇ ÇeÇaÇeÇ ÇBÇeÇgÇ.Ç ÇHÇaÇ ÇeÇwÇeÇ ÇvÇeÇrÇeÇ ÇpÇeÇcÇsÇ ÇlÇwÇ Ç7Ç5Ç.Ç@Ç Ç2Ç ÇmÇoÇsÇ
ÇtÇeÇ.Ç Ç-Ç Ç-Ç Ç‘Ç
Ç<Ç1Ç Ç=Ç ÇPÇ
Ç.Ç ÇTÇwÇiÇ ÇaÇ
ÇeÇeÇrÇ ÇoÇ Ç:Ç Ç‘Ç
ÇbÇsÇ
Ç:Ç ÇeÇeÇ
Ç.Ç ÇéÇ ÇaÇeÇ.Ç ÇaÇiÇ
 
10000»*
od
¢g =
ae CAPE ———
JOJO
corre
~ —— e ——
y rere noe
e a '
¥ " .
tel Y > eee eS
Long Island Iced Tea 120 Ice Latte 100
Ginger Ale 120 Ice Americano 100
ee ——
Merry Christmas 120 Ice Cappuchino 100
La Vie En Rose 120 Ice Caramel Macchiato 120
hn
Strawberry Margarita 120 Black Orange / Yuzu 120
LD
Ry] Hot Coffee with Milk 80
c d : , - ee
Espresso 60
r ——
4 Coldbrew Thai Specialty 190 ALL KINOS
Espresso On The Rock 400
_ _——L_ ————_—_—_—
ee .
DESSER — Honey a's
’ —_—<——— 1.200 —_——————
‘4 SE _ Aa » a ry 5
“i _— i ar Dont Wor: Be Coffee 2C ee
ij u Fone} a a —— ail
| . ah a % '
a
»Ç*Ç
ÇoÇdÇ
Ç¢ÇgÇ Ç=Ç
ÇaÇeÇ ÇCÇAÇPÇEÇ Ç—Ç—Ç—Ç
ÇJÇOÇJÇOÇ
ÇcÇoÇrÇrÇeÇ
Ç~Ç Ç—Ç—Ç ÇeÇ Ç—Ç—Ç
ÇyÇ ÇrÇeÇrÇeÇ ÇnÇoÇeÇ
ÇeÇ ÇaÇ Ç'Ç
Ç¥Ç Ç"Ç Ç.Ç
ÇtÇeÇlÇ ÇYÇ Ç>Ç ÇeÇeÇeÇ ÇeÇSÇ
ÇLÇoÇnÇgÇ ÇIÇsÇlÇaÇnÇdÇ ÇIÇcÇeÇdÇ ÇTÇeÇaÇ Ç1Ç2Ç0Ç ÇIÇcÇeÇ ÇLÇaÇtÇtÇeÇ Ç1Ç0Ç0Ç
ÇGÇiÇnÇgÇeÇrÇ ÇAÇlÇeÇ Ç1Ç2Ç0Ç ÇIÇcÇeÇ ÇAÇmÇeÇrÇiÇcÇaÇnÇoÇ Ç1Ç0Ç0Ç
ÇeÇeÇ Ç—Ç—Ç
ÇMÇeÇrÇrÇyÇ ÇCÇhÇrÇiÇsÇtÇmÇaÇsÇ Ç1Ç2Ç0Ç ÇIÇcÇeÇ ÇCÇaÇpÇpÇuÇcÇhÇiÇnÇoÇ Ç1Ç0Ç0Ç
ÇLÇaÇ ÇVÇiÇeÇ ÇEÇnÇ ÇRÇoÇsÇeÇ Ç1Ç2Ç0Ç ÇIÇcÇeÇ ÇCÇaÇrÇaÇmÇeÇlÇ ÇMÇaÇcÇcÇhÇiÇaÇtÇoÇ Ç1Ç2Ç0Ç
ÇhÇnÇ
ÇSÇtÇrÇaÇwÇbÇeÇrÇrÇyÇ ÇMÇaÇrÇgÇaÇrÇiÇtÇaÇ Ç1Ç2Ç0Ç ÇBÇlÇaÇcÇkÇ ÇOÇrÇaÇnÇgÇeÇ Ç/Ç ÇYÇuÇzÇuÇ Ç1Ç2Ç0Ç
ÇLÇDÇ
ÇRÇyÇ]Ç ÇHÇoÇtÇ ÇCÇoÇfÇfÇeÇeÇ ÇwÇiÇtÇhÇ ÇMÇiÇlÇkÇ Ç8Ç0Ç
ÇcÇ ÇdÇ Ç:Ç Ç,Ç Ç-Ç ÇeÇeÇ
ÇEÇsÇpÇrÇeÇsÇsÇoÇ Ç6Ç0Ç
ÇrÇ Ç—Ç—Ç
Ç4Ç ÇCÇoÇlÇdÇbÇrÇeÇwÇ ÇTÇhÇaÇiÇ ÇSÇpÇeÇcÇiÇaÇlÇtÇyÇ Ç1Ç9Ç0Ç ÇAÇLÇLÇ ÇKÇIÇNÇOÇSÇ
ÇEÇsÇpÇrÇeÇsÇsÇoÇ ÇOÇnÇ ÇTÇhÇeÇ ÇRÇoÇcÇkÇ Ç4Ç0Ç0Ç
Ç_Ç Ç_Ç—Ç—ÇLÇ_Ç Ç—Ç—Ç—Ç—Ç_Ç—Ç_Ç—Ç_Ç—Ç
ÇeÇeÇ Ç.Ç
ÇDÇEÇSÇSÇEÇRÇ Ç—Ç ÇHÇoÇnÇeÇyÇ ÇaÇ'ÇsÇ
Ç’Ç Ç—Ç_Ç—Ç<Ç—Ç—Ç—Ç Ç1Ç.Ç2Ç0Ç0Ç Ç—Ç_Ç—Ç—Ç—Ç—Ç—Ç—Ç
Ç‘Ç4Ç ÇSÇEÇ Ç_Ç ÇAÇaÇ Ç»Ç ÇaÇ ÇrÇyÇ Ç5Ç
Ç“ÇiÇ Ç_Ç—Ç ÇiÇ ÇaÇrÇ ÇDÇoÇnÇtÇ ÇWÇoÇrÇ:Ç ÇBÇeÇ ÇCÇoÇfÇfÇeÇeÇ Ç2ÇCÇ ÇeÇeÇ
ÇiÇjÇ ÇuÇ ÇFÇoÇnÇeÇ}Ç ÇaÇ ÇaÇ Ç—Ç—Ç ÇaÇiÇlÇ
Ç|Ç Ç.Ç ÇaÇhÇ ÇaÇ Ç%Ç Ç'Ç
ÇaÇ
2Ç
ÇiÇsÇ ÇsÇcÇeÇ ÇSÇHÇ ÇwÇaÇeÇeÇnÇtÇ)Ç ÇoÇnÇeÇ Ç"Ç
ÇvÇiÇnÇ ÇFÇHÇ ÇWÇoÇrÇ Ç7Ç7Ç7Ç)Ç ÇGÇiÇnÇaÇ ÇGÇmÇnÇwÇyÇ Ç:Ç
ÇgÇeÇiÇiÇnÇeÇwÇ ÇrÇyÇ ÇPÇhÇ ÇOÇTÇ ÇeÇeÇ ÇDÇeÇnÇeÇ,Ç ÇmÇeÇnÇeÇ Ç7Ç
Ç‘Ç Ç;Ç Ç7Ç Ç;Ç
ÇcÇuÇlÇtÇiÇeÇsÇ ÇwÇeÇ ÇHÇFÇ ÇeÇrÇiÇnÇ ÇhÇeÇtÇuÇtÇuÇmÇ ÇnÇeÇiÇiÇdÇ Ç‘Ç
ÇoÇrÇpÇ ÇeÇrÇeÇ Ç-Ç
Ç~Ç Ç©Ç ÇPÇeÇtÇ ÇhÇuÇeÇ ÇnÇaÇnÇ ÇoÇnÇeÇ Ç—Ç
ÇrÇaÇ ÇeÇaÇeÇ Ç.Ç
ÇtÇoÇnÇsÇ ÇaÇTÇ
Ç©Ç Ç«Ç ÇwÇrÇ ÇPÇaÇlÇsÇ Ç©Ç
ÇoÇnÇ Ç:Ç ÇaÇrÇtÇeÇ ÇaÇeÇfÇuÇiÇeÇ
ÇfÇrÇsÇvÇeÇuÇsÇ ÇaÇnÇtÇ
ÇsÇrÇoÇ ÇaÇ*Ç ÇaÇdÇ ÇoÇ
ÇEÇEÇ ÇiÇeÇ ÇaÇ
ÇaÇpÇnÇiÇeÇ Ç-Ç ÇSÇAÇGÇAÇSÇ ÇsÇiÇdÇlÇiÇaÇtÇaÇaÇdÇeÇsÇaÇiÇaÇeÇaÇnÇeÇnÇsÇiÇlÇiÇeÇaÇiÇaÇsÇ ÇtÇoÇnÇsÇ ÇeÇtÇ ÇrÇeÇ ÇhÇeÇ ÇaÇgÇaÇtÇeÇ
Ç©Ç Ç-Ç Ç_Ç ÇeÇ
ÇsÇuÇaÇ ÇtÇ Ç-Ç
Ç€Ç ÇaÇ Ç¥Ç ÇaÇ?Ç Ç.Ç Ç-Ç ÇwÇaÇ Ç-Ç Ç'Ç Ç°Ç
Ç5Ç.ÇeÇ@Ç Ç“ÇAÇsÇ ÇcÇ Ç.Ç Ç‘Ç?Ç@Ç ÇcÇeÇ ÇhÇtÇsÇ
ÇeÇ Ç,Ç ÇmÇaÇoÇ ÇsÇeÇeÇsÇ?Ç ÇMÇaÇrÇeÇ ÇeÇsÇtÇoÇyÇ Ç1Ç.Ç Ç;Ç Ç3Ç0Ç.Ç ÇaÇoÇ ÇnÇyÇ
Ç:Ç Ç>Ç.Ç«Ç Ç?Ç_Ç-Ç
ÇaÇ ÇbÇeÇ,Ç ÇSÇOÇ ÇaÇ”Ç ÇmÇeÇrÇ Ç'Ç ÇrÇeÇ Ç7Ç?Ç)Ç Ç’Ç Ç‘Ç Ç'Ç
Ç Ç)Ç Ç.ÇoÇ5Ç ÇsÇeÇeÇsÇoÇoÇeÇrÇtÇsÇeÇ ÇcÇoÇvÇeÇtÇ ÇmÇnÇ.Ç ÇAÇTÇWÇ Ç:Ç Ç~Ç~Ç Ç_Ç ÇiÇ)Ç
ÇLÇ2Ç1Ç9Ç Ç2ÇiÇ4ÇlÇSÇiÇeÇvÇsÇ,Ç.Ç Ç7Ç6Ç ÇGÇoÇeÇrÇ ÇeÇTÇ ÇrÇyÇoÇsÇ ÇfÇeÇ ÇAÇTÇwÇ Ç-Ç ÇwÇwÇ.Ç ÇcÇoÇ
ÇeÇ Ç2Ç@ÇeÇ)Ç Ç2Ç1Ç4Ç5Ç7Ç0Ç4Ç ÇSÇOÇPÇ.Ç Ç7Ç ÇWÇeÇ Ç4ÇmÇ ÇmÇuÇtÇeÇ Ç1Ç ÇrÇvÇ Ç4Ç.Ç ÇOÇOÇ Ç4Ç ÇeÇ
Ç.Ç-Ç Ç=Ç Ç«Ç
ÇoÇvÇrÇ Ç4Ç5Ç8Ç ÇOÇOÇRÇsÇ,Ç ÇMÇIÇUÇRÇAÇ ÇSÇyÇ)Ç.Ç ÇmÇeÇ ÇAÇrÇTÇ Ç1Ç ÇfÇyÇ Ç3Ç.ÇcÇ8Ç ÇiÇ Ç4Ç5Ç.Ç2Ç
ÇpÇdÇ ÇoÇrÇ Ç'Ç Ç—Ç
Ç°Ç ÇBÇeÇsÇtÇ Ç2ÇiÇlÇeÇsÇwÇeÇ7ÇTÇsÇeÇsÇsÇ ÇWÇrÇoÇmÇsÇ Ç1Ç Ç¥Ç Ç7Ç9Ç.Ç0Ç0Ç9Ç Ç1Ç Ç7Ç5Ç.Ç2Ç3Ç Ç¢Ç
ÇOÇ.Ç4Ç%Ç%Ç Ç2Ç ÇlÇoÇoÇsÇeÇ ÇiÇ Ç.Ç Ç.Ç Ç3Ç7Ç Ç.Ç@Ç ÇiÇ ÇiÇ8Ç.Ç2Ç3Ç
ÇrÇaÇ)Ç Ç4Ç.Ç3Ç8Ç:Ç Ç2Ç1Ç3Ç1Ç3Ç5Ç0Ç1Ç7Ç5Ç2Ç5Ç1Ç ÇsÇhÇeÇeÇtÇ ÇMÇeÇtÇ ÇiÇ)Ç Ç7Ç Ç4Ç0Ç.Ç0Ç0Ç Ç1Ç7Ç4Ç.Ç2Ç5Ç Ç¢ÇCÇ
ÇDÇLÇ Ç2ÇiÇlÇeÇ7ÇTÇeÇOÇlÇeÇcÇeÇeÇeÇ ÇWÇNÇ Ç1Ç Ç'Ç Ç9Ç.Ç0Ç0Ç Ç|Ç Ç1Ç8Ç6Ç.Ç0Ç0Ç
Ç@Ç Ç|Ç ÇtÇeÇ Ç2Ç0Ç7Ç0Ç1Ç1Ç2Ç8Ç2Ç ÇrÇaÇhÇ ÇnÇmÇ ÇiÇnÇ Ç2Ç9Ç.Ç0Ç0Ç Ç1Ç ÇMÇzÇsÇeÇ Ç8Ç Ç¢Ç
ÇhÇeÇlÇ
ÇPÇeÇ ÇLÇlÇ Ç2ÇLÇIÇ@ÇMÇOÇIÇIÇ ÇWÇaÇrÇiÇ Ç.Ç*Ç ÇtÇnÇ ÇaÇ7Ç.Ç Ç|Ç Ç1Ç2Ç Ç.Ç@ÇoÇ
ÇiÇ)Ç ÇsÇ ÇnÇeÇeÇ Ç4ÇdÇ)Ç ÇWÇEÇSÇ ÇaÇpÇcÇ)Ç ÇUÇoÇrÇuÇ ÇaÇrÇnÇ Ç”Ç ÇaÇ Ç2Ç Ç1Ç2Ç9Ç.Ç@Ç0Ç Ç4Ç
ÇDÇEÇ,Ç ÇMÇBÇBÇSÇ ÇTÇIÇOÇOÇIÇSÇEÇ?Ç ÇAÇCÇFÇEÇ!Ç ÇOÇrÇ ÇOÇEÇMÇ ÇIÇDÇ ÇoÇeÇsÇ Ç9Ç ÇvÇwÇ.Ç Ç5Ç.Ç0Ç9Ç Ç2Ç Ç1Ç2Ç.Ç2Ç0Ç ÇSÇ
Ç'Ç ÇPÇoÇ Ç.Ç Ç.Ç Ç.Ç
Ç:Ç Ç7Ç1Ç9Ç1Ç1Ç Ç7ÇSÇSÇOÇSÇ ÇTÇhÇoÇmÇeÇ.Ç Ç1Ç ÇiÇrÇ Ç1ÇsÇ ÇoÇoÇ Ç|Ç Ç1Ç7Ç5Ç.Ç%Ç
Ç¥Ç Ç-Ç Ç1Ç9Ç)Ç Ç<Ç
ÇGÇOÇ ÇAÇeÇ ÇcÇwÇaÇpÇhÇaÇwÇyÇ:Ç Ç1Ç)Ç.Ç ÇvÇeÇ Ç’Ç Ç1Ç7Ç2Ç.Ç0Ç0Ç Ç|Ç Ç1Ç2Ç6Ç.Ç0Ç
Ç*Ç ÇoÇ
ÇMÇeÇeÇeÇ ÇfÇrÇeÇ ÇeÇsÇcÇ ÇoÇnÇ Ç;Ç Ç1Ç ÇwÇuÇ Ç9Ç9Ç.Ç@Ç0Ç Ç|Ç Ç7Ç.ÇcÇeÇ Ç‘Ç
Ç>Ç
ÇsÇtÇeÇhÇtÇ ÇPÇeÇrÇnÇtÇ ÇiÇcÇ-Ç2Ç5Ç ÇwÇhÇyÇ.Ç Ç(Ç>Ç Ç7Ç Ç2Ç5Ç.Ç2Ç Ç1Ç Ç3Ç1Ç7Ç.Ç5Ç0Ç
Ç¢Ç Ç7Ç3Ç2Ç ÇoÇwÇnÇ ÇSÇaÇnÇ.Ç Ç(ÇeÇeÇ ÇiÇ.Ç Ç4Ç2Ç.Ç0Ç0Ç Ç2Ç ÇeÇaÇ.Ç Ç‘Ç
Ç7Ç Ç-Ç Ç-Ç
ÇaÇ ÇeÇaÇeÇ ÇBÇeÇgÇ.Ç ÇHÇaÇ ÇeÇwÇeÇ ÇvÇeÇrÇeÇ ÇpÇeÇcÇsÇ ÇlÇwÇ Ç7Ç5Ç.Ç@Ç Ç2Ç ÇmÇoÇsÇ
ÇtÇeÇ.Ç Ç-Ç Ç-Ç Ç‘Ç
Ç<Ç1Ç Ç=Ç ÇPÇ
Ç.Ç ÇTÇwÇiÇ ÇaÇ
ÇeÇeÇrÇ ÇoÇ Ç:Ç Ç‘Ç
ÇbÇsÇ
Ç:Ç ÇeÇeÇ
Ç.Ç ÇéÇ ÇaÇeÇ.Ç ÇaÇiÇ

 
str
 
########################################################################################
 

########################################################################################
 
########################################################################################
 

########################################################################################
 
########################################################################################
 
#ShowMustGoOn(img) # show the image

########################################################################################
 
########################################################################################
 
########################################################################################
 
Import and 
 
path = [
    '/Users/imac/Desktop/SoloOpenSourceProject/JOCR/TestImage/Menu/IMG_7571.jpeg']
 
txt = pytesseract.image_to_string(img, lang='eng', config='--psm 6')
 
print(text)
 
# https://stackoverflow.com/questions/64723694/permission-denied-when-reading-a-image-text-in-pytesseract
 
 **
 
img=get_grayscale(img)
img = Image.fromarray(img)#https://stackoverflow.com/questions/43232813/convert-opencv-image-format-to-pil-image-format

 
ShowMustGoOn(img)
 
path = '/Users/imac/Desktop/SoloOpenSourceProject/JOCR/TestImage/Menu/IMG_7571.jpeg'
img=Image.open(path)
text=ts.image_to_string(img)
ShowMustGoOn(img)
print(text)
# https://stackoverflow.com/questions/64723694/permission-denied-when-reading-a-image-text-in-pytesseract
 
cv2.imread(
 
import tesseract
 
print(tesseract)
 
.__file__
 
#open and read the file after the appending:

#df.to_csv("test1.csv")
#print(df.to_string())
#cv2.imshow("image", img)
#cv2.waitKey(0)
#cv2.destroyAllWindows()'''
 

from tesserocr import PyTessBaseAPI
from PIL import Image

with PyTessBaseAPI(lang="tha") as api:
    #ลบช่องว่างแต่ละตัวอักษร
    api.SetVariable('preserve_interword_spaces', '1')
    
    #Path ของรูปภาพ
    api.SetImageFile("Image.jpeg")
    print(api.GetUTF8Text())
 
10000#
 
Image.open(
 

#cv2.imshow("test",img)
#cv2.waitKey(0)
#cv2.destroyAllWindows()
 
#opening - erosion followed by dilation
def opening(image):
    kernel = np.ones((5,5),np.uint8)
    return cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)
 
img = cv2.imread('/Users/imac/Desktop/SoloOpenSourceProject/JOCR/TestImage/Menu/IMG_7571.jpeg')
 
canny,get_grayscale,sharpen,erode,dilate,opening
 
opening
 
#dilation
def dilate(image):
    kernel = np.ones((5,5),np.uint8)
    return cv2.dilate(image, kernel, iterations = 1)
    # https://www.geeksforgeeks.org/erosion-dilation-images-using-opencv-python/
 
def get_grayscale(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

def sharpen(image):
    #kernel = np.array([[-1,-1,-1], [-1,10,-1], [-1,-1,-1]])
    #kernel = np.array([[0.25,0,-0.25], [0.5,0,-0.5], [0.25,0,-0.25]])
    kernel = (1/(10**2))*np.ones((10,10))
    # https://youtu.be/KuXjwB4LzSA?si=mt-leKGKjpMnJGfg
    # https://www.geeksforgeeks.org/python-opencv-filter2d-function/
    return cv2.filter2D(image, -1, kernel)
 
#dilation
def dilate(image):
    kernel = np.ones((5,5),np.uint8)
    return cv2.dilate(image, kernel, iterations = 1)
 


def sharpen(image):
    kernel = np.array([[-1,-1,-1], [-1,10,-1], [-1,-1,-1]])
    return cv2.filter2D(image, -1, kernel)
 
def get_grayscale(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
 
def canny(image):
    return cv2.Canny(image, 100, 200)

#dilation
def dilate(image):
    kernel = np.ones((5,5),np.uint8)
    return cv2.dilate(image, kernel, iterations = 1)
    
#erosion
def erode(image):
    kernel = np.ones((5,5),np.uint8)
    return cv2.erode(image, kernel, iterations = 1)

#opening - erosion followed by dilation
def opening(image):
    kernel = np.ones((5,5),np.uint8)
    return cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)

def get_grayscale(image):
    return cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

def sharpen(image):
    kernel = np.array([[-1,-1,-1], [-1,10,-1], [-1,-1,-1]])
    return cv2.filter2D(image, -1, kernel)
 
#img = get_grayscale(img)
 

print(pytesseract.pytesseract.tesseract_cmd)
print(type(pytesseract.pytesseract.tesseract_cmd))
 
'''
 
'''
 
'''
 
    
 

#img = get_grayscale(img)
for i in [-1,0,1,2]:
 
np.array([[1/9,1/9,1/9], [1/9,1/9,1/9], [1/9,1/9,1/9]])
 
    n=100
 
25
 
print('hello')
 
import argparse
 
from PIL import Image, ImageGrab
 
